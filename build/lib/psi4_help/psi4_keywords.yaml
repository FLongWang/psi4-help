ADC:
  CUTOFF_AMPS_PRINT:
    default: '0.01'
    description: Tolerance for extracted or printed amplitudes. This option is only
      available for the adcc backend.
    type: double
  GAUGE:
    default: LENGTH
    description: Specifies the choice of representation of the electric dipole operator.
      * Acceptable values are LENGTH (default) and VELOCITY.
    optional: LENGTH, VELOCITY
    type: string
  KIND:
    default: SINGLET
    description: The kind of states to compute.
    optional: SINGLET, TRIPLET, SPIN_FLIP, ANY
    type: string
  MAXITER:
    default: '50'
    description: Maximum number of iterations
    type: integer
  MAX_NUM_VECS:
    default: '-1'
    description: Maximum number of subspace vectors. A negative value uses * the adcc
      default (roughly between 20 and 5 * N_GUESSES). This option is only available
      for the adcc backend.
    type: integer
  NUM_CORE_ORBITALS:
    default: '0'
    description: Number of orbitals to place in the core. This option is only available
      for the adcc backend.
    type: integer
  NUM_GUESSES:
    default: '-1'
    description: Number of guess vectors to generate and use. Negative values keep
      * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available
      for the adcc backend.
    type: integer
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    optional: RHF, UHF
    type: string
  ROOTS_PER_IRREP:
    default: Default
    description: The number of poles / excited states to obtain per irrep vector
    type: array
  R_CONVERGENCE:
    default: '-1'
    description: Convergence threshold for ADC matrix diagonalisation. Negative values
      keep the * adcc default (1e-6)
    type: double
CCDENSITY:
  AO_BASIS:
    default: NONE
    description: The algorithm to use for the
    optional: NONE, DISK, DIRECT
    type: string
  CACHELEVEL:
    default: '2'
    description: The amount of caching of data to perform
    type: integer
  DEBUG:
    default: '0'
    description: Reproducing energies from densities ?
    type: integer
  GAUGE:
    default: LENGTH
    description: The type of gauge to use for properties
    type: string
  INTS_TOLERANCE:
    default: 1e-14
    description: Schwarz screening threshold. Mininum absolute value below which TEI
      are neglected.
    type: double
  OPDM_ONLY:
    default: 'false'
    description: For internal use only! Compute the one-particle density matrix, but
      not the two-particle density matrix.
    type: boolean
  OPDM_RELAX:
    default: 'false'
    description: Do relax the one-particle density matrix?
    type: boolean
  PROP_ALL:
    default: 'true'
    description: Compute non-relaxed properties for all excited states.
    type: boolean
  PROP_ROOT:
    default: '1'
    description: Root number (within its irrep) for computing properties
    type: integer
  PROP_SYM:
    default: '1'
    description: The symmetry of states
    type: integer
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    type: string
  ROOTS_PER_IRREP:
    default: Default
    description: The number of electronic states to computed, per irreducible representation
    type: array
  WFN:
    default: SCF
    description: Wavefunction type
    type: string
  WRITE_NOS:
    default: 'false'
    description: Do write natural orbitals (molden)
    type: boolean
  XI:
    default: 'false'
    description: Do compute Xi?
    type: boolean
  XI_CONNECT:
    default: 'false'
    description: Do require
    type: boolean
  ZETA:
    default: 'false'
    description: Do use zeta?
    type: boolean
CCENERGY:
  ABCD:
    default: NEW
    description: Type of ABCD algorithm will be used
    optional: NEW, OLD
    type: string
  ANALYZE:
    default: 'false'
    description: Do analyze T2 amplitudes
    type: boolean
  AO_BASIS:
    default: NONE
    description: The algorithm to use for the
    optional: NONE, DISK, DIRECT
    type: string
  BCCD_MAXITER:
    default: '50'
    description: Maximum number of iterations for Brueckner CCD.
    type: integer
  BRUECKNER_ORBS_R_CONVERGENCE:
    default: 1e-5
    description: Convergence criterion for Brueckner orbitals. The convergence is
      determined based on the largest
    type: double
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd governing the storage of amplitudes, integrals,
      and intermediates in the CC procedure. A value of 0 retains no quantities in
      cache, while a level of 6 attempts to store all quantities in cache. For particularly
      large calculations, a value of 0 may help with certain types of memory problems.
      The default is 2, which means that all four-index quantities with up to two
      virtual-orbital indices (e.g.,
    type: integer
  CACHETYPE:
    default: LOW
    description: "Selects the priority type for maintaining the automatic memory cache\
      \ used by the libdpd codes. A value of LOW selects a \u201Clow priority\u201D\
      \ scheme in which the deletion of items from the cache is based on pre-programmed\
      \ priorities. A value of LRU selects a \u201Cleast recently used\u201D scheme\
      \ in which the oldest item in the cache will be the first one deleted."
    optional: LOW, LRU
    type: string
  CC_NUM_THREADS:
    default: '1'
    description: Number of threads
    type: integer
  CC_OS_SCALE:
    default: '1.27'
    description: Coupled-cluster opposite-spin scaling value
    type: double
  CC_SS_SCALE:
    default: '1.13'
    description: Coupled-cluster same-spin scaling value
    type: double
  DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate convergence?
    type: boolean
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  FORCE_RESTART:
    default: 'false'
    description: Do restart the coupled-cluster iterations even if MO phases are screwed
      up?
    type: boolean
  LOCAL:
    default: 'false'
    description: Do simulate the effects of local correlation techniques?
    type: boolean
  LOCAL_CPHF_CUTOFF:
    default: '0.10'
    description: Cutoff value for local-coupled-perturbed-Hartree-Fock
    type: double
  LOCAL_CUTOFF:
    default: '0.02'
    description: Value (always between one and zero) for the Broughton-Pulay completeness
      check used to contruct orbital domains for local-CC calculations. See J. Broughton
      and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner,
      J. Chem. Phys. 104, 6286-6297 (1996).
    type: double
  LOCAL_METHOD:
    default: WERNER
    description: Type of local-CCSD scheme to be simulated. WERNER selects the method
      developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed
      by G.E. Scuseria and co-workers (currently inoperative).
    optional: WERNER, AOBASIS
    type: string
  LOCAL_PAIRDEF:
    default: BP
    description: Definition of local pair domains, default is BP, Boughton-Pulay.
    optional: BP, RESPONSE
    type: string
  LOCAL_WEAKP:
    default: NONE
    description: "Desired treatment of \u201Cweak pairs\u201D in the local-CCSD method.\
      \ A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak\
      \ pairs in the same manner as strong pairs. A value of MP2 uses second-order\
      \ perturbation theory to correct the local-CCSD energy computed with weak pairs\
      \ ignored."
    optional: NONE, NEGLECT, MP2
    type: string
  MAXITER:
    default: '50'
    description: Maximum number of iterations to solve the CC equations
    type: integer
  MP2_AMPS_PRINT:
    default: 'false'
    description: Do print the MP2 amplitudes which are the starting guesses for RHF
      and UHF reference functions?
    type: boolean
  MP2_OS_SCALE:
    default: '1.20'
    description: MP2 opposite-spin scaling value
    type: double
  MP2_SS_SCALE:
    default: '1.0'
    description: MP2 same-spin scaling value
    type: double
  NEW_TRIPLES:
    default: 'true'
    description: Do use new triples?
    type: boolean
  NUM_AMPS_PRINT:
    default: '10'
    description: Number of important  and  amplitudes to print
    type: integer
  PAIR_ENERGIES_PRINT:
    default: 'false'
    description: Do print MP2 and CCSD pair energies for RHF references?
    type: boolean
  PROPERTY:
    default: POLARIZABILITY
    description: The response property desired. Acceptable values are POLARIZABILITY
      (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA
      for Raman Optical Activity, and ALL for all of the above.
    optional: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL
    type: string
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    optional: RHF, ROHF, UHF
    type: string
  RESTART:
    default: 'true'
    description: Do restart the coupled-cluster iterations from old
    type: boolean
  R_CONVERGENCE:
    default: 1e-7
    description: Convergence criterion for wavefunction (change) in CC amplitude equations.
    type: double
  SCSN_MP2:
    default: 'false'
    description: Do SCS-MP2 with parameters optimized for nucleic acids?
    type: boolean
  SCS_CCSD:
    default: 'false'
    description: Do spin-component-scaled CCSD
    type: boolean
  SCS_MP2:
    default: 'false'
    description: Do spin-component-scaled MP2 (SCS-MP2)?
    type: boolean
  SEMICANONICAL:
    default: 'true'
    description: Convert ROHF MOs to semicanonical MOs
    type: boolean
  T2_COUPLED:
    default: 'false'
    description: ''
    type: boolean
  T3_WS_INCORE:
    default: 'false'
    description: Do build W intermediates required for cc3 in core memory?
    type: boolean
  WFN:
    default: NONE
    description: Wavefunction type
    type: string
CCEOM:
  ABCD:
    default: NEW
    description: Type of ABCD algorithm will be used
    optional: NEW, OLD
    type: string
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd governing the storage of amplitudes, integrals,
      and intermediates in the CC procedure. A value of 0 retains no quantities in
      cache, while a level of 6 attempts to store all quantities in cache. For particularly
      large calculations, a value of 0 may help with certain types of memory problems.
      The default is 2, which means that all four-index quantities with up to two
      virtual-orbital indices (e.g.,
    type: integer
  CACHETYPE:
    default: LRU
    description: The criterion used to retain/release cached data
    optional: LOW, LRU
    type: string
  CC3_FOLLOW_ROOT:
    default: 'false'
    description: Do turn on root following for CC3
    type: boolean
  CC_NUM_THREADS:
    default: '1'
    description: Number of threads
    type: integer
  COLLAPSE_WITH_LAST:
    default: 'true'
    description: When collapsing Davidson subspace, whether to also include the previous
      approximate solution (for each root)? This doubles the number of resulting vectors
      but generally improves convergence.
    type: boolean
  COLLAPSE_WITH_LAST_CC3:
    default: 'false'
    description: "Has the same effect as \u201CCOLLAPSE_WITH_LAST\u201D but only in\
      \ CC3 computations and after the initial solution of EOM CCSD. May help efficiency,\
      \ but hazardous when solving for higher roots."
    type: boolean
  COMPLEX_TOLERANCE:
    default: 1e-12
    description: Complex tolerance applied in CCEOM computations
    type: double
  EOM_GUESS:
    default: SINGLES
    description: Specifies a set of single-excitation guess vectors for the EOM-CC
      procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles
      block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK,
      guess vectors from a previous computation will be read from disk. If EOM_GUESS
      = INPUT, guess vectors will be specified in user input. The latter method is
      not currently available.
    optional: SINGLES, DISK, INPUT
    type: string
  EOM_REFERENCE:
    default: RHF
    description: Reference wavefunction type for EOM computations
    optional: RHF, ROHF, UHF
    type: string
  EXCITATION_RANGE:
    default: '2'
    description: The depth into the occupied and valence spaces from which one-electron
      excitations are seeded into the Davidson guess to the CIS (the default of 2
      includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This
      CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic
      excited states in the EOM-CC calculation
    type: integer
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for excitation energy (change) in the Davidson
      algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence
      criteria for different calculation types.
    type: double
  FULL_MATRIX:
    default: 'false'
    description: Do use full effective Hamiltonian matrix?
    type: boolean
  LOCAL:
    default: 'false'
    description: Do simulate the effects of local correlation techniques?
    type: boolean
  LOCAL_CUTOFF:
    default: '0.02'
    description: Value (always between one and zero) for the Broughton-Pulay completeness
      check used to contruct orbital domains for local-CC calculations. See J. Broughton
      and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner,
      J. Chem. Phys. 104, 6286-6297 (1996).
    type: double
  LOCAL_DO_SINGLES:
    default: 'true'
    description: ''
    type: boolean
  LOCAL_FILTER_SINGLES:
    default: 'true'
    description: Do apply local filtering to singles amplitudes?
    type: boolean
  LOCAL_METHOD:
    default: WERNER
    description: Type of local-CCSD scheme to be simulated. WERNER selects the method
      developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed
      by G.E. Scuseria and co-workers (currently inoperative).
    optional: WERNER, AOBASIS
    type: string
  LOCAL_PRECONDITIONER:
    default: HBAR
    description: Preconditioner will be used in local CC computations
    optional: HBAR, FOCK
    type: string
  LOCAL_WEAKP:
    default: NONE
    description: "Desired treatment of \u201Cweak pairs\u201D in the local-CCSD method.\
      \ A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak\
      \ pairs in the same manner as strong pairs. A value of MP2 uses second-order\
      \ perturbation theory to correct the local-CCSD energy computed with weak pairs\
      \ ignored."
    optional: NONE, MP2, NEGLECT
    type: string
  MAXITER:
    default: '80'
    description: Maximum number of iterations
    type: integer
  NEW_TRIPLES:
    default: 'true'
    description: Do use new triples?
    type: boolean
  NUM_AMPS_PRINT:
    default: '5'
    description: Number of important CC amplitudes to print
    type: integer
  OVERLAP_CHECK:
    default: 'false'
    description: Report overlaps with old excited-state wave functions, if available,
      and store current wave functions for later use.
    type: boolean
  PROP_ROOT:
    default: '0'
    description: Root number (within its irrep) for computing properties. Defaults
      to highest root requested.
    type: integer
  PROP_SYM:
    default: '1'
    description: Symmetry of the state to compute properties. Defaults to last irrep
      for which states are requested.
    type: integer
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    optional: RHF, ROHF, UHF
    type: string
  RESTART_EOM_CC3:
    default: 'false'
    description: Do restart from on-disk?
    type: boolean
  RHF_TRIPLETS:
    default: 'false'
    description: Do form a triplet state from RHF reference?
    type: boolean
  ROOTS_PER_IRREP:
    default: Default
    description: Number of excited states per irreducible representation for EOM-CC
      and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry
      of the transition.
    type: array
  R_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for norm of the residual vector in the Davidson
      algorithm for CC-EOM.
    type: double
  SCHMIDT_ADD_RESIDUAL_TOLERANCE:
    default: 1e-3
    description: Minimum absolute value above which a guess vector to a root is added
      to the Davidson algorithm in the EOM-CC iterative procedure.
    type: double
  SEMICANONICAL:
    default: 'true'
    description: Convert ROHF MOs to semicanonical MOs
    type: boolean
  SINGLES_PRINT:
    default: 'false'
    description: Do print information on the iterative solution to the single-excitation
      EOM-CC problem used as a guess to full EOM-CC?
    type: boolean
  SS_E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for excitation energy (change) in the Davidson
      algorithm for the CIS guess to CC-EOM.
    type: double
  SS_R_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for norm of the residual vector in the Davidson
      algorithm for the CIS guess to CC-EOM.
    type: double
  SS_SKIP_DIAG:
    default: 'false'
    description: Do skip diagonalization of Hbar SS block?
    type: boolean
  SS_VECS_PER_ROOT:
    default: '5'
    description: SS vectors stored per root
    type: integer
  T3_WS_INCORE:
    default: 'false'
    description: Do build W intermediates required for eom_cc3 in core memory?
    type: boolean
  VECS_CC3:
    default: '10'
    description: Vectors stored in CC3 computations
    type: integer
  VECS_PER_ROOT:
    default: '12'
    description: Vectors stored per root
    type: integer
  WFN:
    default: EOM_CCSD
    description: Wavefunction type
    optional: EOM_CCSD, EOM_CC2, EOM_CC3
    type: string
CCHBAR:
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd governing the storage of amplitudes, integrals,
      and intermediates in the CC procedure. A value of 0 retains no quantities in
      cache, while a level of 6 attempts to store all quantities in cache. For particularly
      large calculations, a value of 0 may help with certain types of memory problems.
      The default is 2, which means that all four-index quantities with up to two
      virtual-orbital indices (e.g.,
    type: integer
  EOM_REFERENCE:
    default: RHF
    description: Reference wavefunction type for EOM computations
    type: string
  T_AMPS:
    default: 'false'
    description: Do compute the T amplitude equation matrix elements?
    type: boolean
  WABEI_LOWDISK:
    default: 'false'
    description: "Do use the minimal-disk algorithm for Wabei? It\u2019s VERY slow!"
    type: boolean
  WFN:
    default: SCF
    description: Wavefunction type
    type: string
CCLAMBDA:
  ABCD:
    default: NEW
    description: Type of ABCD algorithm will be used
    type: string
  AO_BASIS:
    default: NONE
    description: The algorithm to use for the
    optional: NONE, DISK, DIRECT
    type: string
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd governing the storage of amplitudes, integrals,
      and intermediates in the CC procedure. A value of 0 retains no quantities in
      cache, while a level of 6 attempts to store all quantities in cache. For particularly
      large calculations, a value of 0 may help with certain types of memory problems.
      The default is 2, which means that all four-index quantities with up to two
      virtual-orbital indices (e.g.,
    type: integer
  DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate convergence?
    type: boolean
  JOBTYPE:
    default: Default
    description: Type of job being performed
    type: string
  LOCAL:
    default: 'false'
    description: Do simulate the effects of local correlation techniques?
    type: boolean
  LOCAL_CPHF_CUTOFF:
    default: '0.10'
    description: Cutoff value for local-coupled-perturbed-Hartree-Fock
    type: double
  LOCAL_CUTOFF:
    default: '0.02'
    description: Value (always between one and zero) for the Broughton-Pulay completeness
      check used to contruct orbital domains for local-CC calculations. See J. Broughton
      and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner,
      J. Chem. Phys. 104, 6286-6297 (1996).
    type: double
  LOCAL_FILTER_SINGLES:
    default: 'true'
    description: Do apply local filtering to single de-excitation (
    type: boolean
  LOCAL_METHOD:
    default: WERNER
    description: Type of local-CCSD scheme to be simulated. WERNER (unique available
      option) selects the method developed by H.-J. Werner and co-workers.
    type: string
  LOCAL_PAIRDEF:
    default: Default
    description: Definition of local pair domains
    type: string
  LOCAL_WEAKP:
    default: NONE
    description: "Desired treatment of \u201Cweak pairs\u201D in the local-CCSD method.\
      \ The value of NONE (unique available option) treats weak pairs in the same\
      \ manner as strong pairs."
    type: string
  MAXITER:
    default: '50'
    description: Maximum number of iterations
    type: integer
  NUM_AMPS_PRINT:
    default: '10'
    description: Number of important CC amplitudes per excitation level to print.
      CC analog to NUM_DETS_PRINT.
    type: integer
  PROP_ALL:
    default: 'true'
    description: Compute unrelaxed properties for all excited states.
    type: boolean
  PROP_ROOT:
    default: '1'
    description: Root number (within its irrep) for computing properties
    type: integer
  PROP_SYM:
    default: '1'
    description: The symmetry of states
    type: integer
  RESTART:
    default: 'false'
    description: Do restart the coupled-cluster iterations from old
    type: boolean
  ROOTS_PER_IRREP:
    default: Default
    description: The number of electronic states to computed, per irreducible representation
    type: array
  R_CONVERGENCE:
    default: 1e-7
    description: Convergence criterion for wavefunction (change) in CC lambda-amplitude
      equations.
    type: double
  SEKINO:
    default: 'false'
    description: Do Sekino-Bartlett size-extensive model-III?
    type: boolean
  WFN:
    default: SCF
    description: Wavefunction type
    type: string
  ZETA:
    default: 'false'
    description: Do use zeta?
    type: boolean
CCRESPONSE:
  ABCD:
    default: NEW
    description: Type of ABCD algorithm will be used
    type: string
  ANALYZE:
    default: 'false'
    description: Do analyze X2 amplitudes
    type: boolean
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd
    type: integer
  DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate convergence?
    type: boolean
  GAUGE:
    default: VELOCITY
    description: Specifies the choice of representation of the electric dipole operator.
      For polarizability, this keyword is ignored and LENGTH gauge is computed. For
      optical rotation and raman optical activity, this keyword is active, and acceptable
      values are LENGTH for the usual length-gauge representation, VELOCITY``(default)
      for the modified velocity-gauge representation in which the static-limit optical
      rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH.
      Note that, for optical rotation and raman optical activity calculations, only
      the choices of VELOCITY or BOTH will yield origin-independent results.
    optional: LENGTH, VELOCITY, BOTH
    type: string
  LINEAR:
    default: 'false'
    description: Do Bartlett size-extensive linear model?
    type: boolean
  LOCAL:
    default: 'false'
    description: Do simulate local correlation?
    type: boolean
  LOCAL_CPHF_CUTOFF:
    default: '0.10'
    description: Cutoff value for local-coupled-perturbed-Hartree-Fock
    type: double
  LOCAL_CUTOFF:
    default: '0.01'
    description: Value (always between one and zero) for the Broughton-Pulay completeness
      check used to contruct orbital domains for local-CC calculations. See J. Broughton
      and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner,
      J. Chem. Phys. 104, 6286-6297 (1996).
    type: double
  LOCAL_FILTER_SINGLES:
    default: 'false'
    description: Do apply local filtering to single excitation amplitudes?
    type: boolean
  LOCAL_METHOD:
    default: WERNER
    description: Type of local-CCSD scheme to be simulated. WERNER (unique available
      option) selects the method developed by H.-J. Werner and co-workers.
    type: string
  LOCAL_PAIRDEF:
    default: NONE
    description: Definition of local pair domains
    type: string
  LOCAL_WEAKP:
    default: NONE
    description: "Desired treatment of \u201Cweak pairs\u201D in the local-CCSD method.\
      \ The value of NONE (unique available option) treats weak pairs in the same\
      \ manner as strong pairs."
    type: string
  MAXITER:
    default: '50'
    description: Maximum number of iterations to converge perturbed amplitude equations
    type: integer
  NUM_AMPS_PRINT:
    default: '5'
    description: Number of important CC amplitudes per excitation level to print.
      CC analog to NUM_DETS_PRINT.
    type: integer
  OMEGA:
    default: Default
    description: Array that specifies the desired frequencies of the incident radiation
      field in CCLR calculations. If only one element is given, the units will be
      assumed to be atomic units. If more than one element is given, then the units
      must be specified as the final element of the array. Acceptable units are HZ,
      NM, EV, and AU.
    type: array
  PROPERTY:
    default: POLARIZABILITY
    description: The response property desired. Acceptable values are POLARIZABILITY
      (default) for dipole polarizabilities, ROTATION for specific rotations, ROA
      for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all
      of the above.
    optional: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL
    type: string
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    type: string
  RESTART:
    default: 'true'
    description: Do restart from on-disk amplitudes?
    type: boolean
  R_CONVERGENCE:
    default: 1e-7
    description: Convergence criterion for wavefunction (change) in perturbed CC equations.
    type: double
  SEKINO:
    default: 'false'
    description: Do Sekino-Bartlett size-extensive model-III?
    type: boolean
  WFN:
    default: SCF
    description: Wavefunction type
    type: string
CCTRANSORT:
  AO_BASIS:
    default: NONE
    description: The algorithm to use for the
    optional: NONE, DISK, DIRECT
    type: string
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd
    type: integer
  DELETE_TEI:
    default: 'true'
    description: Delete the SO two-electron integrals after the transformation?
    type: boolean
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    type: string
  RUN_CCTRANSORT:
    default: 'true'
    description: 'Use cctransort module NOTE: Turning this option off requires separate
      installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture'
    type: boolean
  SEMICANONICAL:
    default: 'false'
    description: Force conversion of ROHF MOs to semicanonical MOs to run UHF-based
      energies
    type: boolean
  WFN:
    default: Default
    description: Wavefunction type
    type: string
CCTRIPLES:
  CC_NUM_THREADS:
    default: '1'
    description: Number of threads
    type: integer
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    type: string
  SEMICANONICAL:
    default: 'true'
    description: Convert ROHF MOs to semicanonical MOs
    type: boolean
  WFN:
    default: SCF
    description: Wavefunction type
    type: string
CFOUR:
  CFOUR_ABCDTYPE:
    default: STANDARD
    description: Specifies the way the
    optional: STANDARD, AOBASIS
    type: string
  CFOUR_ACTIVE_ORBI:
    default: Default
    description: Specifies the active orbitals used in a TCSCF calculation and has
      to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals
      are specified by either NIRREP or 2*NIRREP integers specifying the number of
      active orbitals of each symmetry type, where NIRREP is the number of irreducible
      representations in the computational point group. If there are no orbitals of
      a particular symmetry type a zero must be entered. For more information and
      an example see CFOUR_OCCUPATION .
    type: array
  CFOUR_ANHARMONIC:
    default: 'OFF'
    description: Specifies treatment of anharmonic effects by calculating cubic and/or
      quartic force fields. VIBROT (=3) requests calculation of only those cubic constants
      of the form
    optional: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF
    type: string
  CFOUR_ANH_ALGORITHM:
    default: STANDARD
    description: "Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT,\
      \ VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply\
      \ invoking xcfour will cause a complete job to be run with all second-derivative\
      \ calculations being done in series. If PARALLEL (=1), then the job stops after\
      \ the second-derivative calculation at the reference geometry and generates\
      \ out all input geometries for the remaining calculation. These can be then\
      \ processed in \u201Cparallel\u201D (currently not recommended). Note that it\
      \ is recommended to carry out all calculations with PARALLEL, even when the\
      \ actual calculation is carried out in a sequential mode."
    optional: STANDARD, PARALLEL
    type: string
  CFOUR_ANH_DERIVATIVES:
    default: SECOND
    description: Specifies whether the anharmonic force field is calculated using
      analytic gradients (=FIRST) or analytic Hessians (=SECOND).
    optional: FIRST, SECOND
    type: string
  CFOUR_ANH_STEPSIZE:
    default: '50000'
    description: Controls the stepsize used in anharmonic force field calculations.
      The value is specified in reduced normal coordinates, which are dimensionless.
      The actual stepsize used in the calculation is
    type: integer
  CFOUR_ANH_SYMMETRY:
    default: ABELIAN
    description: 'Specifies whether non-abelian symmetry is to be exploited in determining
      displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN
      (=0), maximum advantage will be taken of symmetry and the full set of cubic
      force constants will be generated from a skeleton set by application of the
      totally symmetric projection operator. If set to ABELIAN (=1), only the operations
      of the abelian subgroup will be exploited. Note: It is important to point out
      that the symmetrization currently works only for cubic constants. Therefore,
      if you require quartic force constants (for frequency calculations), you must
      use the ABELIAN option. Moreover, the latter work for only asymmetric tops and
      linear molecules.'
    optional: ABELIAN, NONABELIAN
    type: string
  CFOUR_AO_LADDERS:
    default: SINGLEPASS
    description: Can be used to control the algorithm used by CFOUR when terms involving
    optional: MULTIPASS, SINGLEPASS
    type: string
  CFOUR_AV_SCF:
    default: 'false'
    description: Experimental Use! ON (=1) requests and averaged SCF over two states.
      So far only implemented for degenerate doublet-Pi states and used in conjunction
      with SOPERT.
    type: boolean
  CFOUR_BASIS:
    default: SPECIAL
    description: 'Specifies the AO basis used in the calculation. One can either specify
      a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis
      (see non-standard basis-set input). However, the latter must be available in
      the supplied GENBAS file. As standard basis sets, currently the following are
      available. Psi4 Interface: Recommended to use instead BASIS for larger basis
      set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set
      appropriately.'
    type: string
  CFOUR_BRUCK_CONV:
    default: '4'
    description: experimental use
    type: integer
  CFOUR_BRUECKNER:
    default: 'false'
    description: Specifies whether Brueckner orbitals are to be determined for the
      specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON
      (=1) they are to be determined.
    type: boolean
  CFOUR_CACHE_RECS:
    default: '10'
    description: The number of records held in the i/o cache used by the post-SCF
      programs. The maximum number of records which can be held is 100.
    type: integer
  CFOUR_CALC_LEVEL:
    default: SCF
    description: 'Defines the level of calculation to be performed. Psi4 Interface:
      Keyword set from argument of computation command: CCSD if energy(''c4-ccsd''),
      etc. See Energy (CFOUR) and Gradient (CFOUR). for all available.'
    type: string
  CFOUR_CC_CONV:
    default: '7'
    description: Specifies the convergence criterion for the CC amplitude equations.
      The amplitudes are considered to be converged when the maximum of all (absolute)
      changes in the amplitudes is less than
    type: integer
  CFOUR_CC_EXPORDER:
    default: '5'
    description: Specifies the maximum number of expansion vectors used in the iterative
      subspace to enhance convergence in the solution of the CC equations.
    type: integer
  CFOUR_CC_EXTRAPOLATION:
    default: DIIS
    description: Specifies the type of convergence acceleration used to solve the
      CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1)
      uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation,
      OFF (=3) uses no convergence acceleration. In general, DIIS provides the best
      results and is recommended, while OFF often results in poor convergence and
      thus cannot be recommended.
    optional: RLE, DIIS, NOJACOBI, OFF
    type: string
  CFOUR_CC_MAXCYC:
    default: '50'
    description: Specifies the maximum number of iterations in solving the CC amplitude
      equations.
    type: integer
  CFOUR_CC_PROGRAM:
    default: VCC
    description: 'Specifies which CC program is used. The available options are VCC
      (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations
      is currently VCC which requests usage of xvcc, but in many cases (e.g., for
      CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc
      (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3,
      and CCSDT). MRCC and External are intended for CC programs outside the CFOUR
      suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary).
      Default: VCC Note: Using the option ECC is not recommended for ROHF gradients.
      That is, if you are doing a geometry optimization with ROHF as your reference
      wave function then it is safe to use the option VCC. Psi4 Interface: Keyword
      set according to best practice for the computational method CFOUR_CALC_LEVEL,
      reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according
      to Table Best Practices when method specified by argument to computation command
      (e.g., when energy(''c4-ccsd'') requested but not when energy(''cfour'') requested).
      Value can always be set explicitly.'
    optional: VCC, ECC, NCC, MRCC, EXTERNAL
    type: string
  CFOUR_CHARGE:
    default: '0'
    description: 'Specifies the molecular charge. Psi4 Interface: Keyword set from
      active molecule.'
    type: integer
  CFOUR_CIS_CONV:
    default: '5'
    description: Specifies the convergence threshold as
    type: integer
  CFOUR_CONTINUUM:
    default: NONE
    description: "Signifies that one or more \u201Ccontinuum\u201D orbitals should\
      \ be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital\
      \ which should be initially unoccupied (in the SCF calculation), while OCCUPIED\
      \ and DOCCUPIED specify one or two orbitals which should be initially occupied."
    optional: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED
    type: string
  CFOUR_CONTRACTION:
    default: GENERAL
    description: Specifies the contraction scheme used by the integral and integral
      derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL
      (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding
      uncontracted sets. Note that even for truly segmented basis sets, the integral
      programs run significantly faster in the GENERAL mode.
    optional: SEGMENTED, GENERAL, UNCONTRACTED
    type: string
  CFOUR_CONVERGENCE:
    default: '4'
    description: Identical to CFOUR_GEO_CONV.
    type: integer
  CFOUR_COORDINATES:
    default: INTERNAL
    description: 'Specifies the type of coordinates used in the input file ZMAT. Value
      INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format,
      while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates.
      A third option is XYZINT (=2) for which a Z-matrix connectivity is defined,
      but with values of the internal coordinates defined implicitly by supplying
      Cartesian coordinates. Note that geometry optimizations are currently only possible
      for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule,
      always CARTESIAN. Above restrictions on geometry optimizations no longer apply.'
    optional: INTERNAL, CARTESIAN, XYZINT
    type: string
  CFOUR_CORE_ORBITALS:
    default: Default
    description: Specifies the core orbitals used in a TCSCF calculation and has to
      be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals
      are specified by either NIRREP or 2*NIRREP integers specifying the number of
      core orbitals of each symmetry type, where NIRREP is the number of irreducible
      representations in the computational point group. If there are no orbitals of
      a particular symmetry type a zero must be entered. For more information and
      an example see CFOUR_OCCUPATION.
    type: array
  CFOUR_CPHF_CONVER:
    default: '12'
    description: Specifies the convergence criterion for the iterative solution of
      the CPHF and Z-vector equations. The solutions are considered to be converged
      when the residual norm of the error vector falls below
    type: integer
  CFOUR_CPHF_MAXCYC:
    default: '64'
    description: Specifies the maximum number of cycles allowed for the solution of
      the CPHF- and/or Z-vector equations.
    type: integer
  CFOUR_CURVILINEAR:
    default: 'true'
    description: 'Specifies whether or not Hessian matrix is transformed (nonlinearly)
      to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation
      off if the analytic force constants are not available, while it is always performed
      if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn
      the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise).'
    type: boolean
  CFOUR_DBOC:
    default: 'false'
    description: Specifies whether the diagonal Born-Oppenheimer correction (DBOC)
      to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently
      only available for HF-SCF and CCSD using RHF or UHF reference functions.
    type: boolean
  CFOUR_DCT:
    default: 'false'
    description: Specifies whether the Dipole Coupling Tensor (DCT) is calculated
      (ON =1) or not (OFF =0).
    type: boolean
  CFOUR_DERIV_LEVEL:
    default: ZERO
    description: 'Specifies whether or not energy derivatives are to be calculated
      and if so whether first or second derivatives are computed. ZERO (= 0) derivatives
      are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2)
      second derivatives are calculated. Note that this keyword usually needs not
      be set in any calculation since it is automatically set if the appropriate other
      options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from
      type of computation command: ZERO if energy(), FIRST if gradient() or optimize(),
      etc.'
    optional: ZERO, FIRST, SECOND
    type: string
  CFOUR_DIFF_TYPE:
    default: RELAXED
    description: Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed
      (UNRELAXED =1) derivatives are computed in the CC calculation.
    optional: RELAXED, UNRELAXED
    type: string
  CFOUR_DROPMO:
    default: Default
    description: 'Specifies which molecular orbitals will be dropped from the post-SCF
      calculation. The orbitals are numbered in ascending order from the most stable
      (negative energy) to the most unstable (largest positive energy). Individual
      orbitals must be separated with a dash, while x>y means orbitals x through y
      inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63
      and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted
      for both spin cases. No dropped virtual MOs are currently allowed for gradient
      or property calculations. Psi4 Interface: The array above is specified in PSI
      as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64].'
    type: array
  CFOUR_ECP:
    default: 'false'
    description: Specifies whether effective core potentials (pseudopotentials) are
      used (ON, =1) or not (OFF, =0).
    type: boolean
  CFOUR_EIGENVECTOR:
    default: '1'
    description: "Specifies which eigenvector of the totally symmetric part of the\
      \ block-factored Hessian is to be followed uphill in a transition state search.\
      \ Eigenvectors are indexed by their eigenvalues \u2013 the lowest eigenvalue\
      \ is 1, the next lowest is 2, etc. The default is 1, which should always be\
      \ used if you are not looking for a specific transition state which you know\
      \ corresponds to motion along a different mode. In the future, relatively sophisticated\
      \ generation of a guessed eigenvector will be implemented, but this is the way\
      \ things are for now. Of course, this keyword has no meaning if CFOUR_METHOD\
      \ is not set to TS."
    type: integer
  CFOUR_EL_ANHARM:
    default: 'false'
    description: Experimental use, ON = 1 requests the evaluation of electrical anharmonicities
    type: boolean
  CFOUR_EOM_NONIT:
    default: 'false'
    description: "Controls whether non-iterative triples corrections are applied after\
      \ various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP,\
      \ might work with EOMEE, certainly doesn\u2019t work with EOMEA. Use with great\
      \ caution, preferably after having a few drinks."
    type: boolean
  CFOUR_ESTATE_CONV:
    default: '5'
    description: Specifies the threshold used in converging CC-LR/EOM-CC calculations.
      The iterative diagonalization is continued until the RMS residual falls below
    type: integer
  CFOUR_ESTATE_MAXCYC:
    default: '20'
    description: 'The maximum number of expansion vectors used in the solution of
      EOMCC equations (Default: 20, hard-coded to 4 in triples calculations)'
    type: integer
  CFOUR_ESTATE_PROP:
    default: Default
    description: 'This keyword applies only to EOM-CC calculations and specifies whether
      any excited or ionized state one-electron properties are to be calculated. Proper
      use of this keyword requires a relatively advanced knowledge of quantum chemistry
      and the available options are discussed here. The options are: OFF (=0) [no
      properties or transition moments are calculated]; EXPECTATION (=1) [transition
      moments and dipole strengths are calculated along with selected one-electron
      properties which are evaluated as expectation values]; UNRELAXED (=2) [selected
      one-electron properties are calculated in an approximation that neglects relaxation
      of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are
      calculated as analytic first derivatives of the energy]. Except for EOMCC calculations
      on two-electron systems (which are exact), properties obtained by the three
      approaches will not be equivalent. The default value for this keyword is slightly
      complicated. For TDA calculations, the default is EXPECTATION since the evaluation
      of transition moments involves only a negligible amount of additional computation
      relative to the evaluation of the excitation energies. For EOMCC, the default
      is OFF since evaluation of any transition moments or properties requires approximately
      twice the computational time. Transition moments and dipole strengths are evaluated
      by default for all values of ESTATE_PROP other than OFF.'
    optional: OFF, EXPECTATION, UNRELAXED, RESPONSE
    type: string
  CFOUR_ESTATE_SYM:
    default: Default
    description: 'Specifies the number of excited states which are to be determined
      in each irreducible representation of the computational subgroup. The program
      attempts to find all of the lowest roots, but this is not guaranteed because
      the eigenvalue problem is not solved by direct matrix diagonalization, but rather
      by an iterative (modified Davidson) algorithm. For excited state gradient calculations,
      only one root (clearly) is used. In such a case, one and only one non-zero entry
      in the string can be used, and this value is usually set to one (i.e. 0/1/0/0).
      (However sometimes one wants to calculate the gradient for, say, the second
      root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens
      is that both roots are calculated, but only the second one is used in the subsequent
      density matrix and gradient calculation.) The format used for this keyword is
      identical to that used in CFOUR_OCCUPATION. For example, for a computational
      subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total
      roots should be searched for, three in the first block, one in the second block,
      and two in the fourth block. It is also important to note that the %excite*
      input, if present, takes precedence over this keyword. Default: All zeros. Psi4
      Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2].'
    type: array
  CFOUR_ESTATE_TRANS:
    default: 'OFF'
    description: Specifies whether just the excitation energies (OFF, =0) or in addition
      transition moments (EXPECTATION, =1) are calculated. Note that this keyword
      should not be used in excited-state calculations involving analytic gradients
      and that transition moments are essentially only available for EOM-CCSD/CCSD-LR.
    optional: OFF, EXPECTATION
    type: string
  CFOUR_EVAL_HESS:
    default: '0'
    description: "Tells the program, in the course of a geometry optimization, to\
      \ calculate the Hessian explicitly every N cycles. 0 means never calculated\
      \ explicitly. Psi4 Interface: Geometry optimizations run through PSI (except\
      \ in sandwich mode) use PSI\u2019s optimizer and so this keyword has no effect.\
      \ Use optking keywords instead, particularly FULL_HESS_EVERY."
    type: integer
  CFOUR_EXCITATION:
    default: '0'
    description: Specifies in CC calculations using mrcc the excitation level if the
      calculation level has been chosen as CC(n), CI(n), or CCn(n).
    type: integer
  CFOUR_EXCITE:
    default: NONE
    description: Specifies the type of EOM-CC/LR-CC treatment to be performed. Available
      options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment
      of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of
      ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached
      states).
    optional: NONE, EOMEE, EOMIP, EOMEA
    type: string
  CFOUR_FC_FIELD:
    default: '0'
    description: Specifies the strength of a Fermi-Contact perturbation as required
      for finite-field calculations of spin densities and the FC contributions to
      indirect spin-spin coupling constants. The value must be specified as an integer
      and the FC strength used by the program will be the value of the keyword
    type: integer
  CFOUR_FD_CALCTYPE:
    default: GRADONLY
    description: Specifies the algorithm used to compute the harmonic force constants
      in finite-difference calculations.GRADONLY (=0) evaluates the force constants
      and dipole moment derivatives by numerical differentiation of analytic gradients;
      ENERONLY (=1) evaluates the force constants by second differences of energies
      (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1
      blocks of symmetry-blocked force constants by second differences pf energies
      and all other elements by first differences of gradients. the GRADONLY and MIXED
      approaches may, of course, only be used hwen using computational methods for
      which analytic gradients are available.
    optional: GRADONLY, ENERONLY, MIXED
    type: string
  CFOUR_FD_IRREPS:
    default: Default
    description: 'Requests that only vibrational frequencies of certain symmetry types
      are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible
      representations for which vibrational analysis is to be performed are separated
      by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes
      transforming as the first, third, and fourth irreducible representations. If
      a symmetry is specified for which there are no vibrational modes, the program
      will terminate. The labels of the irreducible representations for this keyword
      are not usually the same as those used in the rest of the calculation. Moreover,
      for some point groups, for example, those of linear molecules, the two sets
      of labels refer to different subgroups. There is as yet no straightforward way
      to determine what they will be without starting a calculation. If one runs the
      xjoda and then the xsymcor executables, the relevant irreducible representations
      will be listed. If all vibrational frequencies are desired, this keyword need
      not be included. Default : compute vibrational frequencies for all irreducible
      representations'
    type: array
  CFOUR_FD_PROJECT:
    default: 'ON'
    description: Specifies whether or not rotational degrees of freedoms are projected
      out from the symmetry-adapted coordinates in a finite difference calculations.
      ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the
      rotational degrees of freedom. At a stationary point on the potential energy
      surface, both options will give equivalent harmonic force fields, but OFF should
      be used at non-stationary points.
    optional: ON, OFF
    type: string
  CFOUR_FD_STEPSIZE:
    default: '5'
    description: Specifies the step length in mass-weighted coordinates (in
    type: integer
  CFOUR_FD_USEGROUP:
    default: FULL
    description: In finite difference calculations using the FINDIF option, this keyword
      specifies the point group to be used in generating the symmetry-adapted vibrational
      coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1)
      specifies the Abelian subgroup used in the electronic structure calculation.
    optional: FULL, COMP
    type: string
  CFOUR_FILE_RECSIZ:
    default: '2048'
    description: This specifies the physical length (in integer words) of the records
      used in the word-addressable direct access files used by CFOUR. This value should
      always be chosen as a multiple of 512 bytes, as your local system manager certainly
      understands.
    type: integer
  CFOUR_FILE_STRIPE:
    default: 0/0/0/0/0
    description: This option allows the splitting of files. Input is required in the
      form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files
      in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively.
    type: string
  CFOUR_FINITE_PERTURBATION:
    default: '0'
    description: Specifies the field strength for a perturbation (defined within a
      %perturbation section). The value must be given as an integer, and the field
      strength used by the program will be then the value of the keyword
    type: integer
  CFOUR_FOCK:
    default: Default
    description: 'This option is used to control the algorithm used for construction
      of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach
      while AO (=1) constructs the matrix directly from the basis function integrals.
      In general, PK is somewhat faster, but results in considerable use of disk space
      when out-of-core algorithms are required. (Default: FOCK).'
    optional: PK, AO
    type: string
  CFOUR_FREQ_ALGORITHM:
    default: STANDARD
    description: FREQ_ALGORIT experimental use
    optional: STANDARD, PARALLEL
    type: string
  CFOUR_FROZEN_CORE:
    default: 'false'
    description: Specifies whether in the correlation treatment all electron (OFF
      =0) or only the valence electrons (ON =1) are considered. This keyword provides
      an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation
      without explicitly specifying the corresponding inner-shell orbitals.
    type: boolean
  CFOUR_FROZEN_VIRT:
    default: 'false'
    description: Specifies whether in the correlation treatment all virtual orbitals
      (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter
      case, the threshold for deleting virtual orbitals based on the orbital energy
      needs to be specified in a %frozen_virt section.
    type: boolean
  CFOUR_GAMMA_ABCD:
    default: DISK
    description: Used to control the handling and storage of two-particle density
      matrix elements with four virtual indices
    optional: DISK, DIRECT
    type: string
  CFOUR_GENBAS_1:
    default: Default
    description: 'This keyword applies only to Hydrogen and Helium atoms and specifies
      the number of contracted Gaussian functions per shell. There is usually no need
      to use this keyword, but it can be useful for using a subset of the functions
      in a particular entry in the GENBAS file, particularly for generally contracted
      WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7
      contracted s functions, 4 p functions and a single d function, then setting
      GENBAS_1=730 would eliminate the last p function and the d function. Default:
      use the unaltered GENBAS entry.'
    type: string
  CFOUR_GENBAS_2:
    default: Default
    description: This keyword performs the same function as CFOUR_GENBAS_1 above,
      but applies to second-row atoms.
    type: string
  CFOUR_GENBAS_3:
    default: Default
    description: This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2
      , but applies to third-row atoms.
    type: string
  CFOUR_GENBAS_4:
    default: Default
    description: This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2
      , and CFOUR_GENBAS_3 , but applies to fourth-row atoms.
    type: string
  CFOUR_GEO_CONV:
    default: '5'
    description: Specifies the convergence criterion for geometry optimization. The
      optimization terminates when the RMS gradient is below
    type: integer
  CFOUR_GEO_MAXCYC:
    default: '50'
    description: "Specifies the maximum allowed number of geometry optimization cycles.\
      \ Psi4 Interface: Geometry optimizations run through PSI (except in sandwich\
      \ mode) use PSI\u2019s optimizer and so this keyword has no effect. Use optking\
      \ keywords instead, particularly GEOM_MAXITER."
    type: integer
  CFOUR_GEO_MAXSTEP:
    default: '300'
    description: "Specifies largest step (in millibohr) which is allowed in geometry\
      \ optimizations. Psi4 Interface: Geometry optimizations run through PSI (except\
      \ in sandwich mode) use PSI\u2019s optimizer and so this keyword has no effect.\
      \ Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT."
    type: integer
  CFOUR_GEO_METHOD:
    default: SINGLE_POINT
    description: 'Morse-adjusted Newton-Raphson search for minimum (very efficient
      minimization scheme, particularly if the Hessian is available); SINGLE_POINT
      (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry
      optimization based on single-point energy calculations. Default: SINGLE-POINT
      (NR as soon as variables are marked to be optimized).'
    optional: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY
    type: string
  CFOUR_GIAO:
    default: Default
    description: 'Specifies whether gauge-including atomic orbitals are used (ON)
      or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF'
    optional: ON, OFF
    type: string
  CFOUR_GRID:
    default: 'OFF'
    description: 'Keyword used to control type of grid calculation (see later section
      in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1),
      steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES
      =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE
      (=3) steps are chosen for an integration based on Gauss-Hermite quadrature.
      (Default: OFF)'
    optional: OFF, CARTESIAN, INTERNAL, QUADRATURE
    type: string
  CFOUR_GUESS:
    default: MOREAD
    description: 'Where the initial SCF eigenvectors are read from. MOREAD means to
      read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian
      initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian
      is used. (Default: MOREAD)'
    optional: MOREAD, CORE
    type: string
  CFOUR_HBAR:
    default: 'false'
    description: "This keyword determines which action is taken by the linear response\
      \ program. ON (=1) the full effective Hamiltonian is calculated and written\
      \ to disk; OFF (=0) the \u201Clambda\u201D linear response equations are solved."
    type: boolean
  CFOUR_HFSTABILITY:
    default: 'OFF'
    description: Control analysis of the stability of RHF, ROHF and UHF wavefunctions,
      as well as a possible search for a lower SCF solution. There are three possible
      options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability
      analysis and returns the number of negative eigenvalues in the orbital rotation
      Hessian. A third option, FOLLOW (=2) performs the stability analysis and then
      proceeds to rotate the SCF orbitals in the direction of a particular negative
      eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC),
      after which the SCF is rerun.
    optional: OFF, ON, FOLLOW
    type: string
  CFOUR_INCORE:
    default: 'OFF'
    description: 'This keyword can be used to significantly reduce disk i/o, and should
      be implemented very soon. The following options are available: OFF (= 0), no
      special algorithms are used (the default case); ALL (=1) all quantities except
      the'
    optional: OFF, ALL, PARTIAL
    type: string
  CFOUR_INPUT_MRCC:
    default: 'true'
    description: Specifies whether an input for mrcc is written (ON, =0) or not (OFF,
      =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified.
    type: boolean
  CFOUR_INTEGRALS:
    default: VMOL
    description: "This keyword defines what type of integral input will be written\
      \ by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS\
      \ (=0), input for Pitzer\u2019s ARGOS integral program will be written. (Default:\
      \ VMOL)."
    optional: VMOL, ARGOS
    type: string
  CFOUR_JODA_PRINT:
    default: '0'
    description: Controls amount of debug printing performed by xjoda. The higher
      the number, the more information is printed. Values of 25 or higher generally
      do not produce anything of interest to the general user. Do not set JODA_PRINT
      to 999 as this will cause the core vector to be dumped to disk.
    type: integer
  CFOUR_LINEQ_CONV:
    default: '7'
    description: Convergence threshold for linear equations controlled by LINEQ_TYPE.
      Equations are iterated until smallest residual falls below
    type: integer
  CFOUR_LINEQ_MAXCY:
    default: '50'
    description: The maximum number of iterations in all linear CC equations.
    type: integer
  CFOUR_LINEQ_TYPE:
    default: DIIS
    description: Determines the algorithm used to solve linear equations (
    optional: POPLE, DIIS
    type: string
  CFOUR_LOCK_ORBOCC:
    default: 'false'
    description: 'This keyword is used by the SCF program to determine if the orbital
      occupancy (by symmetry block) is allowed to change in the course of the calculation.
      ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or
      the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default
      : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and
      later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.)'
    type: boolean
  CFOUR_MAXSTEP:
    default: '300'
    description: Identical to CFOUR_GEO_MAXSTEP.
    type: integer
  CFOUR_MEMORY_SIZE:
    default: '100000000'
    description: 'Specifies the amount of core memory used in integer words (default)
      or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000
      (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4
      Interface: Keyword set in MB from memory input command when given.'
    type: integer
  CFOUR_MEM_UNIT:
    default: INTEGERWORDS
    description: 'Specifies the units in which the amount of requested core memory
      is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4
      Interface: Keyword set from memory input command when given, always MB.'
    optional: INTEGERWORDS, KB, MB, GB, TB
    type: string
  CFOUR_METHOD:
    default: SINGLE_POINT
    description: "Specifies the geometry optimization strategy. Four values are permitted:\
      \ NR (=0) \u2013 Straightforward Newton-Raphson search for minimum; RFA (=1)\
      \ \u2013 Rational Function Approximation search for minimum (this method can\
      \ be used to find minima when the initial structure is in a region where the\
      \ Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search\
      \ for a transition state (can be started in a region where the Hessian index\
      \ is not equal to unity); MANR (=3) \u2013 Morse-adjusted Newton-Raphson search\
      \ for minimum (very efficient minimization scheme, particularly if the Hessian\
      \ is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point\
      \ calculation. Psi4 Interface: Geometry optimizations run through PSI (except\
      \ in sandwich mode) use PSI\u2019s optimizer and so this keyword has no effect.\
      \ Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE."
    optional: NR, RFA, TS, MANR, SINGLE_POINT
    type: string
  CFOUR_MRCC:
    default: 'false'
    description: "Specifies the type of MRCC calculation. MK performs a MR-CC calculation\
      \ based on Mukherjee\u2019s ansatz."
    type: boolean
  CFOUR_MULTIPLICITY:
    default: '1'
    description: 'Specifies the spin multiplicity. Psi4 Interface: Keyword set from
      active molecule.'
    type: integer
  CFOUR_NACOUPLING:
    default: 'OFF'
    description: Calculation of non-adiabatic coupling. In case of ON (=1) the method
      by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case
      of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti
      and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic
      coupling. Note that for calculations using LVC or NACV options the multiroot
      diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES
      (dne?) =MULTIROOT.
    optional: ON, NACV, LVC
    type: string
  CFOUR_NEGEVAL:
    default: ABORT
    description: "Specifies what to do if negative eigenvalues are encountered in\
      \ the totally symmetric Hessian during an NR or MANR geometry-optimization search.\
      \ If ABORT (=0), the job will terminate with an error message; if SWITCH (=1)\
      \ the program will just switch the eigenvalue to its absolute value and keep\
      \ plugging away (this is strongly discouraged!); and if RFA (=2), the keyword\
      \ CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued.\
      \ Psi4 Interface: Geometry optimizations run through PSI (except in sandwich\
      \ mode) use PSI\u2019s optimizer and so this keyword has no effect. Use optking\
      \ keywords instead."
    optional: ABORT, SWITCH, RFA
    type: string
  CFOUR_NEWNORM:
    default: 'false'
    description: "All components of spherical AO\u2019s are normalized to 1. This\
      \ feature can help with numerical convergence issues if AO integrals are involved.\
      \ Currently only working for single-point energy calculations."
    type: boolean
  CFOUR_NONHF:
    default: 'false'
    description: Specifies whether the reference function used in the correlation
      energy calculation satisfies the (spin-orbital) HF equations or not. Usually
      there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF
      reference functions (QRHF and ROHF) set this flag automatically.
    type: boolean
  CFOUR_NTOP_TAMP:
    default: '15'
    description: Specifies how many t amplitudes will be printed for each spin case
      and excitation level. For =N, The largest N amplitudes for each spin case and
      excitation level will be printed.
    type: integer
  CFOUR_OCCUPATION:
    default: Default
    description: Specifies the orbital occupancy of the reference function in terms
      of the occupation numbers of the orbitals and their irreducible representations.
      The occupancy is specified by either NIRREP or 2*NIRREP integers specifying
      the number of occupied orbitals of each symmetry type, where NIRREP is the number
      of irreducible representations in the computational point group. If there are
      no orbitals of a particular symmetry type a zero must be entered. If the reference
      function is for an open-shell system, two strings of NIRREP occupation numbers
      separated by a slash are input for the
    type: array
  CFOUR_OMP_NUM_THREADS:
    default: '1'
    description: Sets the OMP_NUM_THREADS environment variable before calling CFOUR.
      If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then
      that value is used. When set, this option overrides everything. Be aware the
      -n command-line option described in section Threading does not affect CFOUR.
    type: integer
  CFOUR_OPEN-SHELL:
    default: SPIN-ORBITAL
    description: "Specifies which kind of open-shell CC treatment is employed. The\
      \ default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only\
      \ possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible\
      \ options are beside the standard spin-orbital scheme a spin-restricted CC approach\
      \ (SR-CC=3), as well as a corresponding linear approximation (which in the literature\
      \ usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC\
      \ and PSA-CC are within the CCSD approximation restricted to excitations defined\
      \ by the first-order interacting space arguments. With the keywords PSA-CC_FULL\
      \ (=2) or SR-CC_FULL (=6) inclusion of the so called \u201Cpseudo-triples\u201D\
      \ beyond the first-order interacting space is also possible. The two-determinant\
      \ CC method for open-shell singlet states can be activated by TD-CC (=8)."
    optional: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC
    type: string
  CFOUR_OPT_MAXCYC:
    default: '50'
    description: Identical to CFOUR_GEO_MAXCYC.
    type: integer
  CFOUR_ORBITALS:
    default: STANDARD
    description: Specifies the type of molecular orbitals used in post-HF calculations.
      STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation)
      without any modification. These are in the case of RHF/UHF the usual canonical
      HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals
      with equal spatial parts for both the
    optional: STANDARD, SEMICANONICAL
    type: string
  CFOUR_PERT_ORB:
    default: Default
    description: 'Specifies the type of perturbed orbitals used in energy derivative
      calculations. STANDARD means that the gradient formulation assumes that the
      perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal.
      CANONICAL means that the perturbed orbitals are assumed to be canonical. This
      keyword is set automatically to CANONICAL in derivative calculations with methods
      which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T]
      and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL
      requests a canonical perturbed-orbital treatment only for the occupied-occupied
      block of the unperturbed density matrix in analytic derivative calculations.
      For testing purposes, it is possible to force the use standard perturbed orbitals
      even in case of iterative triple excitations via the option FORCE_STANDA (dne?).
      Note also that in case of unrelaxed derivatives standard orbitals must be used.
      Default : STANDARD for all methods without triples (except CCSDT), CANONICAL
      for all methods with triples in case of relaxed derivatives.'
    optional: STANDARD, CANONICAL, IJ_CANONICAL
    type: string
  CFOUR_POINTS:
    default: DOUBLE
    description: Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided
      numerical differentiation in the finite difference evaluation of the Hessian.
      Two-sided numerical differentiation is considerably more accurate than the single-sided
      method, and its use is strongly recommended for production work.
    optional: SINGLE, DOUBLE
    type: string
  CFOUR_PRINT:
    default: '0'
    description: Controls the amount of printing in the energy and energy derivative
      calculation programs. Using a value of 1 will produce a modest amount of additional
      output over the default value of 0, which includes some useful information such
      as SCF eigenvectors, Fock matrix elements, etc.
    type: integer
  CFOUR_PROPS:
    default: 'OFF'
    description: Specifies whether and which molecular property is calculated. OFF
      (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation
      of various one-electron first-order properties (e.g., dipole moment, quadrupole
      moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in
      the next release replaced by STAT_POL) computes static electric polarizabilities,
      DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation
      of frequency-dependent polarizabilities (note that here an additional input
      of the frequency is required), NMR (=5) requests the calculation of NMR chemical
      shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the
      calculation of the Fermi-Contact contribution to indirect spin-spin coupling
      constants, J_SD the calculation of the corresponding spin-dipole contribution,
      and J_SO the calculation of the corresponding spin-orbit contribution to J;
      HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP
      (=23) requests the calculation of frequency-dependent hyperpolarizabilities,
      SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic
      generation, OPT_REC (=25) the computation of hyperpolarizabilities related to
      optical rectification, VERDET (=26) the calculation of Verdet constants.
    optional: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC,
      VERDET
    type: string
  CFOUR_PROP_INTEGRAL:
    default: INTERNAL
    description: Allows storage of property integrals computed in xvdint on internal
      files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external
      files (EXTERNAL, =1).
    optional: INTERNAL, EXTERNAL
    type: string
  CFOUR_QRHFGUES:
    default: 'false'
    description: "If this keyword is set to ON (=1), then the QRHF orbitals specified\
      \ by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords\
      \ are used as a starting guess for a restarted SCF procedure. This can be an\
      \ extremely useful way to converge \u201Cdifficult\u201D SCF solutions, such\
      \ as those that correspond to states that are not the lowest states of a given\
      \ symmetry. Note that when this option is used, the calculation that is performed\
      \ is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation,\
      \ depending on what type of reference is specified by the CFOUR_REFERENCE keyword.\
      \ The QRHF aspect of the calculation is used simply as a device to converge\
      \ the orbitals."
    type: boolean
  CFOUR_QRHF_GENERAL:
    default: Default
    description: The presence of this keyword specifies that a QRHF based CC calculation,
      or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is
      to be performed.
    type: array
  CFOUR_QRHF_ORBITAL:
    default: Default
    description: 'By default, in QRHF calculations, electrons are removed from the
      highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons
      are added to the lowest unoccupied orbital within a symmetry block (symmetry
      block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional
      flexibility in choosing which orbitals will have their occupation numbers altered.
      The value of this keyword gives the offset with respect to the default orbital
      for the orbital which will be depopulated (or populated) in QRHF-CC calculations.
      For calculations involving more than one removal or addition of electrons, values
      are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a
      one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2
      means that an electron will be added to the third lowest virtual in symmetry
      block 2 and another will be removed from the second highest occupied orbital
      in symmetry block 4. Examples given later in this manual further illustrate
      the QRHF input options and may help to clarify any confusion resulting from
      this documentation. (Default : 1)'
    type: array
  CFOUR_RAMAN_INT:
    default: 'OFF'
    description: ON (=1) requests a calculation of Raman intensities based on the
      geometrical derivatives of the static polarizability tensor, while DYN (=2)
      requests a calculation of Raman intensities based on the derivatives of the
      dynamical polarizability tensor.
    optional: ON, DYN, OFF
    type: string
  CFOUR_RAMAN_ORB:
    default: UNRELAXED
    description: Specifies whether Raman intensities are calculated with orbital relaxation
      with respect to the electric field perturbation (RELAXED, = 1) or without orbital
      relaxation (UNRELAXED, = 0).
    optional: RELAXED, UNRELAXED
    type: string
  CFOUR_RDO:
    default: 'true'
    description: Specifies whether or not relaxed density natural orbitals are to
      be computed. This option only has meaning for a correlated calculation. For
      =0, Do not compute. For =1, compute.
    type: boolean
  CFOUR_REFERENCE:
    default: RHF
    description: 'Specifies the type of SCF calculation to be performed. RHF (= 0)
      requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock
      reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF
      (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active
      space SCF calculations (currently not implemented). Psi4 Interface: Keyword
      subject to translation from value of REFERENCE unless set explicitly.'
    optional: RHF, UHF, ROHF, TCSCF, CASSCF
    type: string
  CFOUR_RELATIVISTIC:
    default: 'OFF'
    description: Specifies the treatment of relativistic effects. The default is a
      non-relativistic treatment (OFF), while perturbational treatments are invoked
      via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity
      and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation
      theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation
      theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6
      (scalar-relativistic part of sixth-order direct perturbation theory), SFREE
      (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with
      DPT2).
    optional: OFF, MVD1, MVd2, DPT2, SF-DPT4, DPT4, SF-DPT6, SFREE, X2C1E, DPT
    type: string
  CFOUR_RELAX_DENS:
    default: 'false'
    description: Specifies whether the relaxed density matrix is computed for correlated
      wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1)
      it will be computed.
    type: boolean
  CFOUR_RESTART_CC:
    default: 'false'
    description: 'Offers the possibility to restart a CC calculation which stopped
      for various reasons, e.g. time limit, in the correlation part. However, note
      that a restart which is specified by ON (= 1) needs the following files of the
      previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD.'
    type: boolean
  CFOUR_RES_RAMAN:
    default: 'false'
    description: This option can be used to convert an analytically calculated gradient
      vector to a particular normal coordinate representation. A useful application
      is to calculate the gradient of an electronically excited state in the normal
      coordinate representation of the ground electronic state, as this provides a
      first approximation to resonance Raman intensities (hence the name of the keyword).
      Calculations that use the this option require the externally supplied force
      constant matrix FCMFINAL, which is written to disk during the course of both
      analytic and finite-difference vibrational frequency calculations. No such transformation
      is performed if OFF (=0); while ON (=1) directs the program to evaluate the
      gradient and transform it to the chosen set of normal coordinates. A warning
      message is printed if the force constant matrix is unavailable.
    type: boolean
  CFOUR_ROT_EVEC:
    default: '0'
    description: "Specifies which eigenvector of the orbital rotation Hessian is to\
      \ be used to rotate the original SCF orbitals. By default, it will use that\
      \ associated with the lowest eigenvalue of the totally symmetric part of the\
      \ block-factored Hessian, as this choice often leads to the lowest energy SCF\
      \ solution. For RHF stability checks, only those instabilities which correspond\
      \ to RHF solutions will be considered. It is important to understand that following\
      \ non-symmetric eigenvectors lowers the symmetry of the wavefunction and that\
      \ following RHF \u2013> UHF stabilities leads to a UHF solution. To converge\
      \ the SCF roots associated with such instabilities, one must run the calculation\
      \ in reduced symmetry and as a closed-shell UHF case, respectively. Value n\
      \ directs the program to follow the vector associated with the nth lowest eigenvalue\
      \ having the proper symmetry (totally symmetric) and spin (RHF\u2013>RHF or\
      \ UHF\u2013>UHF) properties. 0 means use the lowest eigenvalue."
    type: integer
  CFOUR_SAVE_INTS:
    default: 'false'
    description: Tells CFOUR whether to delete large files (AO integrals and MOINTS
      file for now) when they are no longer needed. OFF (=0) They will not be saved,
      ON (=1) they will be saved.
    type: boolean
  CFOUR_SCALE_ON:
    default: MAG(S)
    description: Controls whether step scaling is based on the absolute step length
      (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate
      space (=1 or MAX(S)).
    optional: MAG(S), MAX(S)
    type: string
  CFOUR_SCF_CONV:
    default: '7'
    description: Specifies the convergence criterion for the HF-SCF equations. Equations
      are considered converged when the maximum change in density matrix elements
      is less than
    type: integer
  CFOUR_SCF_DAMPING:
    default: '1000'
    description: Controls the damping (in the first iterations (specified by CFOUR_SCF_EXPSTART
      via
    type: integer
  CFOUR_SCF_EXPORDER:
    default: '6'
    description: Specifies the number of density matrices to be used in the DIIS convergence
      acceleration procedure.
    type: integer
  CFOUR_SCF_EXPSTART:
    default: '8'
    description: Specifies the first iteration in which the DIIS convergence acceleration
      procedure is applied.
    type: integer
  CFOUR_SCF_EXTRAPOLATION:
    default: 'true'
    description: Specifies whether or not the DIIS extrapolation is used to accelerate
      convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means
      use DIIS.
    type: boolean
  CFOUR_SCF_MAXCYC:
    default: '150'
    description: 'Specifies the maximum number of SCF iterations. Psi4 Interface:
      Keyword subject to translation from value of MAXITER unless set explicitly.'
    type: integer
  CFOUR_SD_FIELD:
    default: '0'
    description: Specifies the strength of a spin-dipole perturbation as required
      for finite-field calculations of the SD contributions to indirect spin-spin
      coupling constants. The value must be specified as an integer and the SD strength
      used by the program will be the value of the keyword
    type: integer
  CFOUR_SPHERICAL:
    default: 'true'
    description: 'Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian
      (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical
      harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according
      to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to
      translation from value of PUREAM unless set explicitly.'
    type: boolean
  CFOUR_SPINROTATION:
    default: 'false'
    description: Specifies whether nuclear spin-rotation tensors are computed within
      a NMR chemical shift calculation (ON, =1) or not (OFF, =9). In the case of electronic
      g-tensor calculations for open-shell molecules this keyword controls the calculation
      of the electronic spin-rotation tensor.
    type: boolean
  CFOUR_SPIN_FLIP:
    default: 'false'
    description: "Controls whether excitation energy calculations allow for a \u201C\
      spin flip\u201D which changes the"
    type: boolean
  CFOUR_SPIN_ORBIT:
    default: 'OFF'
    description: Experimental Use! ON (=1) requests calculation of one-electron spin-orbit
      integrals. MEANSO additionally gives a mean-field treatment of the two-electron
      terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833
      (2000)).
    optional: ON, MEANSO, OFF
    type: string
  CFOUR_SPIN_SCAL:
    default: 'false'
    description: ON (=1) requests the spin-component scaled variant of the MP2 approach.
      This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and
      must be used together with CFOUR_REFERENCE =UHF.
    type: boolean
  CFOUR_SUBGROUP:
    default: DEFAULT
    description: Specifies an Abelian subgroup to be used in a calculation. Acceptable
      arguments are DEFAULT (=0); C1 (= 1); C2 (= 2); CS (= 3); CI (= 4); C2V (= 5);
      C2H (= 6); D2 (= 7) and D2H (= 8). Use of C1 is of course equivalent to setting
      CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default)
      uses the highest order Abelian subgroup.
    optional: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF
    type: string
  CFOUR_SYMMETRY:
    default: 'true'
    description: Specifies what subgroup of the full point group is to be used in
      the energy and/or gradient calculation (the computational point group). OFF
      (=1) forces a no symmetry run (in
    type: boolean
  CFOUR_SYM_CHECK:
    default: 'true'
    description: "In principle can be used to force the SCF to converge a solution\
      \ for which the density matrix transforms as the totally symmetric representation\
      \ of the point group (i.e. no broken symmetry solutions). The code seems to\
      \ work in most cases, but has currently been implemented for point groups with\
      \ E type representation and not for those with triply-, quadruply- or pentuply-degenerate\
      \ representations. Extending the code to those cases is probably straightforward,\
      \ and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0\
      \ \u201Cforces\u201D the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn\u2019\
      t. The latter is the default."
    type: boolean
  CFOUR_T3_EXTRAPOL:
    default: 'false'
    description: Specifies whether the T3 amplitudes are included ON (=1) or not included
      OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion
      of T3 speeds up convergence and allows tight convergence, but on the other hand
      it increases disk space requirements. Note that this keyword is only available
      with module xecc.
    type: boolean
  CFOUR_TAMP_SUM:
    default: '5'
    description: Specifies how often the largest
    type: integer
  CFOUR_THERMOCHEMISTRY:
    default: 'ON'
    description: 'Specifies whether to calculate finite-temperature thermodynamic
      corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives
      abbreviated output; and VERBOSE (=2) gives elaborate output that is separated
      by translation, rotation and vibration. Default: ON (currently not available
      in public version)'
    optional: OFF, ON, VERBOSE
    type: string
  CFOUR_TRANS_INV:
    default: USE
    description: Specifies whether or not translational invariance is exploited in
      geometrical derivative calculations. USE(=0) specifies that translational invariance
      is exploited, while IGNORE (=1) turns it off.
    optional: USE, IGNORE
    type: string
  CFOUR_TREAT_PERT:
    default: SIMULTANEOUS
    description: Specifies whether in a correlated NMR chemical shift calculations
      all perturbations are treated at once or sequentially. Available option are
      SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for
      large-scale calculations, as it has less demands on the available disk space.
    optional: SIMULTANEOUS, SEQUENTIAL
    type: string
  CFOUR_UIJ_THRESHOLD:
    default: '25'
    description: 'Specifies the threshold value (given as an integer) for the treatment
      of CPHF coefficients in second derivative calculations using perturbed canonical
      orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital
      rotation is treated (at the expense of additional CPU cost) using the standard
      non-canonical procedures, while orbital pairs corresponding to CPHF coefficients
      below the threshold are treated using perturbed canonical representation. Default:
      25 (Default: 1 in the developer version)'
    type: integer
  CFOUR_UNITS:
    default: ANGSTROM
    description: 'Specifies the units used for molecular geometry input. ANGSTROM
      (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface:
      Keyword set from active molecule, always ANGSTROM.'
    optional: ANGSTROM, BOHR
    type: string
  CFOUR_UPDATE_HESSIAN:
    default: 'true'
    description: Specifies whether or not the Hessian update is carried out. OFF (=
      0) uses the initial Hessian (however supplied, either the default guess or a
      FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not
      in current public version).
    type: boolean
  CFOUR_VIBRATION:
    default: 'NO'
    description: Specifies whether (harmonic) vibrational frequencies are calculated
      or not. If the default NO (=0) is specified then no frequencies are calculated.
      For ANALYTIC, vibrational frequencies are determined from analytically computed
      second derivatives, and for FINDIF (=2) vibrational frequencies are calculated
      from a force field obtained by numerical differentiation of analytically evaluated
      gradients (or even single-point energies) using symmetry-adapted mass-weighted
      Cartesian coordinates. If vibrational frequencies are calculated, a normal mode
      analysis using the computed force-constant matrix is performed, rotationally
      projected frequencies are computed, infrared intensities are determined, and
      zero-point energies (ZPE) are evaluated.
    optional: NO, ANALYTIC, FINDIF, EXACT
    type: string
  CFOUR_VTRAN:
    default: FULL/PARTIAL
    description: This keyword defines what type of integral transformation is to be
      performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation
      program to choose the appropriate type of transformation, while FULL (=1) requires
      a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation
      where the
    optional: FULL/PARTIAL, FULL, PARTIAL
    type: string
  CFOUR_XFIELD:
    default: '0'
    description: Specifies the X-component of an external electric field. The value
      must be specified as an integer and the field used by the program will be the
      value of the keyword
    type: integer
  CFOUR_XFORM_TOL:
    default: '11'
    description: The tolerance for storing transformed integrals. Integrals less than
    type: integer
  CFOUR_YFIELD:
    default: '0'
    description: Specifies the Y-component of an external electric field. The value
      must be specified as an integer and the field used by the program will be the
      value of the keyword
    type: integer
  CFOUR_ZFIELD:
    default: '0'
    description: Specifies the Z-component of an external electric field. The value
      must be specified as an integer and the field used by the program will be the
      value of the keyword
    type: integer
  TRANSLATE_PSI4:
    default: 'true'
    description: Do translate set Psi4 options to their cfour counterparts.
    type: boolean
CPHF:
  CPHF_MEM_SAFETY_FACTOR:
    default: '0.75'
    description: Memory safety factor for allocating JK
    type: double
  CPHF_TASKS:
    default: Default
    description: 'Which tasks to run CPHF For * Valid choices: * -Polarizability *'
    type: array
  DEBUG:
    default: '0'
    description: The amount of debug information printed to the output file
    type: integer
  DF_BASIS_SCF:
    default: Default
    description: Auxiliary basis for SCF
    optional: basis string
    type: string
  EXPLICIT_HAMILTONIAN:
    default: 'false'
    description: Do explicit hamiltonian only?
    type: boolean
  MODULE:
    default: RCPHF
    description: What app to test?
    optional: RCPHF
    type: string
  PRINT:
    default: '1'
    description: The amount of information printed to the output file
    type: integer
  SCF_TYPE:
    default: DIRECT
    description: SCF Type
    optional: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK, DFDIRJ+SNLINK,
      DFDIRJ+LINK, DFDIRJ+COSX
    type: string
  SOLVER_CONVERGENCE:
    default: '1.0e-6'
    description: Solver convergence threshold (max 2-norm).
    type: double
  SOLVER_MAXITER:
    default: '100'
    description: Solver maximum iterations
    type: integer
  SOLVER_N_GUESS:
    default: '1'
    description: DL Solver number of guesses
    type: integer
  SOLVER_PRECONDITION:
    default: JACOBI
    description: Solver precondition type
    optional: SUBSPACE, JACOBI, NONE
    type: string
DCT:
  ALGORITHM:
    default: SIMULTANEOUS
    description: Algorithm to use for the density cumulant and orbital updates in
      the DCT energy computation. Two-step algorithm is usually more efficient for
      small systems, but for large systems simultaneous algorithm (default) is recommended.
      If convergence problems are encountered (especially for highly symmetric systems)
      QC algorithm can be used.
    optional: TWOSTEP, SIMULTANEOUS, QC
    type: string
  AO_BASIS:
    default: DISK
    description: Controls whether to avoid the AO->MO transformation of the two-electron
      integrals for the four-virtual case (
    optional: NONE, DISK
    type: string
  CACHELEVEL:
    default: '2'
    description: Controls how to cache quantities within the DPD library
    type: integer
  DAMPING_PERCENTAGE:
    default: '0.0'
    description: "The amount (percentage) of damping to apply to the orbital update\
      \ procedure: 0 will result in a full update, 100 will completely stall the update.\
      \ A value around 20 (which corresponds to 20% of the previous iteration\u2019\
      s density being mixed into the current iteration) can help in cases where oscillatory\
      \ convergence is observed."
    type: double
  DCT_FUNCTIONAL:
    default: ODC-12
    description: Chooses appropriate DCT method
    optional: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0
    type: string
  DCT_GUESS:
    default: MP2
    description: Whether to read the orbitals from a previous computation, or to compute
      an MP2 guess.
    optional: CC, BCC, MP2, DCT
    type: string
  DCT_TYPE:
    default: CONV
    description: What algorithm to use for the DCT computation
    optional: CONV, DF
    type: string
  DF_BASIS_DCT:
    default: Default
    description: Auxiliary basis set for DCT density fitting computations. Defaults
      to a RI basis.
    optional: basis string
    type: string
  DIIS_MAX_VECS:
    default: '6'
    description: Maximum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_MIN_VECS:
    default: '3'
    description: Minimum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_START_CONVERGENCE:
    default: 1e-3
    description: Value of RMS of the density cumulant residual and SCF error vector
      below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation
      for the solution of the response equations.
    type: double
  ENERGY_LEVEL_SHIFT:
    default: '0.0'
    description: Level shift applied to the diagonal of the density-weighted Fock
      operator. While this shift can improve convergence, it does change the DCT energy.
    type: double
  E_CONVERGENCE:
    default: 1e-10
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  GUESS_R_CONVERGENCE:
    default: 1e-3
    description: Convergence criterion for the density cumulant and orbital guess
      for the variationally orbital-optimized DFT methods. Currently only available
      for ALGORITHM = SIMULTANEOUS.
    type: double
  INTS_TOLERANCE:
    default: 1e-14
    description: Schwarz screening threshold. Mininum absolute value below which TEI
      are neglected.
    type: double
  MAXITER:
    default: '40'
    description: Maximum number of macro- or micro-iterations for both energy and
      response equations
    type: integer
  ODC_GUESS:
    default: 'false'
    description: Whether to perform a guess DC-06 or DC-12 computation for ODC-06
      or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS.
    type: boolean
  OPDM:
    default: 'false'
    description: Compute a (relaxed) one-particle density matrix? Can be set manually.
      Set internally for property and gradient computations.
    type: boolean
  ORBITAL_LEVEL_SHIFT:
    default: '0.0'
    description: The shift applied to the denominator in the orbital update iterations
    type: double
  QC_COUPLING:
    default: 'false'
    description: Controls whether to include the coupling terms in the DCT electronic
      Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only)
    type: boolean
  QC_TYPE:
    default: SIMULTANEOUS
    description: Controls the type of the quadratically-convergent algorithm (effective
      for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only
      solved for the orbital updates, the cumulant is updated using the standard Jacobi
      algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in
      a single Newton-Raphson step.
    optional: TWOSTEP, SIMULTANEOUS
    type: string
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    optional: UHF, RHF, ROHF
    type: string
  RELAX_GUESS_ORBITALS:
    default: 'false'
    description: Controls whether to relax the guess orbitals by taking the guess
      density cumulant and performing orbital update on the first macroiteration (for
      ALOGRITHM = TWOSTEP only)
    type: boolean
  RESPONSE_ALGORITHM:
    default: TWOSTEP
    description: Algorithm to use for the solution of DC-06 response equations in
      computation of analytic gradients and * properties
    optional: TWOSTEP, SIMULTANEOUS
    type: string
  R_CONVERGENCE:
    default: 1e-10
    description: Convergence criterion for the RMS of the residual vector in density
      cumulant updates, as well as the solution of the density cumulant and orbital
      response equations. In the orbital updates controls the RMS of the SCF error
      vector
    type: double
  STABILITY_ADD_VECTORS:
    default: '20'
    description: "The number of vectors that can be added simultaneously into the\
      \ subspace for Davidson\u2019s diagonalization in stability check"
    type: integer
  STABILITY_AUGMENT_SPACE_TOL:
    default: '0.1'
    description: The value of the rms of the residual in Schmidt orthogonalization
      which is used as a threshold for augmenting the vector subspace in stability
      check
    type: double
  STABILITY_CHECK:
    default: 'false'
    description: Performs stability analysis of the DCT energy
    type: boolean
  STABILITY_CONVERGENCE:
    default: 1e-4
    description: "Controls the convergence of the Davidson\u2019s diagonalization\
      \ in stability check"
    type: double
  STABILITY_MAX_SPACE_SIZE:
    default: '200'
    description: The maximum size of the subspace for the stability check. The program
      will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE)
      is not satisfied
    type: integer
  STABILITY_N_EIGENVALUES:
    default: '3'
    description: The number of Hessian eigenvalues computed during the stability check
    type: integer
  STABILITY_N_GUESS_VECTORS:
    default: '20'
    description: "The number of guess vectors used for Davidson\u2019s diagonalization\
      \ in stability check"
    type: integer
  THREE_PARTICLE:
    default: NONE
    description: Whether to compute three-particle energy correction or not
    optional: NONE, PERTURBATIVE
    type: string
  TIKHONOW_OMEGA:
    default: '0.0'
    description: The shift applied to the denominator in the density cumulant update
      iterations
    type: double
DDX:
  DDX_DIIS_MAX_VECS:
    default: '20'
    description: Number of previous iterates to use in DIIS acceleration inside DDX
    type: integer
  DDX_ETA:
    default: '0.1'
    description: Regularization parameter for characteristic function of sphere overlap.
      Advanced parameter, which usually does not need to be modified. Valid values
      are within the range [0, 1].
    type: double
  DDX_FMM:
    default: 'true'
    description: Use the fast multipole method to accelerate the solver
    type: boolean
  DDX_FMM_LOCAL_LMAX:
    default: '6'
    description: Maximal degree of local spherical harmonics (near-field FMM interations).
    type: integer
  DDX_FMM_MULTIPOLE_LMAX:
    default: '9'
    description: Maximal degree of multipole spherical harmonics (far-field FMM interactions).
      Using the same value as DDX_LMAX is recommended and done by default.
    type: integer
  DDX_INCORE:
    default: 'false'
    description: Use an in-core version, which uses more memory, but is generally
      faster
    type: boolean
  DDX_LMAX:
    default: '9'
    description: Maximal degree of modelling spherical harmonics
    type: integer
  DDX_LOGFILE:
    default: Default
    description: Logfile to dump a full trace of the DDX solver history for debugging.
    type: string
  DDX_MAXITER:
    default: '100'
    description: Maximal number of iterations used inside DDX
    type: integer
  DDX_MODEL:
    default: PCM
    description: Switch available solvation models
    optional: PCM, COSMO, LPB
    type: string
  DDX_N_LEBEDEV:
    default: '302'
    description: Number of Lebedev grid points to use. (A Lebedev Points number)
    type: integer
  DDX_RADII:
    default: Default
    description: Custom cavity radii. One per atom, uses the unit of the molecule.
    type: array
  DDX_RADII_SCALING:
    default: '1.1'
    description: Scaling factor for cavity spheres. Ignored if RADII is set. The default
      depends on the radii set chosen.
    type: double
  DDX_RADII_SET:
    default: UFF
    description: Radius set for cavity spheres. Ignored if RADII is set.
    optional: UFF, BONDI
    type: string
  DDX_SHIFT:
    default: '-100.0'
    description: Shift for characteristic function of sphere overlap. Advanced parameter,
      which usually does not need to be modified. Valid values are within the range
      [-1, 1] with -100 denoting an automatic selection of the best shift.
    type: double
  DDX_SOLUTE_RADIAL_POINTS:
    default: '35'
    description: Number of radial points used to compute the integrals for DDX calculations
    type: integer
  DDX_SOLUTE_SPHERICAL_POINTS:
    default: '110'
    description: Number of spherical points used to compute the solute electric potential/field
      integrals for DDX calculations (A Lebedev Points number)
    type: integer
  DDX_SOLVATION_CONVERGENCE:
    default: 1e-8
    description: Tolerance to which DDX linear systems are solved
    type: double
  DDX_SOLVENT:
    default: Default
    description: Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is
      set.
    type: string
  DDX_SOLVENT_EPSILON:
    default: '0'
    description: Dielectric constant of the solvent to use
    type: double
  DDX_SOLVENT_EPSILON_OPTICAL:
    default: '0'
    description: Optical dielectric constant of the solvent to use for non-equilibrium
      solvation
    type: double
  DDX_SOLVENT_KAPPA:
    default: '0'
    description: "Debye-H\xFCckel parameter of the solvent to use. Ignored if DDX_MODEL\
      \ is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either\
      \ ang^{-1} or bohr^{-1})."
    type: double
DETCI:
  AVG_STATES:
    default: Default
    description: Array giving the root numbers of the states to average in a state-averaged
      procedure such as SA-CASSCF. Root numbering starts from 0.
    type: array
  AVG_WEIGHTS:
    default: Default
    description: Array giving the weights for each state in a state-averaged procedure
    type: array
  A_RAS3_MAX:
    default: '-1'
    description: maximum number of alpha electrons in RAS III
    type: integer
  BENDAZZOLI:
    default: 'false'
    description: "Do use some routines based on the papers of Bendazzoli et al. to\
      \ calculate sigma? Seems to be slower and not worthwhile; may disappear eventually.\
      \ Works only for full CI and I don\u2019t remember if I could see how their\
      \ clever scheme might be extended to RAS in general."
    type: boolean
  B_RAS3_MAX:
    default: '-1'
    description: maximum number of beta electrons in RAS III
    type: integer
  CALC_S_SQUARED:
    default: 'false'
    description: Do calculate the value of
    type: boolean
  CC:
    default: 'false'
    description: Do coupled-cluster computation?
    type: boolean
  CC_A_RAS3_MAX:
    default: '-1'
    description: maximum number of alpha electrons in RAS III, for CC
    type: integer
  CC_B_RAS3_MAX:
    default: '-1'
    description: maximum number of beta electrons in RAS III, for CC
    type: integer
  CC_EX_LEVEL:
    default: '2'
    description: The CC excitation level
    type: integer
  CC_FIX_EXTERNAL:
    default: 'false'
    description: Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC
      methods.
    type: boolean
  CC_FIX_EXTERNAL_MIN:
    default: '1'
    description: Number of external indices before amplitude gets fixed by CC_FIX_EXTERNAL.
      Experimental.
    type: integer
  CC_MACRO:
    default: Default
    description: "CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl,\
      \ max_holes_I, max_parts_IV, max_I+IV], \u2026 ] Optional additional restrictions\
      \ on allowed excitations in coupled-cluster computations, based on macroconfiguration\
      \ selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV],\
      \ eliminate cluster amplitudes in which: [the excitation level (holes in I +\
      \ II) is equal to ex_lvl] AND [there are more than max_holes_I holes in RAS\
      \ I, there are more than max_parts_IV particles in RAS IV, OR there are more\
      \ than max_I+IV quasiparticles in RAS I + RAS IV]."
    type: array
  CC_MIXED:
    default: 'true'
    description: Do ignore block if num holes in RAS I and II is
    type: boolean
  CC_RAS34_MAX:
    default: '-1'
    description: maximum number of electrons in RAS III + IV, for CC
    type: integer
  CC_RAS3_MAX:
    default: '-1'
    description: maximum number of electrons in RAS III, for CC
    type: integer
  CC_RAS4_MAX:
    default: '-1'
    description: maximum number of electrons in RAS IV, for CC
    type: integer
  CC_UPDATE_EPS:
    default: 'true'
    description: Do update T amplitudes with orbital eigenvalues? (Usually would do
      this). Not doing this is experimental.
    type: boolean
  CC_VAL_EX_LEVEL:
    default: '0'
    description: The CC valence excitation level
    type: integer
  CC_VARIATIONAL:
    default: 'false'
    description: Do use variational energy expression in CC computation? Experimental.
    type: boolean
  CC_VECS_READ:
    default: 'false'
    description: Do import a CC vector from disk?
    type: boolean
  CC_VECS_WRITE:
    default: 'false'
    description: Do export a CC vector to disk?
    type: boolean
  CIBLKS_PRINT:
    default: 'false'
    description: Do print a summary of the CI blocks?
    type: boolean
  CI_FILE_START:
    default: '350'
    description: What file do we start at for hd/c/s/d CIvects? Should be 350 for
      normal CI calculations and 354 if we are going to do a second monomer.
    type: integer
  CI_MAXITER:
    default: '24'
    description: Maximum number of iterations to diagonalize the Hamiltonian
    type: integer
  CI_NUM_THREADS:
    default: '1'
    description: Number of threads for DETCI.
    type: integer
  COLLAPSE_SIZE:
    default: '1'
    description: Gives the number of vectors to retain when the Davidson subspace
      is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace
      retains the best estimate of the CI vector for the previous n iterations. Defaults
      to 1.
    type: integer
  DETCI_FREEZE_CORE:
    default: 'true'
    description: Do freeze core orbitals?
    type: boolean
  DF_BASIS_MCSCF:
    default: Default
    description: "Auxiliary basis set for MCSCF density fitted ERI computations. This\
      \ only effects the \u201CQ\u201D matrix in Helgaker\u2019s language. Defaults\
      \ to a JKFIT basis."
    optional: basis string
    type: string
  DIAG_METHOD:
    default: SEM
    description: "This specifies which method is to be used in diagonalizing the Hamiltonian.\
      \ The valid options are: RSP, to form the entire H matrix and diagonalize using\
      \ libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to\
      \ use Olsen\u2019s preconditioned inverse subspace method (1990); MITRUSHENKOV,\
      \ to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu\u2019\
      s Simultaneous Expansion Method, which is identical to the Davidson method if\
      \ only one root is to be found. The SEM method is the most robust, but it also\
      \ requires"
    optional: RSP, DAVIDSON, SEM
    type: string
  DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate CC convergence?
    type: boolean
  DIIS_FREQ:
    default: '1'
    description: How often to do a DIIS extrapolation. 1 means do DIIS every iteration,
      2 is every other iteration, etc.
    type: integer
  DIIS_MAX_VECS:
    default: '5'
    description: Maximum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_MIN_VECS:
    default: '2'
    description: Minimum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_START_ITER:
    default: '1'
    description: Iteration at which to start using DIIS
    type: integer
  DIPMOM:
    default: 'false'
    description: Do compute the dipole moment?
    type: boolean
  EX_ALLOW:
    default: Default
    description: An array of length EX_LEVEL specifying whether each excitation type
      (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard
      CI spaces such as CIST.
    type: array
  EX_LEVEL:
    default: '2'
    description: The CI excitation level
    type: integer
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  FCI:
    default: 'false'
    description: Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL.
    type: boolean
  FCI_STRINGS:
    default: 'false'
    description: Do store strings specifically for FCI? (Defaults to TRUE for FCI.)
    type: boolean
  FILTER_GUESS:
    default: 'false'
    description: Do invoke the FILTER_GUESS options that are used to filter out some
      trial vectors which may not have the appropriate phase convention between two
      determinants? This is useful to remove, e.g., delta states when a sigma state
      is desired. The user inputs two determinants (by giving the absolute alpha string
      number and beta string number for each), and also the desired phase between
      these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE
      turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1,
      FILTER_GUESS_DET2, and FILTER_GUESS_SIGN.
    type: boolean
  FILTER_GUESS_DET1:
    default: Default
    description: Array specifying the absolute alpha string number and beta string
      number for the first determinant in the filter procedure. (See FILTER_GUESS).
    type: array
  FILTER_GUESS_DET2:
    default: Default
    description: Array specifying the absolute alpha string number and beta string
      number for the second determinant in the filter procedure. (See FILTER_GUESS).
    type: array
  FILTER_GUESS_SIGN:
    default: '1'
    description: The required phase (1 or -1) between the two determinants specified
      by FILTER_GUESS_DET1 and FILTER_GUESS_DET2.
    type: integer
  FILTER_ZERO_DET:
    default: Default
    description: If present, the code will try to filter out a particular determinant
      by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr]
      specifies the absolute alpha and beta string numbers of the target determinant.
      This could be useful for trying to exclude states that have a nonzero CI coefficient
      for the given determinant. However, this option was experimental and may not
      be effective.
    type: array
  FOLLOW_ROOT:
    default: '0'
    description: The root to write out the two-particle density matrix for (the one-particle
      density matrices are written for all roots). Useful for a state-specific CASSCF
      or CI optimization on an excited state.
    type: integer
  FOLLOW_VECTOR:
    default: Default
    description: "In following a particular root (see FOLLOW_ROOT), sometimes the\
      \ root number changes. To follow a root of a particular character, one can specify\
      \ a list of determinants and their coefficients, and the code will follow the\
      \ root with the closest overlap. The user specifies arrays containing the absolute\
      \ alpha string indices (A_i below), absolute beta indices (B_i below), and CI\
      \ coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR\
      \ = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], \u2026]."
    type: array
  GUESS_VECTOR:
    default: H0_BLOCK
    description: Guess vector type. Accepted values are UNIT for a unit vector guess
      (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from
      the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged
      vectors in the D file;
    optional: UNIT, H0_BLOCK, DFILE
    type: string
  H0_BLOCKSIZE:
    default: '1000'
    description: This parameter specifies the size of the H0 block of the Hamiltonian
      which is solved exactly. The n determinants with the lowest SCF energy are selected,
      and a submatrix of the Hamiltonian is formed using these determinants. This
      submatrix is used to accelerate convergence of the CI iterations in the OLSEN
      and MITRUSHENKOV iteration schemes, and also to find a good starting guess for
      the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the
      program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines
      that the H0 block includes only one member of a pair of determinants related
      by time reversal symmetry. For very small block sizes, this could conceivably
      eliminate the entire H0 block; the program should print warnings if this occurs.
    type: integer
  H0_BLOCK_COUPLING:
    default: 'false'
    description: Do use coupling block in preconditioner?
    type: boolean
  H0_BLOCK_COUPLING_SIZE:
    default: '0'
    description: Parameters which specifies the size of the coupling block within
      the generalized davidson preconditioner.
    type: integer
  H0_GUESS_SIZE:
    default: '1000'
    description: size of H0 block for initial guess
    type: integer
  HD_AVG:
    default: EVANGELISTI
    description: How to average H diag energies over spin coupling sets. HD_EXACT
      uses the exact diagonal energies which results in expansion vectors which break
      spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set
      yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy
      approximation giving spin pure expansion vectors but usually doubles the number
      of Davidson iterations. EVANGELISTI uses the sums and differences of orbital
      energies with the SCF reference energy to produce spin pure expansion vectors.
      LEININGER approximation which subtracts the one-electron contribution from the
      orbital energies, multiplies by 0.5, and adds the one-electron contribution
      back in, producing spin pure expansion vectors and developed by Matt Leininger
      and works as well as EVANGELISTI.
    optional: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE
    type: string
  HD_OTF:
    default: 'true'
    description: Do compute the diagonal elements of the Hamiltonian matrix on-the-fly?
      Otherwise, a diagonal element vector is written to a separate file on disk.
    type: boolean
  ICORE:
    default: '1'
    description: Specifies how to handle buffering of CI vectors. A value of 0 makes
      the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors
      at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some
      inefficiency in the I/O (requiring multiple reads of the C vector when constructing
      H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory.
    type: integer
  ISTOP:
    default: 'false'
    description: Do stop DETCI after string information is formed and before integrals
      are read?
    type: boolean
  LSE:
    default: 'false'
    description: Do use least-squares extrapolation in iterative solution of CI vector?
    type: boolean
  LSE_COLLAPSE:
    default: '3'
    description: Number of iterations between least-squares extrapolations
    type: integer
  LSE_TOLERANCE:
    default: '3'
    description: Minimum converged energy for least-squares extrapolation to be performed
    type: double
  MAX_NUM_VECS:
    default: '0'
    description: Maximum number of Davidson subspace vectors which can be held on
      disk for the CI coefficient and sigma vectors. (There is one H(diag) vector
      and the number of D vectors is equal to the number of roots). When the number
      of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace
      will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful
      for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS.
    type: integer
  MCSCF_ALGORITHM:
    default: TS
    description: Convergence algorithm to utilize. Two-Step, Augmented Hessian. Defaults
      to TS for RASSCF.
    optional: TS, AH
    type: string
  MCSCF_CI_CLEANUP:
    default: 'true'
    description: Cleanup the CI info at the end of a run?
    type: boolean
  MCSCF_DIIS_ERROR_TYPE:
    default: GRAD
    description: DIIS error vector type either, the AO orbital gradient or the orbital
      rotation update matrix
    optional: GRAD, UPDATE
    type: string
  MCSCF_DIIS_FREQ:
    default: '1'
    description: How often to do a DIIS extrapolation for TS convergence
    type: integer
  MCSCF_DIIS_MAX_VECS:
    default: '8'
    description: Maximum number of DIIS vectors for TS convergence
    type: integer
  MCSCF_DIIS_START:
    default: '3'
    description: Iteration to turn on DIIS for TS convergence
    type: integer
  MCSCF_DPD_CLEANUP:
    default: 'true'
    description: Cleanup the DPD MCSCF object at the end of a run?
    type: boolean
  MCSCF_E_CONVERGENCE:
    default: 1e-7
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  MCSCF_GUESS:
    default: SCF
    description: Initial MCSCF starting guess, MP2 natural orbitals only available
      for DF-RHF reference
    optional: MP2, SCF
    type: string
  MCSCF_MAXITER:
    default: '30'
    description: Maximum number MCSCF of iterations
    type: integer
  MCSCF_MAX_ROT:
    default: '0.5'
    description: Maximum value in the rotation matrix. If a value is greater than
      this number all values are scaled.
    type: double
  MCSCF_ROTATE:
    default: Default
    description: Apply a list of 2x2 rotation matrices to the orbitals in the form
      of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and
      an angle of 90 would switch the two orbitals.
    type: array
  MCSCF_R_CONVERGENCE:
    default: 1e-5
    description: Convergence criterion for the RMS of the orbital gradient
    type: double
  MCSCF_SO_START_E:
    default: 1e-4
    description: Start second-order (AH or OS) orbital-orbital MCSCF based on energy
      convergence
    type: double
  MCSCF_SO_START_GRAD:
    default: 1e-4
    description: Start second-order (AH or OS) orbital-orbital MCSCF based on RMS
      of orbital gradient
    type: double
  MCSCF_TYPE:
    default: CONV
    description: Method to handle the two-electron integrals
    optional: DF, CONV, AO
    type: string
  MIXED:
    default: 'true'
    description: "Do allow \u201Cmixed\u201D RAS II/RAS III excitations into the CI\
      \ space? If FALSE, then if there are any electrons in RAS III, then the number\
      \ of holes in RAS I cannot exceed the given excitation level EX_LEVEL."
    type: boolean
  MIXED4:
    default: 'true'
    description: "Do allow \u201Cmixed\u201D excitations involving RAS IV into the\
      \ CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE,\
      \ then if there are any electrons in RAS IV, then the number of holes in RAS\
      \ I cannot exceed the given excitation level EX_LEVEL."
    type: boolean
  MPN:
    default: 'false'
    description: Do compute the MPn series out to kth order where k is determined
      by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN),
      DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF
      must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen
      by default for MPN = TRUE.
    type: boolean
  MPN_ORDER_SAVE:
    default: '0'
    description: If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available
      from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER
      = true).
    type: integer
  MPN_SCHMIDT:
    default: 'false'
    description: Do employ an orthonormal vector space rather than storing the kth
      order wavefunction?
    type: boolean
  MPN_WIGNER:
    default: 'true'
    description: Do use Wigner formulas in the
    type: boolean
  MS0:
    default: 'false'
    description: Do use the
    type: boolean
  NAT_ORBS:
    default: 'false'
    description: Do compute natural orbitals?
    type: boolean
  NO_DFILE:
    default: 'false'
    description: Do use the last vector space in the BVEC file to write scratch DVEC
      rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.)
    type: boolean
  NUM_AMPS_PRINT:
    default: '10'
    description: Number of important CC amplitudes per excitation level to print.
      CC analog to NUM_DETS_PRINT.
    type: integer
  NUM_DETS_PRINT:
    default: '20'
    description: Number of important determinants to print
    type: integer
  NUM_INIT_VECS:
    default: '0'
    description: The number of initial vectors to use in the CI iterative procedure.
      Defaults to the number of roots.
    type: integer
  NUM_ROOTS:
    default: '1'
    description: number of CI roots to find
    type: integer
  OPDM:
    default: 'false'
    description: Do compute one-particle density matrix if not otherwise required?
    type: boolean
  PERTURB_MAGNITUDE:
    default: '1.0'
    description: The magnitude of perturbation
    type: double
  PRECONDITIONER:
    default: DAVIDSON
    description: 'This specifies the type of preconditioner to use in the selected
      diagonalization method. The valid options are: DAVIDSON which approximates the
      Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact
      Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does
      a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to
      obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, and
      ITER_INV approaches are all formally equivalent but the ITER_INV is less computationally
      expensive. Default is DAVIDSON.'
    optional: LANCZOS, DAVIDSON, GEN_DAVIDSON, H0BLOCK, ITER_INV, EVANGELISTI
    type: string
  R4S:
    default: 'false'
    description: Do restrict strings with
    type: boolean
  RAS34_MAX:
    default: '-1'
    description: maximum number of electrons in RAS III + IV
    type: integer
  RAS3_MAX:
    default: '-1'
    description: maximum number of electrons in RAS III
    type: integer
  RAS4_MAX:
    default: '-1'
    description: maximum number of electrons in RAS IV
    type: integer
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    optional: RHF, ROHF
    type: string
  REFERENCE_SYM:
    default: '-1'
    description: Irrep for CI vectors; -1 = find automatically. This option allows
      the user to look for CI vectors of a different irrep than the reference. This
      probably only makes sense for Full CI, and it would probably not work with unit
      vector guesses. Numbering starts from zero for the totally-symmetric irrep.
    type: integer
  REPL_OTF:
    default: 'false'
    description: "Do string replacements on the fly in DETCI? Can save a gigantic\
      \ amount of memory (especially for truncated CI\u2019s) but is somewhat flaky\
      \ and hasn\u2019t been tested for a while. It may work only works for certain\
      \ classes of RAS calculations. The current code is very slow with this option\
      \ turned on."
    type: boolean
  RESTART:
    default: 'false'
    description: Do restart a DETCI iteration that terminated prematurely? It assumes
      that the CI and sigma vectors are on disk.
    type: boolean
  R_CONVERGENCE:
    default: 1e-4
    description: Convergence criterion for CI residual vector in the Davidson algorithm
      (RMS error). The default is 1e-4 for energies and 1e-7 for gradients.
    type: double
  S:
    default: '0.0'
    description: The value of the spin quantum number
    type: double
  SF_RESTRICT:
    default: 'false'
    description: "Do eliminate determinants not valid for spin-complete spin-flip\
      \ CI\u2019s? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)]"
    type: boolean
  SIGMA_OVERLAP:
    default: 'false'
    description: Do print the sigma overlap matrix? Not generally useful.
    type: boolean
  TDM:
    default: 'false'
    description: 'Do compute the transition density? Note: only transition densities
      between roots of the same symmetry will be evaluated. DETCI does not compute
      states of different irreps within the same computation; to do this, lower the
      symmetry of the computation.'
    type: boolean
  TPDM:
    default: 'false'
    description: "Do compute two-particle density matrix if not otherwise required?\
      \ Warning: This will hold 4 dense active TPDM\u2019s in memory"
    type: boolean
  UPDATE:
    default: DAVIDSON
    description: The update or correction vector formula, either DAVIDSON (default)
      or OLSEN.
    optional: DAVIDSON, OLSEN
    type: string
  VAL_EX_LEVEL:
    default: '0'
    description: In a RAS CI, this is the additional excitation level for allowing
      electrons out of RAS I into RAS II. The maximum number of holes in RAS I is
      therefore EX_LEVEL + VAL_EX_LEVEL.
    type: integer
  WFN:
    default: DETCI
    description: Wavefunction type. This should be set automatically from the calling
      Psithon function.
    optional: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF
    type: string
DFEP2:
  DF_BASIS_EP2:
    default: Default
    description: Auxiliary basis set for EP2 density fitting computations. Defaults
      to a RI basis.
    optional: basis string
    type: string
  EP2_CONVERGENCE:
    default: '5.e-5'
    description: What is the maximum number of iterations?
    type: double
  EP2_MAXITER:
    default: '20'
    description: What is the maximum number of iterations?
    type: integer
  EP2_NUM_EA:
    default: '0'
    description: Number of Electron Affinities to compute, starting with the LUMO.
    type: integer
  EP2_NUM_IP:
    default: '3'
    description: Number of Ionization Potentials to compute, starting with the HOMO.
    type: integer
  EP2_ORBITALS:
    default: Default
    description: "Explicitly pick orbitals to use in the EP2 method, overrides EP2_NUM_IP\
      \ and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], \u2026] for\
      \ each irrep."
    type: array
DFMP2:
  BASIS:
    default: NONE
    description: Primary basis set
    optional: basis string
    type: string
  DFMP2_MEM_FACTOR:
    default: '0.9'
    description: '% of memory for DF-MP2 three-index buffers'
    type: double
  DFMP2_P2_TOLERANCE:
    default: '0.0'
    description: Minimum error in the 2-norm of the P(2) matrix for corrections to
      Lia and P.
    type: double
  DFMP2_P_TOLERANCE:
    default: '0.0'
    description: Minimum error in the 2-norm of the P matrix for skeleton-core Fock
      matrix derivatives.
    type: double
  DF_BASIS_MP2:
    default: Default
    description: Auxiliary basis set for MP2 density fitting computations. Defaults
      to a RI basis.
    optional: basis string
    type: string
  DF_INTS_IO:
    default: NONE
    description: IO caching for CP corrections, etc
    optional: NONE, SAVE, LOAD
    type: string
  DF_INTS_NUM_THREADS:
    default: '0'
    description: Number of threads to compute integrals with. 0 is wild card
    type: integer
  INTS_TOLERANCE:
    default: '0.0'
    description: Schwarz screening threshold. Mininum absolute value below which TEI
      are neglected.
    type: double
  MADMP2_SLEEP:
    default: '0'
    description: A helpful option, used only in debugging the MADNESS version
    type: integer
  MP2_OS_SCALE:
    default: '6.0'
    description: OS Scale
    type: double
  MP2_SS_SCALE:
    default: '1.0'
    description: SS Scale
    type: double
  ONEPDM:
    default: 'false'
    description: Do compute one-particle density matrix?
    type: boolean
  OPDM_RELAX:
    default: 'true'
    description: Do relax the one-particle density matrix?
    type: boolean
DFOCC:
  CC_DIIS_MAX_VECS:
    default: '6'
    description: Maximum number of vectors used in amplitude DIIS
    type: integer
  CC_DIIS_MIN_VECS:
    default: '2'
    description: Minimum number of vectors used in amplitude DIIS
    type: integer
  CC_LAMBDA:
    default: 'false'
    description: Do solve lambda amplitude equations?
    type: boolean
  CC_MAXITER:
    default: '50'
    description: Maximum number of iterations to determine the amplitudes
    type: integer
  CHOLESKY:
    default: 'false'
    description: Do Cholesky decomposition of the ERI tensor
    type: boolean
  CHOLESKY_TOLERANCE:
    default: '1.0e-4'
    description: tolerance for Cholesky decomposition of the ERI tensor
    type: double
  COMPUT_S2:
    default: 'false'
    description: Do compute
    type: boolean
  CUTOFF:
    default: '8'
    description: Cutoff value for numerical procedures
    type: integer
  DO_DIIS:
    default: 'true'
    description: Do apply DIIS extrapolation?
    type: boolean
  DO_LEVEL_SHIFT:
    default: 'true'
    description: Do apply level shifting?
    type: boolean
  DO_SCS:
    default: 'false'
    description: "Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation,\
      \ SCS-OMP2 energy is computed automatically. However, in order to perform geometry\
      \ optimizations and frequency computations with SCS-OMP2, one needs to set \u2018\
      DO_SCS\u2019 to true"
    type: boolean
  DO_SOS:
    default: 'false'
    description: "Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation,\
      \ SOS-OMP2 energy is computed automatically. However, in order to perform geometry\
      \ optimizations and frequency computations with SOS-OMP2, one needs to set \u2018\
      DO_SOS\u2019 to true"
    type: boolean
  E3_SCALE:
    default: '0.25'
    description: CEPA opposite-spin scaling value from SCS-CCSD
    type: double
  EKT_IP:
    default: 'false'
    description: "Do compute ionization potentials based on the extended Koopmans\u2019\
      \ theorem?"
    type: boolean
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  HESS_TYPE:
    default: HF
    description: Type of the MO Hessian matrix
    optional: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF
    type: string
  INTEGRAL_CUTOFF:
    default: '9'
    description: Cutoff value for DF integrals
    type: integer
  LEVEL_SHIFT:
    default: '0.02'
    description: Level shift to aid convergence
    type: double
  LINEQ_SOLVER:
    default: CDGESV
    description: The solver will be used for simultaneous linear equations.
    optional: CDGESV, FLIN, POPLE
    type: string
  MAX_MOGRAD_CONVERGENCE:
    default: 1e-4
    description: Convergence criterion for maximum orbital gradient. If this keyword
      is not set by the user, DFOCC will estimate and use a value required to achieve
      the desired E_CONVERGENCE. The listed default will be used for the default value
      of E_CONVERGENCE.
    type: double
  MOLDEN_WRITE:
    default: 'false'
    description: Do write a MOLDEN output file? If so, the filename will end in .molden,
      and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name
      of the output file plus the name of the current molecule.
    type: boolean
  MO_DIIS_NUM_VECS:
    default: '6'
    description: Number of vectors used in orbital DIIS
    type: integer
  MO_MAXITER:
    default: '100'
    description: Maximum number of iterations to determine the orbitals
    type: integer
  MO_STEP_MAX:
    default: '0.5'
    description: Maximum step size in orbital-optimization procedure
    type: double
  MP2_AMP_TYPE:
    default: DIRECT
    description: The algorithm that used to handle mp2 amplitudes. The DIRECT option
      means compute amplitudes on the fly * whenever they are necessary.
    optional: DIRECT, CONV
    type: string
  MP2_OS_SCALE:
    default: '6.0'
    description: MP2 opposite-spin scaling value
    type: double
  MP2_SOS_SCALE:
    default: '1.3'
    description: MP2 Spin-opposite scaling (SOS) value
    type: double
  MP2_SOS_SCALE2:
    default: '1.2'
    description: Spin-opposite scaling (SOS) value for optimized-MP2 orbitals
    type: double
  MP2_SS_SCALE:
    default: '1.0'
    description: MP2 same-spin scaling value
    type: double
  NAT_ORBS:
    default: 'false'
    description: Do compute natural orbitals?
    type: boolean
  OCC_ORBS_PRINT:
    default: 'false'
    description: Do print OCC orbital energies?
    type: boolean
  OEPROP:
    default: 'false'
    description: Do compute one electron properties?
    type: boolean
  OO_SCALE:
    default: '0.01'
    description: OO scaling factor used in MSD
    type: double
  OPT_METHOD:
    default: QNR
    description: The orbital optimization algorithm. Presently quasi-Newton-Raphson
      algorithm available with several Hessian * options.
    optional: QNR
    type: string
  ORB_OPT:
    default: 'true'
    description: Do optimize the orbitals?
    type: boolean
  ORB_RESP_SOLVER:
    default: PCG
    description: The algorithm will be used for solving the orbital-response equations.
      The LINEQ option create the MO Hessian and solve the simultaneous linear equations
      with method choosen by the LINEQ_SOLVER option. The PCG option does not create
      the MO Hessian explicitly, instead it solves the simultaneous equations iteratively
      with the preconditioned conjugate gradient method.
    optional: PCG, LINEQ
    type: string
  ORTH_TYPE:
    default: MGS
    description: The algorithm for orthogonalization of MOs
    optional: GS, MGS
    type: string
  PCG_BETA_TYPE:
    default: FLETCHER_REEVES
    description: CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0.
    optional: FLETCHER_REEVES, POLAK_RIBIERE
    type: string
  PCG_CONVERGENCE:
    default: 1e-7
    description: Convergence criterion for residual vector of preconditioned conjugate
      gradient method. If this keyword is not set by the user, DFOCC will estimate
      and use a value required to achieve R_CONVERGENCE residual convergence. The
      listed default will be used for the default value of R_CONVERGENCE.
    type: double
  PCG_MAXITER:
    default: '50'
    description: Maximum number of preconditioned conjugate gradient iterations.
    type: integer
  PPL_TYPE:
    default: AUTO
    description: Type of the CCSD PPL term.
    optional: LOW_MEM, HIGH_MEM, CD, AUTO
    type: string
  QCHF:
    default: 'false'
    description: Do perform a QCHF computation?
    type: boolean
  READ_SCF_3INDEX:
    default: 'true'
    description: Do read 3-index integrals from SCF files?
    type: boolean
  REGULARIZATION:
    default: 'false'
    description: Do use regularized denominators?
    type: boolean
  REG_PARAM:
    default: '0.4'
    description: Regularization parameter
    type: double
  REMP_A:
    default: 0.15e0
    description: mixing parameter for the REMP hybrid perturbation theory, A specifies
      the Moller-Plesset fraction
    type: double
  RMS_MOGRAD_CONVERGENCE:
    default: 1e-4
    description: Convergence criterion for RMS orbital gradient. If this keyword is
      not set by the user, DFOCC will estimate and use a value required to achieve
      the desired E_CONVERGENCE. The listed default will be used for the default value
      of E_CONVERGENCE.
    type: double
  R_CONVERGENCE:
    default: 1e-5
    description: Convergence criterion for amplitudes (residuals).
    type: double
  SCS_TYPE:
    default: SCS
    description: Type of the SCS method
    optional: SCS, SCSN, SCSVDW, SCSMI
    type: string
  SOS_TYPE:
    default: SOS
    description: Type of the SOS method
    optional: SOS, SOSPI
    type: string
  TRIPLES_IABC_TYPE:
    default: DISK
    description: The algorithm to handle (ia|bc) type integrals that used for (T)
      correction.
    optional: INCORE, AUTO, DIRECT, DISK
    type: string
  WFN_TYPE:
    default: DF-OMP2
    description: Type of the wavefunction.
    type: string
DLPNO:
  DF_BASIS_MP2:
    default: Default
    description: Auxiliary basis set for MP2 density fitting computations. Defaults
      to a RI basis.
    optional: basis string
    type: string
  DLPNO_ALGORITHM:
    default: MP2
    description: Which DLPNO Algorithm to run (not set by user)
    optional: MP2
    type: string
  DLPNO_LOCAL_ORBITALS:
    default: BOYS
    description: Orbital localizer
    optional: BOYS, PIPEK_MEZEY
    type: string
  DLPNO_MAXITER:
    default: '50'
    description: Maximum number of iterations to determine the MP2 amplitudes.
    type: integer
  DOI_BASIS_TOLERANCE:
    default: '1.0e-10'
    description: Screening criteria for basis function values on DOI grids
    type: double
  DOI_PRUNING_SCHEME:
    default: ROBUST
    description: Pruning scheme for DOI grids
    optional: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER,
      LOG_GAUSSIAN, LOG_SLATER, NONE
    type: string
  DOI_RADIAL_POINTS:
    default: '25'
    description: Number of radial points in DOI grid
    type: integer
  DOI_SPHERICAL_POINTS:
    default: '50'
    description: Number of spherical points in DOI grid
    type: integer
  E_CONVERGENCE:
    default: 1e-6
    description: Energy convergence criteria for local MP2 iterations
    type: double
  F_CUT:
    default: 1e-5
    description: Fock matrix threshold for treating ampltudes as coupled during local
      MP2 iterations
    type: double
  LOCAL_CONVERGENCE:
    default: '1.0e-12'
    description: Convergence criteria for the Foster-Boys orbital localization
    type: double
  LOCAL_MAXITER:
    default: '1000'
    description: Maximum iterations in Foster-Boys localization
    type: integer
  PNO_CONVERGENCE:
    default: NORMAL
    description: General convergence criteria for DLPNO methods
    optional: LOOSE, NORMAL, TIGHT
    type: string
  R_CONVERGENCE:
    default: 1e-6
    description: Residual convergence criteria for local MP2 iterations
    type: double
  S_CUT:
    default: 1e-8
    description: Overlap matrix threshold for removing linear dependencies
    type: double
  T_CUT_CLMO:
    default: 1e-2
    description: Basis set coefficient threshold for including basis function (m)
      in domain of LMO (i)
    type: double
  T_CUT_CPAO:
    default: 1e-3
    description: Basis set coefficient threshold for including basis function (n)
      in domain of PAO (u)
    type: double
  T_CUT_DO:
    default: 1e-2
    description: DOI threshold for including PAO (u) in domain of LMO (i)
    type: double
  T_CUT_DO_IJ:
    default: 1e-5
    description: DOI threshold for treating LMOs (i,j) as interacting
    type: double
  T_CUT_DO_PRE:
    default: 3e-2
    description: DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening
    type: double
  T_CUT_MKN:
    default: 1e-3
    description: Mulliken charge threshold for including aux BFs on atom (a) in domain
      of LMO (i)
    type: double
  T_CUT_PNO:
    default: 1e-8
    description: Occupation number threshold for removing PNOs
    type: double
  T_CUT_PRE:
    default: 1e-6
    description: Pair energy threshold (dipole approximation) for treating LMOs (i,
      j) as interacting
    type: double
DMRG:
  DMRG_CASPT2_CALC:
    default: 'false'
    description: Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations
      are done?
    type: boolean
  DMRG_CASPT2_IMAG:
    default: '0.0'
    description: CASPT2 Imaginary shift
    type: double
  DMRG_CASPT2_IPEA:
    default: '0.0'
    description: CASPT2 IPEA shift
    type: double
  DMRG_CASPT2_ORBS:
    default: PSEUDOCANONICAL
    description: Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations
      are done.
    optional: PSEUDOCANONICAL, ACTIVE
    type: string
  DMRG_DIIS:
    default: 'false'
    description: Whether or not to use DIIS for DMRG.
    type: boolean
  DMRG_DIIS_WRITE:
    default: 'true'
    description: Whether or not to store the DIIS checkpoint on disk (convenient for
      restarting).
    type: boolean
  DMRG_EXCITATION:
    default: '0'
    description: 'Which root is targeted: 0 means ground state, 1 first excited state,
      etc.'
    type: integer
  DMRG_IRREP:
    default: '-1'
    description: "The DMRG wavefunction irrep uses the same conventions as PSI4. How\
      \ convenient :-). Just to avoid confusion, it\u2019s copied here. It can also\
      \ be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html\
      \ . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5\
      \ 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A\u2019 A\u2019\u2019 4: d2 A B1 B2\
      \ B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u\
      \ B3u"
    type: integer
  DMRG_LOCAL_INIT:
    default: 'true'
    description: Whether to start the active space localization process from a random
      unitary matrix instead of a unit matrix.
    type: boolean
  DMRG_MOLDEN_WRITE:
    default: 'false'
    description: DMRG-CI or converged DMRG-SCF orbitals in molden format
    type: boolean
  DMRG_MPS_WRITE:
    default: 'false'
    description: Whether or not to create intermediary MPS checkpoints
    type: boolean
  DMRG_MULTIPLICITY:
    default: '-1'
    description: The DMRG wavefunction multiplicity in the form (2S+1)
    type: integer
  DMRG_OPDM_AO_PRINT:
    default: 'false'
    description: Print out the density matrix in the AO basis
    type: boolean
  DMRG_PRINT_CORR:
    default: 'false'
    description: Whether or not to print the correlation functions after the DMRG
      calculation
    type: boolean
  DMRG_SCF_ACTIVE_SPACE:
    default: INPUT
    description: "Which active space to use for DMRG calculations: \u2013> input with\
      \ SCF rotations (INPUT); \u2013> natural orbitals (NO); \u2013> localized and\
      \ ordered orbitals (LOC)"
    optional: INPUT, NO, LOC
    type: string
  DMRG_SCF_DIIS_THR:
    default: 1e-2
    description: When the update norm is smaller than this value DIIS starts.
    type: double
  DMRG_SCF_GRAD_THR:
    default: '1.e-6'
    description: The density RMS convergence to stop an instruction during successive
      DMRG instructions
    type: double
  DMRG_SCF_MAX_ITER:
    default: '100'
    description: Maximum number of DMRG iterations
    type: integer
  DMRG_SCF_STATE_AVG:
    default: 'true'
    description: Whether or not to use state-averaging for roots >=2 with DMRG-SCF.
    type: boolean
  DMRG_SWEEP_DVDSON_RTOL:
    default: Default
    description: The residual tolerances for the Davidson diagonalization during DMRG
      instructions
    type: array
  DMRG_SWEEP_ENERGY_CONV:
    default: Default
    description: The energy convergence to stop an instruction during successive DMRG
      instructions
    type: array
  DMRG_SWEEP_MAX_SWEEPS:
    default: Default
    description: The maximum number of sweeps to stop an instruction during successive
      DMRG instructions
    type: array
  DMRG_SWEEP_NOISE_PREFAC:
    default: Default
    description: The noise prefactors for successive DMRG instructions
    type: array
  DMRG_SWEEP_STATES:
    default: Default
    description: The number of reduced renormalized basis states to be retained during
      successive DMRG instructions
    type: array
  DMRG_UNITARY_WRITE:
    default: 'true'
    description: Whether or not to store the unitary on disk (convenient for restarting).
    type: boolean
EFP:
  DERTYPE:
    default: NONE
    description: Do EFP gradient?
    optional: NONE, FIRST
    type: string
  EFP_DISP:
    default: 'true'
    description: Do include dispersion energy term in EFP computation?
    type: boolean
  EFP_DISP_DAMPING:
    default: OVERLAP
    description: Fragment-fragment dispersion damping type. TT is a damping formula
      by Tang and Toennies. OVERLAP is overlap-based dispersion damping.
    optional: TT, OVERLAP, OFF
    type: string
  EFP_ELST:
    default: 'true'
    description: Do include electrostatics energy term in EFP computation?
    type: boolean
  EFP_ELST_DAMPING:
    default: SCREEN
    description: Fragment-fragment electrostatic damping type. SCREEN is a damping
      formula based on screen group in the EFP potential. OVERLAP is damping that
      computes charge penetration energy.
    optional: SCREEN, OVERLAP, OFF
    type: string
  EFP_EXCH:
    default: 'true'
    description: Do include exchange repulsion energy term in EFP computation?
    type: boolean
  EFP_IND:
    default: 'true'
    description: Do include polarization energy term in EFP computation? (EFP_POL
      c. v1.1)
    type: boolean
  EFP_IND_DAMPING:
    default: TT
    description: Fragment-fragment polarization damping type. TT is a damping formula
      like Tang and Toennies. (EFP_POL_DAMPING c. v1.1)
    optional: TT, OFF
    type: string
  EFP_QM_ELST:
    default: 'true'
    description: Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST
      c. v1.1)
    type: boolean
  EFP_QM_IND:
    default: 'true'
    description: Do include polarization energy term in QM/EFP computation? (QMEFP_POL
      c. v1.1)
    type: boolean
  PRINT:
    default: '1'
    description: The amount of information printed to the output file.
    type: integer
  QMEFP:
    default: 'false'
    description: Do turn on QM/EFP terms?
    type: boolean
FINDIF:
  DISP_SIZE:
    default: '0.005'
    description: Displacement size in au for finite-differences.
    type: double
  FD_PROJECT:
    default: 'true'
    description: Do discount rotational degrees of freedom in a finite difference
      frequency calculation. Turned off at non-stationary geometries and in the presence
      of external perturbations.
    type: boolean
  GRADIENT_WRITE:
    default: 'false'
    description: Do write a gradient output file? If so, the filename will end in
      .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by
      the name of the output file plus the name of the current molecule.
    type: boolean
  HESSIAN_WRITE:
    default: 'false'
    description: Do write a hessian output file? If so, the filename will end in .hess,
      and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name
      of the output file plus the name of the current molecule.
    type: boolean
  NORMAL_MODES_WRITE:
    default: 'false'
    description: Do write a file containing the normal modes in Molden format? If
      so, the filename will end in .molden_normal_modes, and the prefix is determined
      by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the
      name of the current molecule.
    type: boolean
  POINTS:
    default: '3'
    description: Number of points for finite-differences (3 or 5)
    type: integer
FISAPT:
  CPHF_R_CONVERGENCE:
    default: 1e-8
    description: Convergence criterion for residual of the CPHF coefficients in the
      SAPT
    type: double
  CUBIC_BASIS_TOLERANCE:
    default: '1.0e-12'
    description: CubicScalarGrid basis cutoff.
    type: double
  CUBIC_BLOCK_MAX_POINTS:
    default: '1000'
    description: CubicScalarGrid maximum number of grid points per evaluation block.
    type: integer
  CUBIC_GRID_OVERAGE:
    default: Default
    description: CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults
      to 4.0 bohr each.
    type: array
  CUBIC_GRID_SPACING:
    default: Default
    description: CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to
      0.2 bohr each.
    type: array
  FISAPT_CHARGE_COMPLETENESS:
    default: '0.8'
    description: Amount of fragment charge completeness to distinguish link bonds
    type: double
  FISAPT_CUBE_DENSMAT:
    default: 'false'
    description: Generate cube files for fragment density matrices?
    type: boolean
  FISAPT_CUBE_LINKIBOS:
    default: 'false'
    description: Generate cube files for unsplit link orbitals (IBOs)?
    type: boolean
  FISAPT_CUBE_LINKIHOS:
    default: 'false'
    description: Generate cube files for split link orbitals (IHOs)?
    type: boolean
  FISAPT_DO_FSAPT:
    default: 'true'
    description: Do an F-SAPT analysis?
    type: boolean
  FISAPT_DO_FSAPT_DISP:
    default: 'true'
    description: Do F-SAPT Dispersion?
    type: boolean
  FISAPT_DO_PLOT:
    default: 'false'
    description: Plot a scalar-field analysis
    type: boolean
  FISAPT_EXCH_PARPERP:
    default: 'false'
    description: Calculate separate exchange corrections for parallel and perpendicular
      spin coupling of link orbitals? When false, only the averaged out exchange corrections
      are computed.
    type: boolean
  FISAPT_FSAPT_EXCH_SCALE:
    default: 'true'
    description: Do F-SAPT exchange scaling? (ratio of S^infty to S^2)
    type: boolean
  FISAPT_FSAPT_FILEPATH:
    default: fsapt/
    description: Filepath to drop F-SAPT data within input file directory
    type: string
  FISAPT_FSAPT_IND_RESPONSE:
    default: 'false'
    description: Do F-SAPT coupled response? (not recommended)
    type: boolean
  FISAPT_FSAPT_IND_SCALE:
    default: 'true'
    description: Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction)
    type: boolean
  FISAPT_FSSAPT_FILEPATH:
    default: s-fsapt/
    description: Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input
      file directory
    type: string
  FISAPT_LINK_ASSIGNMENT:
    default: C
    description: Where do sigma links go (to C, AB, or split into IHOs)?
    optional: C, AB, SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2
    type: string
  FISAPT_LINK_ORTHO:
    default: FRAGMENT
    description: Orthogonalization of link orbitals for FISAPT_LINK_ASSIGNMENT=SAOx/SIAOx
      Link A orthogonalized to A in whole (interacting) molecule or in the (noninteracting)
      fragment?
    optional: FRAGMENT, WHOLE, NONE
    type: string
  FISAPT_LINK_SELECTION:
    default: AUTOMATIC
    description: Specification algorithm for link bonds in ISAPT
    optional: AUTOMATIC, MANUAL
    type: string
  FISAPT_MANUAL_LINKS:
    default: Default
    description: "Manual link bond specification [[Atom1, Atom2], \u2026]"
    type: array
  FISAPT_MEM_SAFETY_FACTOR:
    default: '0.9'
    description: Memory safety factor for heavy FISAPT operations
    type: double
  FISAPT_PLOT_FILEPATH:
    default: plot/
    description: Filepath to drop scalar data within input file directory
    type: string
  INTS_TOLERANCE:
    default: '0.0'
    description: Schwarz screening threshold. Mininum absolute value below which TEI
      are neglected.
    type: double
  LOCAL_CONVERGENCE:
    default: '1.0e-12'
    description: Relative convergence in orbital localization
    type: double
  LOCAL_IBO_CONDITION:
    default: '1.0e-7'
    description: Condition number to use in IBO metric inversions
    type: double
  LOCAL_IBO_POWER:
    default: '4'
    description: IBO localization metric power
    type: integer
  LOCAL_IBO_STARS:
    default: Default
    description: IBO Centers for Pi Degeneracy
    type: array
  LOCAL_IBO_STARS_COMPLETENESS:
    default: '0.90'
    description: IBO Charge metric for classification as Pi
    type: double
  LOCAL_IBO_USE_STARS:
    default: 'false'
    description: IBO Stars procedure
    type: boolean
  LOCAL_MAXITER:
    default: '1000'
    description: Maximum iterations in localization
    type: integer
  LOCAL_USE_GHOSTS:
    default: 'false'
    description: Use ghost atoms in Pipek-Mezey or IBO metric
    type: boolean
  MAXITER:
    default: '50'
    description: Maximum number of iterations for CPHF
    type: integer
  MINAO_BASIS:
    default: CC-PVTZ-MINAO
    description: MinAO Basis for IBO
    type: string
  SSAPT0_SCALE:
    default: 'false'
    description: Do sSAPT0 exchange-scaling with F-SAPT
    type: boolean
FNOCC:
  ACTIVE_NAT_ORBS:
    default: Default
    description: An array containing the number of virtual natural orbitals per irrep
      (in Cotton order) so a user can specify the number of retained natural orbitals
      rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE
      and OCC_PERCENTAGE.
    type: array
  BRUECKNER_MAXITER:
    default: '20'
    description: Maximum number of iterations for Brueckner orbitals optimization
    type: integer
  CC_SCALE_OS:
    default: '1.27'
    description: Oppposite-spin scaling factor for SCS-CCSD
    type: double
  CC_SCALE_SS:
    default: '1.13'
    description: Same-spin scaling factor for SCS-CCSD
    type: double
  CC_TIMINGS:
    default: 'false'
    description: Do time each cc diagram?
    type: boolean
  CEPA_LEVEL:
    default: CEPA(0)
    description: "Which coupled-pair method is called? This parameter is used internally\
      \ by the python driver. Changing its value won\u2019t have any effect on the\
      \ procedure."
    type: string
  CEPA_NO_SINGLES:
    default: 'false'
    description: Flag to exclude singly excited configurations from a coupled-pair
      computation.
    type: boolean
  CHOLESKY_TOLERANCE:
    default: '1.0e-4'
    description: tolerance for Cholesky decomposition of the ERI tensor
    type: double
  COMPUTE_MP4_TRIPLES:
    default: 'false'
    description: Do compute MP4 triples contribution?
    type: boolean
  COMPUTE_TRIPLES:
    default: 'true'
    description: Do compute triples contribution?
    type: boolean
  DFCC:
    default: 'false'
    description: Do use density fitting or cholesky decomposition in CC? This keyword
      is used internally by the driver. Changing its value will have no effect on
      the computation.
    type: boolean
  DF_BASIS_CC:
    default: Default
    description: Auxilliary basis for df-ccsd(t).
    optional: basis string
    type: string
  DIIS_MAX_VECS:
    default: '8'
    description: Desired number of DIIS vectors
    type: integer
  DIPMOM:
    default: 'false'
    description: Compute the dipole moment? Note that dipole moments are only available
      in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods.
    type: boolean
  E_CONVERGENCE:
    default: '1.0e-6'
    description: Convergence criterion for CC energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types. Note that
      convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied.
    type: double
  MAXITER:
    default: '100'
    description: Maximum number of CC iterations
    type: integer
  MP2_SCALE_OS:
    default: '1.20'
    description: Opposite-spin scaling factor for SCS-MP2
    type: double
  MP2_SCALE_SS:
    default: '1.0'
    description: Same-spin scaling factor for SCS-MP2
    type: double
  NAT_ORBS:
    default: 'false'
    description: Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?
    type: boolean
  OCC_PERCENTAGE:
    default: '99.0'
    description: Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The
      number of virtual NOs is chosen so the occupation of the truncated virtual space
      is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This
      option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE.
    type: double
  OCC_TOLERANCE:
    default: '1.0e-6'
    description: Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual
      NOs with occupations less than OCC_TOLERANCE will be discarded. This option
      is only used if NAT_ORBS = true.
    type: double
  RUN_CCSD:
    default: 'false'
    description: do ccsd rather than qcisd?
    type: boolean
  RUN_CEPA:
    default: 'false'
    description: "Is this a CEPA job? This parameter is used internally by the pythond\
      \ driver. Changing its value won\u2019t have any effect on the procedure."
    type: boolean
  RUN_MP2:
    default: 'false'
    description: do only evaluate mp2 energy?
    type: boolean
  RUN_MP3:
    default: 'false'
    description: do only evaluate mp3 energy?
    type: boolean
  RUN_MP4:
    default: 'false'
    description: do only evaluate mp4 energy?
    type: boolean
  R_CONVERGENCE:
    default: '1.0e-7'
    description: Convergence for the CC amplitudes. Note that convergence is met only
      when E_CONVERGENCE and R_CONVERGENCE are satisfied.
    type: double
  SCS_CCSD:
    default: 'false'
    description: Do SCS-CCSD?
    type: boolean
  SCS_CEPA:
    default: 'false'
    description: Do SCS-CEPA? Note that the scaling factors will be identical to those
      for SCS-CCSD.
    type: boolean
  SCS_MP2:
    default: 'false'
    description: Do SCS-MP2?
    type: boolean
  TRIPLES_LOW_MEMORY:
    default: 'true'
    description: Do use low memory option for triples contribution? Note that this
      option is enabled automatically if the memory requirements of the conventional
      algorithm would exceed the available resources. The low memory algorithm is
      faster in general and has been turned on by default starting September 2020.
    type: boolean
  USE_DF_INTS:
    default: 'false'
    description: "Use 3-index integrals to generate 4-index ERI\u2019s? This keyword\
      \ is used for testing purposes only. Changing its value will have no effect\
      \ on the computation."
    type: boolean
GDMA:
  GDMA_LIMIT:
    default: '2'
    description: The order of multipole expansion on each site. Currently limited
      to the same order for all sites; for more advanced usage a user-provided GDMA
      data file should be provided.
    type: integer
  GDMA_MULTIPOLE_UNITS:
    default: SI
    description: Whether to print DMA results in atomic units or SI.
    optional: AU
    type: string
  GDMA_ORIGIN:
    default: Default
    description: The origin (in Angstrom, expressed as an [x, y, z] array) about which
      the total multipoles will be computed during DMA. Useful for determining single
      site expansions at an arbitrary point.
    type: array
  GDMA_RADIUS:
    default: Default
    description: "The radii to be used, overriding the defaults. Specified as an array\
      \ [ n1, r1, n2, r2, \u2026 ] where n1,n2,n3\u2026 are atom type strings and\
      \ r1,r2,r3 are radii in Angstrom."
    type: array
  GDMA_SWITCH:
    default: '4.0'
    description: The value to switch between the older standard DMA and the new grid-based
      approach. Pairs of primitives whose exponents sum is above this value will be
      treated using standard DMA. Set to 0 to force all pairs to be treated with standard
      DMA.
    type: double
GLOBALS:
  ACTIVE:
    default: Default
    description: An array giving the number of active orbitals (occupied plus unoccupied)
      per irrep (shorthand to make MCSCF easier to specify than using RAS keywords)
    type: array
  BASIS_RELATIVISTIC:
    default: Default
    description: Auxiliary basis set for solving Dirac equation in X2C and DKH calculations.
      Defaults to decontracted orbital basis.
    type: string
  BENCH:
    default: '0'
    description: Some codes (DFT) can dump benchmarking data to separate output files
    type: integer
  BRIANQC_ENABLE:
    default: 'false'
    description: Whether to enable using the BrianQC GPU module
    type: boolean
  CC_TYPE:
    default: CONV
    description: Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T),
      CEPA(3), ACPF, REMP). See Cross-module Redundancies for details.
    optional: DF, CONV, CD
    type: string
  CI_TYPE:
    default: CONV
    description: Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module
      Redundancies for details.
    optional: CONV
    type: string
  CUBEPROP_BASIS_FUNCTIONS:
    default: Default
    description: List of basis function indices for which cube files are generated
      (1-based). All basis functions computed if empty.
    type: array
  CUBEPROP_FILEPATH:
    default: Default
    description: Directory to which to write cube files. Default is the input file
      directory.
    type: string
  CUBEPROP_ISOCONTOUR_THRESHOLD:
    default: '0.85'
    description: Fraction of density captured by adaptive isocontour values
    type: double
  CUBEPROP_ORBITALS:
    default: Default
    description: List of orbital indices for which cube files are generated (1-based,
    type: array
  CUBEPROP_TASKS:
    default: Default
    description: 'Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt,
      Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL
      - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO;
      DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO.'
    type: array
  CUBIC_BASIS_TOLERANCE:
    default: '1.0e-12'
    description: CubicScalarGrid basis cutoff.
    type: double
  CUBIC_BLOCK_MAX_POINTS:
    default: '1000'
    description: CubicScalarGrid maximum number of grid points per evaluation block.
    type: integer
  CUBIC_GRID_OVERAGE:
    default: Default
    description: CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults
      to 4.0 bohr each.
    type: array
  CUBIC_GRID_SPACING:
    default: Default
    description: CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to
      0.2 bohr each.
    type: array
  DDX:
    default: 'false'
    description: DDX boolean for ddx module
    type: boolean
  DEBUG:
    default: '0'
    description: The amount of information to print to the output file
    type: integer
  DERTYPE:
    default: NONE
    description: Derivative level
    optional: NONE, FIRST, SECOND, RESPONSE
    type: string
  DF_BASIS_CC:
    default: Default
    description: The density fitting basis to use in coupled cluster computations.
    optional: basis string
    type: string
  DIE_IF_NOT_CONVERGED:
    default: 'true'
    description: Psi4 dies if energy does not converge.
    type: boolean
  DKH_ORDER:
    default: '2'
    description: Order of Douglas-Kroll-Hess
    type: integer
  DOCC:
    default: Default
    description: An array containing the number of doubly-occupied orbitals per irrep
      (in Cotton order)
    type: array
  EXTERNAL_POTENTIAL_SYMMETRY:
    default: 'false'
    description: Assume external fields are arranged so that they have symmetry. It
      is up to the user to know what to do here. The code does NOT help you out in
      any way!
    type: boolean
  FREEZE_CORE:
    default: 'FALSE'
    description: Specifies how many core orbitals to freeze in correlated computations.
      TRUE or 1 will default to freezing the previous noble gas shell on each atom.
      In case of positive charges on fragments, an additional shell may be unfrozen,
      to ensure there are valence electrons in each fragment. With FALSE or 0, no
      electrons are frozen (with the exception of electrons treated by an ECP). With
      -1, -2, and -3, the user might request strict freezing of the previous first/second/third
      noble gas shell on every atom. In this case, when there are no valence electrons,
      the code raises an exception. More precise control over the number of frozen
      orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total
      number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC
      (gives the number of orbitals to freeze per irreducible representation) or by
      the option POLICY in combination with appropriate inputs to FREEZE_CORE_POLICY.
      At present, POLICY is an experimental option and is subject to change.
    optional: FALSE, TRUE, 1, 0, -1, -2, -3, POLICY
    type: string
  FREEZE_CORE_POLICY:
    default: Default
    description: 'NOTE: This is an experimental feature and subject to change! Specifies
      a custom frozen-core policy on a per-element basis. Input should be a list of
      integers representing the number of orbitals to freeze for each atomic number
      MINUS one (so H is 0, He is 1, etc). For example, to specify that elements H-Be
      should have 0 frozen orbitals, B-Mg should have 1, and Al should have 2, you
      would provide the input [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]. Please make
      sure to fill in the list up to the highest atomic number included in any calculations.
      This option is only used if FREEZE_CORE is set to POLICY.'
    type: array
  FROZEN_DOCC:
    default: Default
    description: An array containing the number of frozen doubly-occupied orbitals
      per irrep (these are not excited in a correlated wavefunction, nor can they
      be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE.
    type: array
  FROZEN_UOCC:
    default: Default
    description: An array containing the number of frozen unoccupied orbitals per
      irrep (these are not populated in a correlated wavefunction, nor can they be
      optimized in MCSCF. This trumps NUM_FROZEN_UOCC.
    type: array
  INTEGRAL_PACKAGE:
    default: LIBINT2
    description: Integral package to use. If compiled with Simint support, change
      this option to use them; LibInt2 is used otherwise.
    optional: LIBINT2, SIMINT
    type: string
  LITERAL_CFOUR:
    default: Default
    description: Text to be passed directly into CFOUR input files. May contain molecule,
      options, percent blocks, etc. Access through cfour {...} block.
    type: string
  LS_THC_BASIS_TOLERANCE:
    default: '1.0e-10'
    description: Screening criteria for basis function values on LS-THC grids
    type: double
  LS_THC_DF:
    default: 'true'
    description: Use DF approximation when computing LS-THC factorization?
    type: boolean
  LS_THC_PRUNING_SCHEME:
    default: ROBUST
    description: Pruning scheme for LS-THC grids
    type: string
  LS_THC_RADIAL_POINTS:
    default: '10'
    description: Number of radial points in LS-THC grid
    type: integer
  LS_THC_SPHERICAL_POINTS:
    default: '50'
    description: Number of spherical points in LS-THC grid
    type: integer
  LS_THC_S_EPSILON:
    default: '1.0e-10'
    description: Tolerance for pseudoinversion of grid point overlap matrix (Parrish
      2012 eq. 30)
    type: double
  LS_THC_WEIGHTS_TOLERANCE:
    default: '1.0e-12'
    description: Grid weights cutoff for LS-THC grids
    type: double
  MAT_NUM_COLUMN_PRINT:
    default: '5'
    description: Number of columns to print in calls to Matrix::print_mat.
    type: integer
  MAX_RADIAL_MOMENT:
    default: '4'
    description: Maximum Radial Moment to Calculate
    type: integer
  MBIS_D_CONVERGENCE:
    default: '1.0e-8'
    description: MBIS Convergence Criteria
    type: double
  MBIS_MAXITER:
    default: '500'
    description: Maximum Number of MBIS Iterations
    type: integer
  MBIS_PRUNING_SCHEME:
    default: ROBUST
    description: Pruning scheme for MBIS Grid
    type: string
  MBIS_RADIAL_POINTS:
    default: '75'
    description: MBIS Number of Radial Points
    type: integer
  MBIS_SPHERICAL_POINTS:
    default: '302'
    description: MBIS Number of Spherical Points
    type: integer
  MOLDEN_WITH_VIRTUAL:
    default: 'true'
    description: Write all the MOs to the MOLDEN file (true) or discard the unoccupied
      MOs (false).
    type: boolean
  MP2_TYPE:
    default: DF
    description: Algorithm to use for MP2 computation. See Cross-module Redundancies
      for details.
    optional: DF, CONV, CD
    type: string
  MP_TYPE:
    default: CONV
    description: Algorithm to use for MPn (
    optional: DF, CONV, CD
    type: string
  NUM_FROZEN_DOCC:
    default: '0'
    description: The number of core orbitals to freeze in later correlated computations.
      This trumps FREEZE_CORE.
    type: integer
  NUM_FROZEN_UOCC:
    default: '0'
    description: The number of virtual orbitals to freeze in later correlated computations.
    type: integer
  PARENT_SYMMETRY:
    default: Default
    description: "For displacements, symmetry (Schoenflies symbol) of \u2018parent\u2019\
      \ (undisplaced) reference molecule. Internal use only for finite difference."
    type: string
  PCM:
    default: 'false'
    description: PCM boolean for pcmsolver module
    type: boolean
  PE:
    default: 'false'
    description: PE boolean for polarizable embedding module
    type: boolean
  PRINT:
    default: '1'
    description: The amount of information to print to the output file. 1 prints basic
      information, and higher levels print more information. A value of 5 will print
      very large amounts of debugging information.
    type: integer
  PRINT_NOONS:
    default: '3'
    description: "How many NOONS to print \u2013 used in libscf_solver/uhf.cc and\
      \ libmints/oeprop.cc"
    type: string
  PROPERTIES:
    default: Default
    description: List of properties to compute
    type: array
  PROPERTIES_ORIGIN:
    default: Default
    description: Either a set of 3 coordinates or a string describing the origin about
      which one-electron properties are computed.
    type: array
  PUREAM:
    default: 'true'
    description: 'Do use pure angular momentum basis functions? If not explicitly
      set, the default comes from the basis set. Cfour Interface: Keyword translates
      into CFOUR_SPHERICAL.'
    type: boolean
  QC_MODULE:
    default: Default
    description: When several modules can compute the same methods and the default
      routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc.
      OCC covers OCC and DFOCC.
    optional: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC
    type: string
  RAS1:
    default: Default
    description: An array giving the number of orbitals per irrep for RAS1
    type: array
  RAS2:
    default: Default
    description: An array giving the number of orbitals per irrep for RAS2
    type: array
  RAS3:
    default: Default
    description: An array giving the number of orbitals per irrep for RAS3
    type: array
  RAS4:
    default: Default
    description: An array giving the number of orbitals per irrep for RAS4
    type: array
  RELATIVISTIC:
    default: 'NO'
    description: Relativistic Hamiltonian type
    optional: NO, X2C
    type: string
  RESTRICTED_DOCC:
    default: Default
    description: An array giving the number of restricted doubly-occupied orbitals
      per irrep (not excited in CI wavefunctions, but orbitals can be optimized in
      MCSCF)
    type: array
  RESTRICTED_UOCC:
    default: Default
    description: An array giving the number of restricted unoccupied orbitals per
      irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF)
    type: array
  SCF_TYPE:
    default: PK
    description: What algorithm to use for the SCF computation. See Table SCF Convergence
      & Algorithm for default algorithm for different calculation types.
    optional: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, DFDIRJ, DFDIRJ+COSX,
      DFDIRJ+LINK, DFDIRJ+SNLINK
    type: string
  SCREENING:
    default: CSAM
    description: The type of screening used when computing two-electron integrals.
    optional: SCHWARZ, CSAM, DENSITY, NONE
    type: string
  SOCC:
    default: Default
    description: An array containing the number of singly-occupied orbitals per irrep
      (in Cotton order). The value of DOCC should also be set.
    type: array
  WFN:
    default: SCF
    description: Wavefunction type
    type: string
  WRITER_FILE_LABEL:
    default: Default
    description: Base filename for text files written by PSI, such as the MOLDEN output
      file, the Hessian file, the internal coordinate file, etc. Use the add_str_i
      function to make this string case sensitive.
    type: string
MCSCF:
  CANONICALIZE_ACTIVE_FAVG:
    default: 'false'
    description: Do canonicalize the active orbitals such that the average Fock matrix
      is diagonal?
    type: boolean
  CANONICALIZE_INACTIVE_FAVG:
    default: 'false'
    description: Do canonicalize the inactive (DOCC and Virtual) orbitals such that
      the average Fock matrix is diagonal?
    type: boolean
  CI_DIIS:
    default: 'false'
    description: Do use DIIS extrapolation to accelerate convergence of the CI coefficients?
    type: boolean
  DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate convergence of the SCF energy
      (MO coefficients only)?
    type: boolean
  DIIS_MAX_VECS:
    default: '7'
    description: Maximum number of error vectors stored for DIIS extrapolation
    type: integer
  DOCC:
    default: Default
    description: The number of doubly occupied orbitals, per irrep
    type: array
  D_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for density, as measured by the orbital gradient.
    type: double
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for energy.
    type: double
  FAVG:
    default: 'false'
    description: Do use the average Fock matrix during the SCF optimization?
    type: boolean
  FAVG_START:
    default: '5'
    description: Iteration at which to begin using the averaged Fock matrix
    type: integer
  FOLLOW_ROOT:
    default: '1'
    description: Which solution of the SCF equations to find, where 1 is the SCF ground
      state
    type: integer
  FORCE_TWOCON:
    default: 'false'
    description: Do attempt to force a two configuration solution by starting with
      CI coefficents of
    type: boolean
  INTERNAL_ROTATIONS:
    default: 'true'
    description: Do consider internal rotations?
    type: boolean
  LEVEL_SHIFT:
    default: '0.0'
    description: Level shift to aid convergence
    type: double
  MAXITER:
    default: '100'
    description: Maximum number of iterations
    type: integer
  MO_READ:
    default: 'true'
    description: Do read in from file the MOs from a previous computation?
    type: boolean
  REFERENCE:
    default: RHF
    description: Reference wavefunction type
    optional: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL
    type: string
  ROTATE_MO_ANGLE:
    default: '0.0'
    description: For orbital rotations after convergence, the angle (in degrees) by
      which to rotate.
    type: double
  ROTATE_MO_IRREP:
    default: '1'
    description: For orbital rotations after convergence, irrep (1-based, Cotton order)
      of the orbitals to rotate.
    type: integer
  ROTATE_MO_P:
    default: '1'
    description: For orbital rotations after convergence, number of the first orbital
      (1-based) to rotate.
    type: integer
  ROTATE_MO_Q:
    default: '2'
    description: For orbital rotations after convergence, number of the second orbital
      (1-based) to rotate.
    type: integer
  SOCC:
    default: Default
    description: The number of singly occupied orbitals, per irrep
    type: array
  TURN_ON_ACTV:
    default: '0'
    description: ''
    type: integer
  WFN_SYM:
    default: '1'
    description: The symmetry of the SCF wavefunction.
    type: string
MINTS:
  BASIS:
    default: Default
    description: Primary basis set. Available basis sets
    optional: basis string
    type: string
  OMEGA_ERF:
    default: '0.20'
    description: Omega scaling for Erf and Erfc.
    type: double
MRCC:
  E_CONVERGENCE:
    default: 1e-6
    description: 'Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types. This becomes
      tol (option #16) in fort.56.'
    type: double
  INTS_TOLERANCE:
    default: '1.0e-12'
    description: Schwarz screening threshold. Mininum absolute value below which TEI
      are neglected.
    type: double
  MRCC_LEVEL:
    default: '2'
    description: 'Maximum excitation level. This is used ONLY if it is explicitly
      set by the user. Single-reference case: all excitations up to this level are
      included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev
      (option #1) in fort.56.'
    type: integer
  MRCC_METHOD:
    default: '1'
    description: 'If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation
      is performed automatically for the excited states. This overrides all automatic
      determination of method and will only work with energy(). This becomes CC/CI
      (option #5) in fort.56. See Table MRCC_METHOD for details.'
    type: integer
  MRCC_NUM_DOUBLET_ROOTS:
    default: '0'
    description: 'Number of root in case of open shell system. This becomes ndoub
      (option #13) int fort.56.'
    type: integer
  MRCC_NUM_SINGLET_ROOTS:
    default: '1'
    description: 'Number of singlet roots. (Strictly speaking number of of roots with
      M_s=0 and S is even.) Use this option only with closed shell reference determinant,
      it must be zero otherwise. This becomes nsing (option #2) in fort.56.'
    type: integer
  MRCC_NUM_TRIPLET_ROOTS:
    default: '0'
    description: Number of triplet roots. (Strictly speaking number of of roots with
    type: integer
  MRCC_OMP_NUM_THREADS:
    default: '1'
    description: Sets the OMP_NUM_THREADS environment variable before calling MRCC.
      If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then
      that value is used. When set, this option overrides everything. Be aware the
      -n command-line option described in section Threading does not affect MRCC.
    type: integer
  MRCC_RESTART:
    default: '0'
    description: 'The program restarts from the previously calculated parameters if
      it is 1. In case it is 2, the program executes automatically the lower-level
      calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if
      CCSDTQ is requested) and restarts each calculation from the previous one (rest=2
      is available only for energy calculations). Currently, only a value of 0 and
      2 are supported. This becomes rest (option #4) in fort.56.'
    type: integer
OCC:
  CACHELEVEL:
    default: '2'
    description: Caching level for libdpd governing the storage of amplitudes, integrals,
      and intermediates in the CC procedure. A value of 0 retains no quantities in
      cache, while a level of 6 attempts to store all quantities in cache. For particularly
      large calculations, a value of 0 may help with certain types of memory problems.
      The default is 2, which means that all four-index quantities with up to two
      virtual-orbital indices (e.g.,
    type: integer
  CCL_ENERGY:
    default: 'false'
    description: "Do compute CC Lambda energy? In order to this option to be valid\
      \ one should use \u201CTPDM_ABCD_TYPE = COMPUTE\u201D option."
    type: boolean
  CC_MAXITER:
    default: '50'
    description: Maximum number of iterations to determine the amplitudes
    type: integer
  CEPA_OS_SCALE:
    default: '1.27'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  CEPA_SOS_SCALE:
    default: '1.3'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  CEPA_SS_SCALE:
    default: '1.13'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  CEPA_TYPE:
    default: CEPA0
    description: CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0.
    optional: CEPA0
    type: string
  CUTOFF:
    default: '14'
    description: Cutoff value for numerical procedures
    type: integer
  DIIS_MAX_VECS:
    default: '6'
    description: Maximum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_MIN_VECS:
    default: '2'
    description: Minimum number of error vectors stored for DIIS extrapolation
    type: integer
  DO_DIIS:
    default: 'true'
    description: Do apply DIIS extrapolation?
    type: boolean
  DO_LEVEL_SHIFT:
    default: 'true'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: boolean
  DO_SCS:
    default: 'false'
    description: Removed in 1.4. Will raise an error in 1.5. Pass the method name,
      like scs-mp2, to energy instead.
    type: boolean
  DO_SOS:
    default: 'false'
    description: Removed in 1.4. Will raise an error in 1.5. Pass the method name,
      like scs-mp2, to energy instead.
    type: boolean
  E3_SCALE:
    default: '0.25'
    description: Scaling value for 3rd order energy correction (S. Grimme, Vol. 24,
      pp. 1529, J. Comput. Chem.)
    type: double
  EA_POLES:
    default: 'false'
    description: Do compute OCC poles for electron affinities? Only valid for OMP2.
    type: boolean
  EKT_EA:
    default: 'false'
    description: "Do compute virtual orbital energies based on extended Koopmans\u2019\
      \ theorem?"
    type: boolean
  EKT_IP:
    default: 'false'
    description: "Do compute occupied orbital energies based on extended Koopmans\u2019\
      \ theorem?"
    type: boolean
  EP_EA_POLES:
    default: 'false'
    description: Do compute EP-OCC poles for electron affinities? Only valid for OMP2.
    type: boolean
  EP_IP_POLES:
    default: 'false'
    description: Do compute EP-OCC poles for ionization potentials? Only valid OMP2.
    type: boolean
  EP_MAXITER:
    default: '30'
    description: Maximum number of electron propagator iterations.
    type: integer
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  IP_POLES:
    default: 'false'
    description: Do compute OCC poles for ionization potentials? Only valid OMP2.
    type: boolean
  LEVEL_SHIFT:
    default: '0.02'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  MAX_MOGRAD_CONVERGENCE:
    default: 1e-4
    description: Convergence criterion for maximum orbital gradient. If this keyword
      is not set by the user, OCC will estimate and use a value required to achieve
      the desired E_CONVERGENCE. The listed default will be used for the default value
      of E_CONVERGENCE.
    type: double
  MOGRAD_DAMPING:
    default: '1.0'
    description: Damping factor for the orbital gradient (Rendell et al., JCP, vol.
      87, pp. 5976, 1987)
    type: double
  MO_MAXITER:
    default: '50'
    description: Maximum number of iterations to determine the orbitals
    type: integer
  MO_READ:
    default: 'false'
    description: Do read coefficient matrices from external files of a previous OMP2
      or OMP3 computation?
    type: boolean
  MO_STEP_MAX:
    default: '0.5'
    description: Maximum step size in orbital-optimization procedure
    type: double
  MO_WRITE:
    default: 'false'
    description: Do write coefficient matrices to external files for direct reading
      MOs in a subsequent job?
    type: boolean
  MP2_OS_SCALE:
    default: '6.0'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  MP2_SOS_SCALE:
    default: '1.3'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  MP2_SOS_SCALE2:
    default: '1.2'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  MP2_SS_SCALE:
    default: '1.0'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: double
  NAT_ORBS:
    default: 'false'
    description: Do compute natural orbitals?
    type: boolean
  OCC_ORBS_PRINT:
    default: 'false'
    description: Do print OCC orbital energies?
    type: boolean
  OEPROP:
    default: 'false'
    description: Do compute one electron properties?
    type: boolean
  OPT_METHOD:
    default: MSD
    description: The optimization algorithm. Modified Steepest-Descent (MSD) takes
      a Newton-Raphson (NR) step with a crude approximation to diagonal elements of
      the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters
      with a crude approximation to all elements of the MO Hessian. Additionally,
      for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE
      option.
    optional: MSD, ORB_RESP
    type: string
  ORB_OPT:
    default: 'true'
    description: Do optimize the orbitals?
    type: boolean
  ORB_RESP_SOLVER:
    default: PCG
    description: The algorithm will be used for solving the orbital-response equations.
      The LINEQ option create the MO Hessian and solve the simultaneous linear equations
      with method choosen by the LINEQ_SOLVER option. The PCG option does not create
      the MO Hessian explicitly, instead it solves the simultaneous equations iteratively
      with the preconditioned conjugate gradient method.
    optional: PCG, LINEQ
    type: string
  ORTH_TYPE:
    default: MGS
    description: The algorithm for orthogonalization of MOs
    optional: GS, MGS
    type: string
  OS_SCALE:
    default: '1'
    description: A custom scaling parameter for opposite-spin terms in OCC. The result
      goes to a CUSTOM SCS variable, exact name method-dependent.
    type: double
  PCG_BETA_TYPE:
    default: FLETCHER_REEVES
    description: Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere).
    optional: FLETCHER_REEVES, POLAK_RIBIERE
    type: string
  PCG_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for residual vector of preconditioned conjugate
      gradient method.
    type: double
  PCG_MAXITER:
    default: '30'
    description: Maximum number of preconditioned conjugate gradient iterations.
    type: integer
  RELAXED:
    default: 'true'
    description: Do consider orbital response contributions for PDMs and GFM?
    type: boolean
  REMP_A:
    default: 0.15e0
    description: mixing parameter for the REMP hybrid perturbation theory, A specifies
      the Moller-Plesset fraction
    type: double
  RMS_MOGRAD_CONVERGENCE:
    default: 1e-4
    description: Convergence criterion for RMS orbital gradient. If this keyword is
      not set by the user, OCC will estimate and use a value required to achieve the
      desired E_CONVERGENCE. The listed default will be used for the default value
      of E_CONVERGENCE.
    type: double
  R_CONVERGENCE:
    default: 1e-5
    description: Convergence criterion for amplitudes (residuals).
    type: double
  SCS_TYPE:
    default: SCS
    description: Type of the SCS method
    optional: SCS, SCSN, SCSVDW, SCSMI
    type: string
  SOS_TYPE:
    default: SOS
    description: Type of the SOS method
    optional: SOS, SOSPI
    type: string
  SPIN_SCALE_TYPE:
    default: NONE
    description: Controls the spin scaling set to current energy. This is set by Psi
      internally.
    optional: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI
    type: string
  SS_SCALE:
    default: '1'
    description: A custom scaling parameter for same-spin terms in OCC. The result
      goes to a CUSTOM SCS variable, exact name method-dependent.
    type: double
  SYMMETRIZE:
    default: 'true'
    description: Do symmetrize the GFM and OPDM in the EKT computations?
    type: boolean
  TPDM_ABCD_TYPE:
    default: DIRECT
    description: How to take care of the TPDM VVVV-block. The COMPUTE option means
      it will be computed via an IC/OOC algorithm. The DIRECT option (default) means
      it will not be computed and stored, instead its contribution will be directly
      added to Generalized-Fock Matrix.
    optional: DIRECT, COMPUTE
    type: string
  WFN_TYPE:
    default: OMP2
    description: Type of the wavefunction.
    optional: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP
    type: string
OPTKING:
  ADD_AUXILIARY_BONDS:
    default: 'true'
    description: Do add bond coordinates at nearby atoms for non-bonded systems?
    type: boolean
  AUXILIARY_BOND_FACTOR:
    default: '2.5'
    description: This factor times standard covalent distance is used to add extra
      stretch coordinates.
    type: double
  CARTESIAN_SYM_TOLERANCE:
    default: 1e-7
    description: Tolerance for symmetrizing cartesian geometry between steps
    type: double
  CART_HESS_READ:
    default: 'false'
    description: Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY
      instead.
    type: boolean
  CONSECUTIVE_BACKSTEPS:
    default: '0'
    description: Set number of consecutive backward steps allowed in optimization
    type: integer
  COVALENT_CONNECT:
    default: '1.3'
    description: When determining connectivity, a bond is assigned if interatomic
      distance is less than (this number) * sum of covalent radii.
    type: double
  CUSTOM_COORDS:
    default: Default
    description: "A string formatted as a dicitonary containing a set of coordinates.\
      \ Coordinates can be appended to Optking\u2019s coordinate set or used on their\
      \ own - expected optking 0.3.1."
    type: string
  DYNAMIC_LEVEL:
    default: '0'
    description: Starting level for dynamic optimization (0=nondynamic, higher=>more
      conservative)
    type: integer
  ENSURE_BT_CONVERGENCE:
    default: 'false'
    description: Reduce step size as necessary to ensure back-transformation of internal
      coordinate step to cartesian coordinates.
    type: boolean
  EXT_FORCE_BEND:
    default: Default
    description: Specify formula for external forces for angles between atoms
    type: string
  EXT_FORCE_CARTESIAN:
    default: Default
    description: Symmetry formula for external forces for cartesian coordinates on
      atoms .
    type: string
  EXT_FORCE_DIHEDRAL:
    default: Default
    description: Specify formula for external forces for dihedral angles between atoms
    type: string
  EXT_FORCE_DISTANCE:
    default: Default
    description: Specify formula for external forces for the distance between atoms
    type: string
  EXT_FORCE_OOFP:
    default: Default
    description: Specify formula for external forces for out-of-plane angles between
      atoms
    type: string
  FLEXIBLE_G_CONVERGENCE:
    default: 'false'
    description: Even if a user-defined threshold is set, allow for normal, flexible
      convergence criteria
    type: boolean
  FRAG_MODE:
    default: SINGLE
    description: For multi-fragment molecules, treat as single bonded molecule or
      via interfragment coordinates. A primary difference is that in MULTI mode, the
      interfragment coordinates are not redundant.
    optional: SINGLE, MULTI
    type: string
  FRAG_REF_ATOMS:
    default: Default
    description: Specify atoms to use for reference points in interfragment coordinates
    type: array
  FREEZE_ALL_DIHEDRALS:
    default: 'false'
    description: Freeze ALL dihedral angles
    type: boolean
  FREEZE_INTERFRAG:
    default: 'false'
    description: Do freeze all interfragment modes?
    type: boolean
  FREEZE_INTRAFRAG:
    default: 'false'
    description: Do freeze all fragments rigid?
    type: boolean
  FROZEN_BEND:
    default: Default
    description: Specify angles between atoms to be frozen (unchanged)
    type: string
  FROZEN_CARTESIAN:
    default: Default
    description: "Specify atom and X, XY, XYZ, \u2026 to be frozen (unchanged)"
    type: string
  FROZEN_DIHEDRAL:
    default: Default
    description: Specify dihedral angles between atoms to be frozen (unchanged)
    type: string
  FROZEN_DISTANCE:
    default: Default
    description: Specify distances between atoms to be frozen (unchanged)
    type: string
  FROZEN_OOFP:
    default: Default
    description: Specify out-of-plane angles between atoms to be frozen (unchanged)
    type: string
  FULL_HESS_EVERY:
    default: '-1'
    description: Frequency with which to compute the full Hessian in the course of
      a geometry optimization. 0 means to compute the initial Hessian only, 1 means
      recompute every step, and N means recompute every N steps. The default (-1)
      is to never compute the full Hessian.
    type: integer
  GEOM_MAXITER:
    default: '50'
    description: Maximum number of geometry optimization steps
    type: integer
  G_CONVERGENCE:
    default: QCHEM
    description: Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE
      or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here
      unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for
      details.
    optional: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT,
      TURBOMOLE, CFOUR, NWCHEM_LOOSE
    type: string
  HESS_UPDATE:
    default: BFGS
    description: Hessian update scheme
    optional: NONE, BFGS, MS, POWELL, BOFILL
    type: string
  HESS_UPDATE_LIMIT:
    default: 'true'
    description: Do limit the magnitude of changes caused by the Hessian update?
    type: boolean
  HESS_UPDATE_LIMIT_MAX:
    default: '1.00'
    description: If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update
      are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value)
      and HESS_UPDATE_LIMIT_MAX [au].
    type: double
  HESS_UPDATE_LIMIT_SCALE:
    default: '0.50'
    description: If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update
      are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value)
      and HESS_UPDATE_LIMIT_MAX [au].
    type: double
  HESS_UPDATE_USE_LAST:
    default: '4'
    description: Number of previous steps to use in Hessian update, 0 uses all
    type: integer
  H_BOND_CONNECT:
    default: '4.3'
    description: For now, this is a general maximum distance for the definition of
      H-bonds
    type: double
  H_GUESS_EVERY:
    default: 'false'
    description: Re-estimate the Hessian at every step, i.e., ignore the currently
      stored Hessian.
    type: boolean
  H_UPDATE_DEN_TOL:
    default: 1e-7
    description: Denominator check for hessian update.
    type: double
  INTCOS_GENERATE_EXIT:
    default: 'false'
    description: Do only generate the internal coordinates and then stop?
    type: boolean
  INTERFRAGMENT_CONNECT:
    default: '1.8'
    description: "When connecting disparate fragments when frag_mode = SIMPLE, a \u201C\
      bond\u201D is assigned if interatomic distance is less than (this number) *\
      \ sum of covalent radii. The value is then increased until all the fragments\
      \ are connected (directly or indirectly)."
    type: double
  INTERFRAG_COLLINEAR_TOL:
    default: '0.01'
    description: Tolerance for whether to reject a set of generated reference atoms
      due to collinearity
    type: double
  INTERFRAG_COORDS:
    default: Default
    description: "Dictionary to define a dimer. Contains \u201CNatoms per frag\u201D\
      , \u201CA Frag\u201D, \u201CA Ref Atoms\u201D, \u201CB Frag\u201D, and \u201C\
      B Ref Atoms\u201D"
    type: string
  INTERFRAG_DIST_INV:
    default: 'false'
    description: Use 1/R for the interfragment stretching coordinate instead of R
    type: boolean
  INTERFRAG_HESS:
    default: DEFAULT
    description: Model Hessian to guess interfragment force constants
    optional: DEFAULT, FISCHER_LIKE
    type: string
  INTERFRAG_MODE:
    default: FIXED
    description: When interfragment coordinates are present, use as reference points
      either principal axes or fixed linear combinations of atoms.
    optional: FIXED, PRINCIPAL_AXES
    type: string
  INTERFRAG_STEP_LIMIT:
    default: '0.5'
    description: Maximum step size in bohr or radian along an interfragment coordinate
    type: double
  INTRAFRAG_HESS:
    default: SCHLEGEL
    description: Model Hessian to guess intrafragment force constants
    optional: FISCHER, SCHLEGEL, SIMPLE, LINDH, LINDH_SIMPLE
    type: string
  INTRAFRAG_STEP_LIMIT:
    default: '0.5'
    description: Initial maximum step size in bohr or radian along an internal coordinate
    type: double
  INTRAFRAG_STEP_LIMIT_MAX:
    default: '1.0'
    description: Upper bound for dynamic trust radius [au]
    type: double
  INTRAFRAG_STEP_LIMIT_MIN:
    default: '0.001'
    description: Lower bound for dynamic trust radius [au]
    type: double
  IRC_DIRECTION:
    default: FORWARD
    description: IRC mapping direction
    optional: FORWARD, BACKWARD
    type: string
  IRC_POINTS:
    default: '20'
    description: Maximum number of IRC points to collect before stopping.
    type: integer
  IRC_STEP_SIZE:
    default: '0.2'
    description: IRC step size in bohr(amu)
    type: double
  MAX_DISP_G_CONVERGENCE:
    default: '1.2e-3'
    description: 'Convergence criterion for geometry optmization: maximum displacement
      (internal coordinates, atomic units).'
    type: double
  MAX_ENERGY_G_CONVERGENCE:
    default: '1.0e-6'
    description: 'Convergence criterion for geometry optmization: maximum energy change.'
    type: double
  MAX_FORCE_G_CONVERGENCE:
    default: '3.0e-4'
    description: 'Convergence criterion for geometry optmization: maximum force (internal
      coordinates, atomic units).'
    type: double
  OPT_COORDINATES:
    default: INTERNAL
    description: Geometry optimization coordinates to use. REDUNDANT and INTERNAL
      are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH
      uses both redundant and cartesian coordinates. CUSTOM is not fully implemented
      yet - expected optking 0.3.1
    optional: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM
    type: string
  OPT_RESTART:
    default: '0'
    description: "Restart the optimization from optking\u2019s written history"
    type: double
  OPT_TYPE:
    default: MIN
    description: Specifies minimum search, transition-state search, or IRC following
    optional: MIN, TS, IRC
    type: string
  PRINT_OPT_PARAMS:
    default: 'false'
    description: Print all optking parameters.
    type: boolean
  PRINT_TRAJECTORY_XYZ_FILE:
    default: 'false'
    description: Should an xyz trajectory file be kept (useful for visualization)?
    type: boolean
  RANGED_BEND:
    default: Default
    description: Specify range for angles between atoms to be constrained to (eq.
      value specified) analogous to the previous FIXED_BEND
    type: string
  RANGED_DIHEDRAL:
    default: Default
    description: Specify range for the dihedral angles between atoms to be constrained
      to (eq. value specified) analogous to the previous FIXED_DIHEDRAL
    type: string
  RANGED_DISTANCE:
    default: Default
    description: Specify range for distances between atoms to be constrained to (eq.
      value specified) analogous to the previous FIXED_DISTANCE
    type: string
  RANGED_OOFP:
    default: Default
    description: Specify range for the out-of-plane angles between atoms to be constrained
      to (eq. value specified) analogous to the old FIXED_<COORD> keyword
    type: string
  RFO_FOLLOW_ROOT:
    default: 'false'
    description: Do follow the initial RFO vector after the first step?
    type: boolean
  RFO_NORMALIZATION_MAX:
    default: '100'
    description: Eigenvectors of RFO matrix whose final column is smaller than this
      are ignored.
    type: double
  RFO_ROOT:
    default: '0'
    description: Root for RFO to follow, 0 being lowest (for a minimum)
    type: integer
  RMS_DISP_G_CONVERGENCE:
    default: '1.2e-3'
    description: 'Convergence criterion for geometry optmization: rms displacement
      (internal coordinates, atomic units).'
    type: double
  RMS_FORCE_G_CONVERGENCE:
    default: '3.0e-4'
    description: 'Convergence criterion for geometry optmization: rms force (internal
      coordinates, atomic units).'
    type: double
  RSRFO_ALPHA_MAX:
    default: 1e8
    description: Absolute maximum value of RS-RFO.
    type: double
  SAVE_OPTIMIZATION:
    default: 'false'
    description: "Save OptKing\u2019s internal classes for possible restart upon error"
    type: boolean
  STEP_TYPE:
    default: RFO
    description: Geometry optimization step type, either Newton-Raphson or Rational
      Function Optimization
    optional: RFO, RS_I_RFO, P_RFO, NR, SD, LINESEARCH
    type: string
  TEST_B:
    default: 'false'
    description: Do test B matrix?
    type: boolean
  TEST_DERIVATIVE_B:
    default: 'false'
    description: Do test derivative B matrix?
    type: boolean
  UNFREEZE_DIHEDRALS:
    default: Default
    description: Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals
    type: string
  WRITE_OPT_HISTORY:
    default: 'false'
    description: Write the full history to disk. Produces a non validated OptimizationResult.
    type: boolean
  WRITE_OPT_RESULT:
    default: 'false'
    description: Write the optimization history / state to disc
    type: boolean
  WRITE_TRAJECTORY:
    default: 'false'
    description: Write Optimization Trajectory
    type: boolean
PCM:
  PCMSOLVER_PARSED_FNAME:
    default: Default
    description: Name of the PCMSolver input file as parsed by pcmsolver.py
    type: string
  PCM_CC_TYPE:
    default: PTE
    description: PCM-CCSD algorithm type.
    optional: PTE
    type: string
  PCM_SCF_TYPE:
    default: TOTAL
    description: Use total or separate potentials and charges in the PCM-SCF step.
    optional: TOTAL, SEPARATE
    type: string
PE:
  BORDER:
    default: 'false'
    description: Activate border options for sites in proximity to the QM/MM border
    type: boolean
  BORDER_N_REDIST:
    default: '-1'
    description: number of neighbor sites to redistribute to. The default (-1) redistributes
      to all sites which are not in the border region
    type: integer
  BORDER_REDIST_ORDER:
    default: '1'
    description: order from which moments are removed, e.g., if set to 1 (default),
      only charges are redistributed and all higher order moments are removed
    type: integer
  BORDER_REDIST_POL:
    default: 'false'
    description: redistribute polarizabilities? If false, polarizabilities are removed
      (default)
    type: boolean
  BORDER_RMIN:
    default: '2.2'
    description: minimum radius from QM atoms to MM sites to be taken into account
      for removal/redistribution
    type: double
  BORDER_RMIN_UNIT:
    default: AU
    description: unit of BORDER_RMIN, default is atomic units (AU)
    optional: AU, AA
    type: string
  BORDER_TYPE:
    default: REMOVE
    description: border type, either remove or redistribute moments/polarizabilities
    optional: REMOVE, REDIST
    type: string
  DAMPING_FACTOR_INDUCED:
    default: '2.1304'
    description: Thole damping factor for induced moments
    type: double
  DAMPING_FACTOR_MULTIPOLE:
    default: '2.1304'
    description: Thole damping factor for multipole fields
    type: double
  DAMP_INDUCED:
    default: 'false'
    description: Enable Thole damping for induced moments
    type: boolean
  DAMP_MULTIPOLE:
    default: 'false'
    description: Enable Thole damping for multipole fields
    type: boolean
  INDUCED_CONVERGENCE:
    default: 1e-8
    description: Threshold for induced moments convergence
    type: double
  ISOTROPIC_POL:
    default: 'false'
    description: Make polarizabilities isotropic
    type: boolean
  MAXITER:
    default: '50'
    description: Maximum number of iterations for induced moments
    type: integer
  PE_ECP:
    default: 'false'
    description: use PE(ECP) repulsive potentials
    type: boolean
  POTFILE:
    default: potfile.pot
    description: Name of the potential file OR contents of potential file to be written
      anonymously on-the-fly.
    type: string
  SUMMATION_FIELDS:
    default: DIRECT
    description: Summation scheme for field computations, can be direct or fmm
    optional: DIRECT, FMM
    type: string
  TREE_EXPANSION_ORDER:
    default: '5'
    description: Expansion order of the multipoles for FMM
    type: integer
  TREE_THETA:
    default: '0.5'
    description: Opening angle theta
    type: double
PSIMRCC:
  CC_NUM_THREADS:
    default: '1'
    description: Number of threads
    type: integer
  CORR_ANSATZ:
    default: MK
    description: The ansatz to use for MRCC computations
    optional: SR, MK, BW, APBW
    type: string
  CORR_CCSD_T:
    default: STANDARD
    description: The type of CCSD(T) computation to perform
    optional: STANDARD, PITTNER
    type: string
  CORR_CHARGE:
    default: '0'
    description: The molecular charge of the target state
    type: integer
  CORR_MULTP:
    default: '1'
    description: The multiplicity,
    type: integer
  CORR_WFN:
    default: CCSD
    description: The type of correlated wavefunction
    optional: PT2, CCSD, MP2-CCSD, CCSD_T
    type: string
  COUPLING:
    default: CUBIC
    description: The order of coupling terms to include in MRCCSDT computations
    optional: NONE, LINEAR, QUADRATIC, CUBIC
    type: string
  COUPLING_TERMS:
    default: 'true'
    description: Do include the terms that couple the reference determinants?
    type: boolean
  DAMPING_PERCENTAGE:
    default: '0.0'
    description: The amount (percentage) of damping to apply to the amplitude updates.
      0 will result in a full update, 100 will completely stall the update. A value
      around 20 (which corresponds to 20% of the amplitudes from the previous iteration
      being mixed into the current iteration) can help in cases where oscillatory
      convergence is observed.
    type: double
  DIAGONALIZE_HEFF:
    default: 'false'
    description: Do diagonalize the effective Hamiltonian?
    type: boolean
  DIAGONAL_CCSD_T:
    default: 'true'
    description: Do include the diagonal corrections in (T) computations?
    type: boolean
  DIIS_MAX_VECS:
    default: '7'
    description: Maximum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_START:
    default: '2'
    description: The number of DIIS vectors needed before extrapolation is performed
    type: integer
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for energy. See Table Post-SCF Convergence
      for default convergence criteria for different calculation types.
    type: double
  FAVG_CCSD_T:
    default: 'false'
    description: Do use the averaged Fock matrix over all references in (T) computations?
    type: boolean
  FOLLOW_ROOT:
    default: '1'
    description: Which root of the effective hamiltonian is the target state?
    type: integer
  HEFF4:
    default: 'true'
    description: Do include the fourth-order contributions to the effective Hamiltonian?
    type: boolean
  HEFF_PRINT:
    default: 'false'
    description: Do print the effective Hamiltonian?
    type: boolean
  LOCK_SINGLET:
    default: 'false'
    description: Do lock onto a singlet root?
    type: boolean
  MAXITER:
    default: '100'
    description: Maximum number of iterations to determine the amplitudes
    type: integer
  MP2_CCSD_METHOD:
    default: II
    description: How to perform MP2_CCSD computations
    optional: I, IA, II
    type: string
  MP2_GUESS:
    default: 'true'
    description: Do start from a MP2 guess?
    type: boolean
  NO_SINGLES:
    default: 'false'
    description: Do disregard updating single excitation amplitudes?
    type: boolean
  OFFDIAGONAL_CCSD_T:
    default: 'true'
    description: Do include the off-diagonal corrections in (T) computations?
    type: boolean
  PERTURB_CBS:
    default: 'false'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: boolean
  PERTURB_CBS_COUPLING:
    default: 'true'
    description: Removed in 1.4. Will raise an error in 1.5.
    type: boolean
  PT_ENERGY:
    default: SECOND_ORDER
    description: The type of perturbation theory computation to perform
    type: string
  R_CONVERGENCE:
    default: 1e-9
    description: Convergence criterion for amplitudes (residuals).
    type: double
  SMALL_CUTOFF:
    default: '0'
    description: ''
    type: integer
  TIKHONOW_MAX:
    default: '5'
    description: The cycle after which Tikhonow regularization is stopped. Set to
      zero to allow regularization in all iterations
    type: integer
  TIKHONOW_OMEGA:
    default: '0.0'
    description: The shift to apply to the denominators, {it c.f.} Taube and Bartlett,
      JCP, 130, 144112 (2009)
    type: double
  TIKHONOW_TRIPLES:
    default: 'false'
    description: Do use Tikhonow regularization in (T) computations?
    type: boolean
  TRIPLES_ALGORITHM:
    default: RESTRICTED
    description: The type of algorithm to use for (T) computations
    optional: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED
    type: string
  TRIPLES_DIIS:
    default: 'false'
    description: Do use DIIS extrapolation to accelerate convergence for iterative
      triples excitations?
    type: boolean
  USE_SPIN_SYM:
    default: 'true'
    description: Do use symmetry to map equivalent determinants onto each other, for
      efficiency?
    type: boolean
  USE_SPIN_SYMMETRY:
    default: 'true'
    description: Whether to use spin symmetry to map equivalent configurations onto
      each other, for efficiency
    type: boolean
  WFN_SYM:
    default: '1'
    description: "The symmetry of the target wavefunction, specified either by Sch\xF6\
      nflies symbol, or irrep number (in Cotton ordering)"
    type: string
  ZERO_INTERNAL_AMPS:
    default: 'true'
    description: Do zero the internal amplitudes, i.e., those that map reference determinants
      onto each other?
    type: boolean
SAPT:
  AIO_CPHF:
    default: 'false'
    description: Do use asynchronous disk I/O in the solution of the CPHF equations?
      Use may speed up the computation slightly at the cost of spawning an additional
      thread.
    type: boolean
  AIO_DF_INTS:
    default: 'false'
    description: Do use asynchronous disk I/O in the formation of the DF integrals?
      Use may speed up the computation slightly at the cost of spawning an additional
      thread.
    type: boolean
  BASIS:
    default: Default
    description: Primary basis set, describes the monomer molecular orbitals
    optional: basis string
    type: string
  CCD_E_CONVERGENCE:
    default: 1e-8
    description: E converge value for CCD
    type: double
  CCD_MAXITER:
    default: '50'
    description: Max CCD iterations
    type: integer
  CCD_T_CONVERGENCE:
    default: 1e-8
    description: Convergence tolerance for CCD amplitudes
    type: double
  COUPLED_INDUCTION:
    default: 'true'
    description: Solve the CPHF equations to compute coupled induction and exchange-induction.
      These are not available for ROHF, and the option is automatically false in this
      case. In all other cases, coupled induction is strongly recommended. Only turn
      it off if the induction energy is not going to be used.
    type: boolean
  CPHF_R_CONVERGENCE:
    default: 1e-8
    description: Convergence criterion for residual of the CPHF/CPKS coefficients
      in the SAPT
    type: double
  DENOMINATOR_ALGORITHM:
    default: LAPLACE
    description: Denominator algorithm for PT methods. Laplace transformations are
      slightly more efficient.
    optional: LAPLACE, CHOLESKY
    type: string
  DENOMINATOR_DELTA:
    default: '1.0e-6'
    description: Maximum error allowed (Max error norm in Delta tensor) in the approximate
      energy denominators employed for most of the
    type: double
  DF_BASIS_ELST:
    default: Default
    description: Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations,
      may be important if heavier elements are involved. Defaults to a JKFIT basis.
      Previous to v1.6, defaulted to DF_BASIS_SAPT. See fitting notes .
    optional: basis string
    type: string
  DF_BASIS_SAPT:
    default: Default
    description: Auxiliary basis set for SAPT density fitting computations. Defaults
      to a RI basis.
    optional: basis string
    type: string
  DO_CCD_DISP:
    default: 'false'
    description: Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?
    type: boolean
  DO_DISP_EXCH_SINF:
    default: 'false'
    description: For SAPT0 or SAPT(DFT), compute the non-approximated second-order
      exchange-dispersion term.
    type: boolean
  DO_IND30_EXCH_SINF:
    default: 'false'
    description: For SAPT2+3, compute the non-approximated third-order exchange-induction
      term.
    type: boolean
  DO_IND_EXCH_SINF:
    default: 'false'
    description: For SAPT0 or SAPT(DFT), compute the non-approximated second-order
      exchange-induction term.
    type: boolean
  DO_MBPT_DISP:
    default: 'true'
    description: Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if
      also doing CCD?
    type: boolean
  DO_THIRD_ORDER:
    default: 'false'
    description: Do compute third-order corrections?
    type: boolean
  EXCH_SCALE_ALPHA:
    default: 'FALSE'
    description: Whether or not to perform exchange scaling for SAPT exchange components.
      Default is false, i.e. no scaling. If set to true, performs scaling with
    type: string
  FREEZE_CORE:
    default: 'FALSE'
    description: The scope of core orbitals to freeze in evaluation of SAPT
    optional: FALSE, TRUE
    type: string
  INTS_TOLERANCE:
    default: '1.0e-12'
    description: "Schwarz screening threshold. Minimum absolute value below which\
      \ all three-index DF integrals and those contributing to four-index integrals\
      \ are neglected. The default is conservative, but there isn\u2019t much to be\
      \ gained from loosening it, especially for higher-order SAPT."
    type: double
  MAXITER:
    default: '50'
    description: Maximum number of CPHF iterations
    type: integer
  MAX_CCD_DIISVECS:
    default: '10'
    description: Maximum number of vectors used in CCD-DIIS
    type: integer
  MIN_CCD_DIISVECS:
    default: '4'
    description: Minimum number of vectors used in CCD-DIIS
    type: integer
  NAT_ORBS_T2:
    default: 'true'
    description: Do use MP2 natural orbital approximations for the
    type: boolean
  NAT_ORBS_T3:
    default: 'true'
    description: Do natural orbitals to speed up evaluation of the triples contribution
      to dispersion by truncating the virtual orbital space? Recommended true for
      all SAPT computations.
    type: boolean
  NAT_ORBS_V4:
    default: 'true'
    description: Do use MP2 natural orbital approximations for the
    type: boolean
  OCC_TOLERANCE:
    default: '1.0e-6'
    description: Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual
      natural orbitals are discarded for in each of the above three truncations
    type: double
  PRINT:
    default: '1'
    description: The amount of information to print to the output file for the sapt
      module. For 0, only the header and final results are printed. For 1, (recommended
      for large calculations) some intermediate quantities are also printed.
    type: integer
  SAPT0_E10:
    default: 'false'
    description: For SAPT0 only, compute only first-order electrostatics and exchange.
      The integrals are computed before any terms, so all integrals will be computed
      even if they are not needed for the requested term
    type: boolean
  SAPT0_E20DISP:
    default: 'false'
    description: For SAPT0 only, compute only second-order induction The integrals
      are computed before any terms, so all integrals will be computed even if they
      are not needed for the requested term
    type: boolean
  SAPT0_E20IND:
    default: 'false'
    description: For SAPT0 only, compute only second-order induction The integrals
      are computed before any terms, so all integrals will be computed even if they
      are not needed for the requested term
    type: boolean
  SAPT_DFT_DO_DHF:
    default: 'true'
    description: Compute the Delta-HF correction?
    type: boolean
  SAPT_DFT_DO_HYBRID:
    default: 'true'
    description: Enables the hybrid xc kernel in dispersion?
    type: boolean
  SAPT_DFT_EXCH_DISP_FIXED_SCALE:
    default: '0.770'
    description: Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME.
      Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill,
      2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by
      Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014).
    type: double
  SAPT_DFT_EXCH_DISP_SCALE_SCHEME:
    default: FIXED
    description: Scheme for approximating exchange-dispersion for SAPT-DFT. Previous
      to Nov 2022, default was FIXED with Hesselmann value. NONE Use unscaled Exch-Disp2,u
      . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u
      . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u .
    optional: NONE, FIXED, DISP
    type: string
  SAPT_DFT_FUNCTIONAL:
    default: PBE0
    description: Underlying funcitonal to use for SAPT(DFT)
    type: string
  SAPT_DFT_GRAC_DETERMINATION:
    default: INPUT
    description: How is the GRAC correction determined?
    optional: INPUT
    type: string
  SAPT_DFT_GRAC_SHIFT_A:
    default: '0.0'
    description: Monomer A GRAC shift in Hartree
    type: double
  SAPT_DFT_GRAC_SHIFT_B:
    default: '0.0'
    description: Monomer B GRAC shift in Hartree
    type: double
  SAPT_DFT_MP2_DISP_ALG:
    default: SAPT
    description: Which MP2 Exch-Disp module to use?
    optional: FISAPT, SAPT
    type: string
  SAPT_FDDS_DISP_LEG_LAMBDA:
    default: '0.3'
    description: Lambda shift in the space morphing for the FDDS Dispersion time integration
    type: double
  SAPT_FDDS_DISP_NUM_POINTS:
    default: '10'
    description: Number of points in the Legendre FDDS Dispersion time integration
    type: integer
  SAPT_FDDS_V2_RHO_CUTOFF:
    default: '1.e-6'
    description: Minimum rho cutoff for the in the LDA response for FDDS
    type: double
  SAPT_LEVEL:
    default: SAPT0
    description: The level of theory for SAPT
    optional: SAPT0, SAPT2, SAPT2+, SAPT2+3
    type: string
  SAPT_MEM_CHECK:
    default: 'true'
    description: "Do force SAPT2 and higher to die if it thinks there isn\u2019t enough\
      \ memory? Turning this off is ill-advised."
    type: boolean
  SAPT_MEM_FACTOR:
    default: '0.9'
    description: Proportion of memory available for the DF-MP2 three-index integral
      buffers used to evaluate dispersion.
    type: double
  SAPT_MEM_SAFETY:
    default: '0.9'
    description: Memory safety
    type: double
  SAPT_QUIET:
    default: 'false'
    description: Interior option to clean up printing
    type: boolean
SCF:
  BASIS:
    default: Default
    description: Primary basis set
    optional: basis string
    type: string
  BASIS_GUESS:
    default: 'FALSE'
    description: Accelerate convergence by performing a preliminary SCF with this
      small basis set followed by projection into the full target basis. A value of
      TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0,
      or def2-SV(P).
    type: string
  CHOLESKY_TOLERANCE:
    default: 1e-4
    description: Tolerance for Cholesky decomposition of the ERI tensor
    type: double
  COSX_BASIS_TOLERANCE:
    default: '1.0e-10'
    description: Screening criteria for basis function values on COSX grids
    type: double
  COSX_DENSITY_TOLERANCE:
    default: '1.0e-10'
    description: Screening criteria for shell-pair densities in COSX
    type: double
  COSX_INTS_TOLERANCE:
    default: '1.0e-11'
    description: Screening criteria for integrals and intermediates in COSX
    type: double
  COSX_MAXITER_FINAL:
    default: '1'
    description: Controls SCF iteration behavior for the larger (i.e., final) COSX
      grid. -1 fully converges the SCF on the final grid if possible, ending early
      if MAXITER total SCF iterations are reached (failure). 0 disables the final
      COSX grid entirely. n runs up to n iterations on the final COSX grid, ending
      early if SCF convergence is reached (success) or if MAXITER total SCF iterations
      are reached (failure).
    type: integer
  COSX_OVERLAP_FITTING:
    default: 'true'
    description: Do reduce numerical COSX errors with overlap fitting?
    type: boolean
  COSX_PRUNING_SCHEME:
    default: ROBUST
    description: Pruning scheme for COSX grids
    type: string
  COSX_RADIAL_POINTS_FINAL:
    default: '35'
    description: Number of radial points in final COSX grid.
    type: integer
  COSX_RADIAL_POINTS_INITIAL:
    default: '25'
    description: Number of radial points in initial COSX grid.
    type: integer
  COSX_SPHERICAL_POINTS_FINAL:
    default: '110'
    description: Number of spherical points in final COSX grid.
    type: integer
  COSX_SPHERICAL_POINTS_INITIAL:
    default: '50'
    description: Number of spherical points in initial COSX grid.
    type: integer
  DAMPING_CONVERGENCE:
    default: '1.0e-18'
    description: 'The density convergence threshold after which damping is no longer
      performed, if it is enabled. It is recommended to leave damping on until convergence,
      which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING.'
    type: double
  DAMPING_PERCENTAGE:
    default: '0.0'
    description: "The amount (percentage) of damping to apply to the early density\
      \ updates. 0 will result in a full update, 100 will completely stall the update.\
      \ A value around 20 (which corresponds to 20% of the previous iteration\u2019\
      s density being mixed into the current density) could help to solve problems\
      \ with oscillatory convergence."
    type: double
  DFT_ALPHA:
    default: '0.0'
    description: The DFT Exact-exchange parameter
    type: double
  DFT_ALPHA_C:
    default: '0.0'
    description: The DFT Correlation hybrid parameter
    type: double
  DFT_BASIS_TOLERANCE:
    default: '1.0e-12'
    description: DFT basis cutoff.
    type: double
  DFT_BLOCK_MAX_POINTS:
    default: '256'
    description: The maximum number of grid points per evaluation block.
    type: integer
  DFT_BLOCK_MAX_RADIUS:
    default: '3.0'
    description: The maximum radius to terminate subdivision of an octree block [au].
    type: double
  DFT_BLOCK_MIN_POINTS:
    default: '100'
    description: The minimum number of grid points per evaluation block.
    type: integer
  DFT_BLOCK_SCHEME:
    default: OCTREE
    description: The blocking scheme for DFT.
    optional: NAIVE, OCTREE, ATOMIC
    type: string
  DFT_BS_RADIUS_ALPHA:
    default: '1.0'
    description: Factor for effective BS radius in radial grid.
    type: double
  DFT_DENSITY_TOLERANCE:
    default: '-1.0'
    description: density cutoff for LibXC. A negative value turns the feature off
      and LibXC defaults are used.
    type: double
  DFT_DISPERSION_PARAMETERS:
    default: Default
    description: Parameters defining the dispersion correction. See Table -D Functionals
      for default values and Table Dispersion Corrections for the order in which parameters
      are to be specified in this array option. Unused for functionals constructed
      by user.
    type: array
  DFT_GRAC_ALPHA:
    default: '0.5'
    description: The gradient regularized asymptotic correction alpha value
    type: double
  DFT_GRAC_BETA:
    default: '40.0'
    description: The gradient regularized asymptotic correction beta value
    type: double
  DFT_GRAC_C_FUNC:
    default: XC_LDA_C_VWN
    description: The gradient regularized asymptotic correction functional corr form.
    type: string
  DFT_GRAC_SHIFT:
    default: '0.0'
    description: The gradient regularized asymptotic correction shift value
    type: double
  DFT_GRAC_X_FUNC:
    default: XC_GGA_X_LB
    description: The gradient regularized asymptotic correction functional exch form.
    type: string
  DFT_GRID_NAME:
    default: Default
    description: The DFT grid specification, such as SG1.
    optional: SG0, SG1
    type: string
  DFT_NUCLEAR_SCHEME:
    default: TREUTLER
    description: Nuclear Scheme.
    optional: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE
    type: string
  DFT_OMEGA:
    default: '0.0'
    description: The DFT Range-separation parameter
    type: double
  DFT_OMEGA_C:
    default: '0.0'
    description: The DFT Correlation Range-separation parameter
    type: double
  DFT_PRUNING_ALPHA:
    default: '1.0'
    description: Spread alpha for logarithmic pruning.
    type: double
  DFT_PRUNING_SCHEME:
    default: NONE
    description: Select approach for pruning. Options ROBUST and TREUTLER prune based
      on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER
      D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts
      only!). The recommended scheme is ROBUST.
    type: string
  DFT_RADIAL_POINTS:
    default: '75'
    description: Number of radial points.
    type: integer
  DFT_RADIAL_SCHEME:
    default: TREUTLER
    description: Radial Scheme.
    optional: TREUTLER, BECKE, MULTIEXP, EM, MURA
    type: string
  DFT_REMOVE_DISTANT_POINTS:
    default: 'true'
    description: Remove points from the quadrature grid that exceed the spatial extend
      of the basis functions.
    type: boolean
  DFT_SPHERICAL_POINTS:
    default: '302'
    description: Number of spherical points (A Lebedev Points number).
    type: integer
  DFT_SPHERICAL_SCHEME:
    default: LEBEDEV
    description: Spherical Scheme.
    optional: LEBEDEV
    type: string
  DFT_V2_RHO_CUTOFF:
    default: '-1.0'
    description: Minima spin-summed density cutoff for the second derivative. Defaults
      to the density tolerance.
    type: double
  DFT_VV10_B:
    default: '0.0'
    description: Define VV10 parameter b
    type: double
  DFT_VV10_C:
    default: '0.0'
    description: Define VV10 parameter C
    type: double
  DFT_VV10_POSTSCF:
    default: 'false'
    description: post-scf VV10 correction
    type: boolean
  DFT_VV10_RADIAL_POINTS:
    default: '50'
    description: Number of radial points for VV10 NL integration.
    type: integer
  DFT_VV10_RHO_CUTOFF:
    default: '1.e-8'
    description: Rho cutoff for VV10 NL integration.
    type: double
  DFT_VV10_SPHERICAL_POINTS:
    default: '146'
    description: Number of spherical points (A Lebedev Points number) for VV10 NL
      integration.
    type: integer
  DFT_WEIGHTS_TOLERANCE:
    default: '1.0e-15'
    description: grid weight cutoff. Disable with -1.0.
    type: double
  DF_BASIS_GUESS:
    default: 'FALSE'
    description: When BASIS_GUESS is active, run the preliminary scf in density-fitted
      mode with this as fitting basis for the small basis set. A value of TRUE turns
      on density fitting with the default basis, otherwise the specified basis is
      used.
    optional: basis string
    type: string
  DF_BASIS_SAD:
    default: SAD-FIT
    description: Density fitting basis used in SAD
    optional: basis string
    type: string
  DF_BASIS_SCF:
    default: Default
    description: Auxiliary basis set for SCF density fitting computations. Defaults
      to a JKFIT basis.
    optional: basis string
    type: string
  DF_BUMP_R0:
    default: '0.0'
    description: Bump function min radius
    type: double
  DF_BUMP_R1:
    default: '0.0'
    description: Bump function max radius
    type: double
  DF_DOMAINS:
    default: DIATOMIC
    description: FastDF geometric fitting domain selection algorithm
    optional: DIATOMIC, SPHERES
    type: string
  DF_FITTING_CONDITION:
    default: '1.0e-10'
    description: Fitting Condition, i.e. eigenvalue threshold for RI basis. Analogous
      to S_TOLERANCE
    type: double
  DF_INTS_IO:
    default: NONE
    description: IO caching for CP corrections, etc. Changing this selects Disk_DF
      over Mem_DF. Note that setting this forces DiskDFJK when SCF_TYPE=DF.
    optional: NONE, SAVE, LOAD
    type: string
  DF_INTS_NUM_THREADS:
    default: '0'
    description: Number of threads for integrals (may be turned down if memory is
      an issue). 0 is blank
    type: integer
  DF_METRIC:
    default: COULOMB
    description: FastDF Fitting Metric
    optional: COULOMB, EWALD, OVERLAP
    type: string
  DF_SCF_GUESS:
    default: 'true'
    description: Do a density fitting SCF calculation to converge the orbitals before
      switching to the use of exact integrals in a SCF_TYPE DIRECT calculation
    type: boolean
  DF_THETA:
    default: '1.0'
    description: FastDF SR Ewald metric range separation parameter
    type: double
  DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate convergence?
    type: boolean
  DIIS_MAX_VECS:
    default: '10'
    description: Maximum number of error vectors stored for DIIS extrapolation
    type: integer
  DIIS_MIN_VECS:
    default: '2'
    description: Minimum number of error vectors stored for DIIS extrapolation. Will
      be removed in v1.7.
    type: integer
  DIIS_RMS_ERROR:
    default: 'true'
    description: Use RMS error instead of the more robust absolute error?
    type: boolean
  DIIS_START:
    default: '1'
    description: The minimum iteration to start storing DIIS vectors and performing
      ADIIS/EDIIS.
    type: integer
  DISTRIBUTED_MATRIX:
    default: Default
    description: The dimension sizes of the distributed matrix
    type: array
  D_CONVERGENCE:
    default: 1e-6
    description: 'Convergence criterion for SCF density, defined as the RMS or maximum
      absolute value of the orbital gradient. See Table SCF Convergence & Algorithm
      for default convergence criteria for different calculation types. Cfour Interface:
      Keyword translates into CFOUR_SCF_CONV.'
    type: double
  EXTERN:
    default: 'false'
    description: An ExternalPotential (built by Python or nullptr/None)
    type: boolean
  E_CONVERGENCE:
    default: 1e-6
    description: Convergence criterion for SCF energy. See Table SCF Convergence &
      Algorithm for default convergence criteria for different calculation types.
    type: double
  FAIL_ON_MAXITER:
    default: 'true'
    description: Fail if we reach maxiter without converging?
    type: boolean
  FOLLOW_STEP_INCREMENT:
    default: '0.2'
    description: When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE
      value if we end up in the same SCF solution.
    type: double
  FOLLOW_STEP_SCALE:
    default: '0.5'
    description: When using STABILITY_ANALYSIS FOLLOW, how much to scale the step
      along the eigenvector by. A full step of
    type: double
  FRAC_DIIS:
    default: 'true'
    description: Do use DIIS extrapolation to accelerate convergence in frac?
    type: boolean
  FRAC_LOAD:
    default: 'false'
    description: Do recompute guess from stored orbitals?
    type: boolean
  FRAC_OCC:
    default: Default
    description: The absolute indices of occupied orbitals to fractionally occupy
      (+/- for alpha/beta)
    type: array
  FRAC_RENORMALIZE:
    default: 'true'
    description: Do renormalize C matrices prior to writing to checkpoint?
    type: boolean
  FRAC_START:
    default: '0'
    description: The iteration to start fractionally occupying orbitals (or 0 for
      no fractional occupation)
    type: integer
  FRAC_VAL:
    default: Default
    description: The occupations of the orbital indices specified above (
    type: array
  GUESS:
    default: AUTO
    description: The type of guess orbitals. See Initial Guess for what the options
      mean and what the defaults are.
    optional: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ
    type: string
  GUESS_MIX:
    default: 'false'
    description: Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry.
      Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure
      is defined only for calculations in C1 symmetry.
    type: boolean
  GUESS_PERSIST:
    default: 'false'
    description: If true, then repeat the specified guess procedure for the orbitals
      every time - even during a geometry optimization.
    type: boolean
  INCFOCK:
    default: 'false'
    description: Do perform incremental Fock build?
    type: boolean
  INCFOCK_CONVERGENCE:
    default: '1.0e-5'
    description: The density threshold at which to stop building the Fock matrix incrementally
    type: double
  INCFOCK_FULL_FOCK_EVERY:
    default: '5'
    description: Frequency with which to compute the full Fock matrix if using INCFOCK
      . N means rebuild every N SCF iterations to avoid accumulating error from the
      incremental procedure.
    type: integer
  INTS_TOLERANCE:
    default: 1e-12
    description: Screening threshold for the chosen screening method (SCHWARZ, CSAM,
      DENSITY) Absolute value below which TEI are neglected.
    type: double
  LEVEL_SHIFT:
    default: '0.0'
    description: Do use a level shift?
    type: double
  LEVEL_SHIFT_CUTOFF:
    default: 1e-2
    description: DIIS error at which to stop applying the level shift
    type: double
  LINK_INTS_TOLERANCE:
    default: '1.0e-12'
    description: The screening tolerance used for ERI/Density sparsity in the LinK
      algorithm
    type: double
  LOCAL_CONVERGENCE:
    default: 1e-12
    description: The convergence on the orbital localization procedure
    type: double
  LOCAL_MAXITER:
    default: '200'
    description: The maxiter on the orbital localization procedure
    type: integer
  MAXITER:
    default: '100'
    description: 'Maximum number of iterations. Cfour Interface: Keyword translates
      into CFOUR_SCF_MAXCYC.'
    type: integer
  MAX_ATTEMPTS:
    default: '1'
    description: When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization
      attempts to make the wavefunction stable.
    type: integer
  MAX_MEM_BUF:
    default: '0'
    description: Max memory per buf for PK algo REORDER, for debug and tuning
    type: integer
  MOLDEN_WRITE:
    default: 'false'
    description: Do write a MOLDEN output file? If so, the filename will end in .molden,
      and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name
      of the output file plus the name of the current molecule.
    type: boolean
  MOM_OCC:
    default: Default
    description: The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta)
    type: array
  MOM_START:
    default: '0'
    description: The iteration to start MOM on (or 0 for no MOM)
    type: integer
  MOM_VIR:
    default: Default
    description: The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta)
    type: array
  NL_DISPERSION_PARAMETERS:
    default: Default
    description: Parameters defining the -NL/-V dispersion correction. First b, then
      C
    type: array
  ONEPOT_GRID_READ:
    default: 'false'
    description: Read an external potential from the .dx file?
    type: boolean
  ORBITALS_WRITE:
    default: Default
    description: File name (case sensitive) to which to serialize Wavefunction orbital
      data.
    type: string
  PARALLEL:
    default: 'false'
    description: Do run in parallel?
    type: boolean
  PERTURB_DIPOLE:
    default: Default
    description: An array of length three describing the magnitude (atomic units)
      of the dipole field in the {x,y,z} directions
    type: array
  PERTURB_H:
    default: 'false'
    description: Do perturb the Hamiltonian?
    type: boolean
  PERTURB_MAGNITUDE:
    default: '0.0'
    description: Size of the perturbation (applies only to dipole perturbations).
      Deprecated - use PERTURB_DIPOLE instead
    type: double
  PERTURB_WITH:
    default: DIPOLE
    description: The operator used to perturb the Hamiltonian, if requested. DIPOLE_X,
      DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future
    optional: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX
    type: string
  PHI_POINTS:
    default: '360'
    description: Number of azimuthal grid points for spherical potential integration
    type: integer
  PK_ALL_NONSYM:
    default: 'false'
    description: All densities are considered non symmetric, debug only.
    type: boolean
  PK_MAX_BUCKETS:
    default: '500'
    description: Maximum numbers of batches to read PK supermatrix.
    type: integer
  PRINT_BASIS:
    default: 'false'
    description: Do print the basis set?
    type: boolean
  PRINT_MOS:
    default: 'false'
    description: Do print the molecular orbitals?
    type: boolean
  PROCESS_GRID:
    default: Default
    description: The dimension sizes of the processor grid
    type: array
  QCHF:
    default: 'false'
    description: Do perform a QCHF computation?
    type: boolean
  RADIUS:
    default: '10.0'
    description: Radius (bohr) of a hard-sphere external potential
    type: double
  REFERENCE:
    default: RHF
    description: 'Reference wavefunction type. Cfour Interface: Keyword translates
      into CFOUR_REFERENCE.'
    optional: RHF, ROHF, UHF, CUHF, RKS, UKS
    type: string
  R_POINTS:
    default: '100'
    description: Number of radial grid points for spherical potential integration
    type: integer
  SAD_CHOL_TOLERANCE:
    default: 1e-7
    description: SAD guess density decomposition threshold
    type: double
  SAD_D_CONVERGENCE:
    default: 1e-5
    description: Convergence criterion for SCF density in the SAD guess, analogous
      to D_CONVERGENCE.
    type: double
  SAD_E_CONVERGENCE:
    default: 1e-5
    description: Convergence criterion for SCF energy in the SAD guess, analogous
      to E_CONVERGENCE.
    type: double
  SAD_FRAC_OCC:
    default: 'true'
    description: Do force an even distribution of occupations across the last partially
      occupied orbital shell?
    type: boolean
  SAD_MAXITER:
    default: '50'
    description: Maximum number of atomic SCF iterations within SAD
    type: integer
  SAD_PRINT:
    default: '0'
    description: The amount of SAD information to print to the output
    type: integer
  SAD_SCF_TYPE:
    default: DF
    description: SCF type used for atomic calculations in SAD guess
    optional: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK
    type: string
  SAD_SPIN_AVERAGE:
    default: 'true'
    description: Do use spin-averaged occupations instead of atomic ground spin state
      in fractional SAD?
    type: boolean
  SAPGAU_BASIS:
    default: sap_helfem_large
    description: The potential basis set used for the SAPGAU guess
    type: string
  SAPT:
    default: 'FALSE'
    description: Are going to do SAPT? If so, what part?
    type: string
  SAVE_JK:
    default: 'false'
    description: Keep JK object for later use?
    type: boolean
  SAVE_UHF_NOS:
    default: 'false'
    description: Save the UHF NOs
    type: boolean
  SCF_INITIAL_ACCELERATOR:
    default: ADIIS
    description: Use a method to accelerate initial SCF convergence? Use NONE for
      DIIS alone (if enabled) and EDIIS or ADIIS to have both the chosen accelerator
      and DIIS (if enabled). For restricted-open references, EDIIS and ADIIS have
      no effect.
    optional: NONE, EDIIS, ADIIS
    type: string
  SCF_INITIAL_FINISH_DIIS_TRANSITION:
    default: '1.0e-4'
    description: 'SCF error at which to complete the linear interpolation between
      DIIS steps and steps of the initial SCF accelerator Value taken from Garza and
      Scuseria, DOI: 10.1063/1.4740249'
    type: double
  SCF_INITIAL_START_DIIS_TRANSITION:
    default: '1.0e-1'
    description: 'SCF error at which to start the linear interpolation between DIIS
      steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria,
      DOI: 10.1063/1.4740249'
    type: double
  SCF_MEM_SAFETY_FACTOR:
    default: '0.75'
    description: Memory safety factor for allocating JK
    type: double
  SCF_PROPERTIES:
    default: Default
    description: SCF Properties to calculate after an energy evaluation. Note, this
      keyword is not used for property evaluations.
    type: array
  SCF_SUBTYPE:
    default: AUTO
    description: For certain SCF_TYPE algorithms that have internal sub-algorithms
      depending on available memory or other hardware constraints, allow the best
      sub-algorithm for the molecule and conditions (AUTO ; usual mode) or forcibly
      select a sub-algorithm (usually only for debugging or profiling). Presently,
      SCF_SUBTYPE=DF, SCF_SUBTYPE=MEM_DF, and SCF_SUBTYPE=DISK_DF can have INCORE
      and OUT_OF_CORE selected; and SCF_TYPE=PK can have INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE,
      and REORDER_OUT_OF_CORE selected.
    optional: AUTO, INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, REORDER_OUT_OF_CORE
    type: string
  SNLINK_BASIS_TOLERANCE:
    default: '1.0e-10'
    description: Screening criteria for basis function values on snLinK grids
    type: double
  SNLINK_DENSITY_TOLERANCE:
    default: '1.0e-10'
    description: Screening criteria for shell-pair densities in snLinK
    type: double
  SNLINK_FORCE_CARTESIAN:
    default: 'false'
    description: Force snLinK to use cartesian coordinates
    type: boolean
  SNLINK_GPU_MEM:
    default: '90'
    description: Proportion (in %) of available GPU memory to allocate to snLinK.
    type: boolean
  SNLINK_GRID_BATCH_SIZE:
    default: '2048'
    description: Maximum number of grid points per grid block for GauXC
    type: integer
  SNLINK_INTEGRATOR_KERNEL:
    default: DEFAULT
    description: Integrator execution kernel for snLinK GauXC also has SHELLBATCHED,
      but it is incompatible with Psi4 due to not being yet implemented with sn-LinK.
    optional: DEFAULT, INCORE
    type: string
  SNLINK_INTS_TOLERANCE:
    default: '1.0e-11'
    description: Screening criteria for integrals and intermediates in snLinK
    type: double
  SNLINK_LOAD_BALANCER_KERNEL:
    default: DEFAULT
    description: Load Balancer kernel for snLinK
    optional: DEFAULT, REPLICATED, REPLICATED-PETITE, REPLICATED-FILLIN
    type: string
  SNLINK_LWD_KERNEL:
    default: DEFAULT
    description: Integrator local work driver kernel for snLinK GauXC also has SCHEME1-CUTLASS,
      but it is disabled in Psi4 for now due to compile-time issues and requiring
      very modern CUDA CCs (>=80)
    optional: DEFAULT, REFERENCE, SCHEME1, SCHEME1-MAGMA
    type: string
  SNLINK_MOL_WEIGHTS_KERNEL:
    default: DEFAULT
    description: Molecular Weights kernel for snLinK
    optional: DEFAULT
    type: string
  SNLINK_PRUNING_SCHEME:
    default: ROBUST
    description: Pruning scheme for snLinK grids
    optional: ROBUST, TREUTLER, NONE
    type: string
  SNLINK_RADIAL_POINTS:
    default: '70'
    description: Number of radial points in snLinK grid.
    type: integer
  SNLINK_RADIAL_SCHEME:
    default: MURA
    description: Radial Scheme for snLinK grid. MURA is default here as it matches
      the GauXC default option
    optional: MURA, TREUTLER, EM
    type: string
  SNLINK_REDUCTION_KERNEL:
    default: DEFAULT
    description: Integrator reduction kernel for snLinK GauXC also has NCCL, but it
      is incompatible with Psi4 due to requiring MPI.
    optional: DEFAULT, BASICMPI
    type: string
  SNLINK_SPHERICAL_POINTS:
    default: '302'
    description: Number of spherical points in snLinK grid.
    type: integer
  SNLINK_USE_DEBUG_GRID:
    default: 'false'
    description: "Overwrite sn-LinK grid options with debug grid matching GauXC\u2019\
      s Ultrafine grid spec"
    type: integer
  SNLINK_USE_GPU:
    default: 'false'
    description: Use GPU for GauXC?
    type: boolean
  SOLVER_CONVERGENCE:
    default: '1.0e-6'
    description: Convergence threshold (max 2-norm) for numerical solvers (instability
      analysis and CPHF/CPKS).
    type: double
  SOLVER_MAXITER:
    default: '100'
    description: Maximum iterations for numerical solvers (instability analysis and
      CPHF/CPKS).
    type: integer
  SOLVER_N_GUESS:
    default: '1'
    description: Number of guess vectors per root for instability analysis.
    type: integer
  SOLVER_N_ROOT:
    default: '1'
    description: Number of roots to converge for all irreps during instability analysis.
      (Overridden by SOLVER_ROOTS_PER_IRREP.)
    type: integer
  SOLVER_ROOTS_PER_IRREP:
    default: Default
    description: Number of roots to converge, per irrep, during instability analysis.
      (Overrides SOLVER_N_ROOT.)
    type: array
  SOSCF:
    default: 'false'
    description: Do use second-order SCF convergence methods?
    type: boolean
  SOSCF_CONV:
    default: '5.0e-3'
    description: Second order convergence threshold. Cease microiterating at this
      value.
    type: double
  SOSCF_MAX_ITER:
    default: '5'
    description: Maximum number of second-order microiterations to perform.
    type: integer
  SOSCF_MIN_ITER:
    default: '1'
    description: Minimum number of second-order microiterations to perform.
    type: integer
  SOSCF_PRINT:
    default: 'false'
    description: Do we print the SOSCF microiterations?.
    type: boolean
  SOSCF_START_CONVERGENCE:
    default: '1.0e-2'
    description: When to start second-order SCF iterations based on gradient RMS.
    type: double
  STABILITY_ANALYSIS:
    default: NONE
    description: Whether to perform stability analysis after convergence. NONE prevents
      analysis being performed. CHECK will print out the analysis of the wavefunction
      stability at the end of the computation. FOLLOW will perform the analysis and,
      if a totally symmetric instability is found, will attempt to follow the eigenvector
      and re-run the computations to find a stable solution.
    optional: NONE, CHECK, FOLLOW
    type: string
  S_CHOLESKY_TOLERANCE:
    default: 1e-8
    description: Tolerance for partial Cholesky decomposition of overlap matrix.
    type: double
  S_ORTHOGONALIZATION:
    default: AUTO
    description: 'SO orthogonalization: automatic, symmetric, or canonical?'
    optional: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY
    type: string
  S_TOLERANCE:
    default: 1e-7
    description: Minimum S matrix eigenvalue to allow before linear dependencies are
      removed.
    type: double
  TDSCF_COEFF_CUTOFF:
    default: '0.1'
    description: Cutoff for printing excitations and de-excitations contributing to
      each excited state
    type: double
  TDSCF_GUESS:
    default: DENOMINATORS
    description: "Guess type, only \u2018denominators\u2019 currently supported"
    type: string
  TDSCF_MAXITER:
    default: '60'
    description: Maximum number of TDSCF solver iterations
    type: integer
  TDSCF_PRINT:
    default: '1'
    description: Verbosity level in TDSCF
    type: integer
  TDSCF_R_CONVERGENCE:
    default: 1e-4
    description: Convergence threshold for the norm of the residual vector. If unset,
      default based on D_CONVERGENCE.
    type: double
  TDSCF_STATES:
    default: Default
    description: Number of roots (excited states) we should seek to converge. This
      can be either an integer (total number of states to seek) or a list (number
      of states per irrep). The latter is only valid if the system has symmetry. Furthermore,
      the total number of states will be redistributed among irreps when symmetry
      is used.
    type: array
  TDSCF_TDA:
    default: 'false'
    description: Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation
      (RPA) when false
    type: boolean
  TDSCF_TDM_PRINT:
    default: Default
    description: 'Which transition dipole moments to print out: - E_TDM_LEN : electric
      transition dipole moments, length representation - E_TDM_VEL : electric transition
      dipole moments, velocity representation - M_TDM : magnetic transition dipole
      moments'
    type: array
  TDSCF_TRIPLETS:
    default: NONE
    description: 'Controls inclusion of triplet states, which is only valid for restricted
      references. Valid options: - none : No triplets computed (default) - also :
      lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets
      are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets
      and 2 will be triplets. - only : Only triplet states computed'
    optional: NONE, ALSO, ONLY
    type: string
  THETA_POINTS:
    default: '360'
    description: Number of colatitude grid points for spherical potential integration
    type: integer
  THICKNESS:
    default: '20.0'
    description: Thickness (bohr) of a hard-sphere external potential
    type: double
  TILE_SZ:
    default: '512'
    description: The tile size for the distributed matrices
    type: integer
  UHF_NOONS:
    default: '3'
    description: The number of NOONs to print in a UHF calc
    type: string
  WCOMBINE:
    default: 'false'
    description: "combine omega exchange and Hartree\u2013Fock exchange into one matrix\
      \ for efficiency? Disabled until fixed."
    type: boolean
  WFN:
    default: SCF
    description: Wavefunction type
    optional: SCF
    type: string
THERMO:
  P:
    default: '101325'
    description: Pressure in Pascal for thermodynamic analysis. Note that 100000.
      is the value for IUPAC STP.
    type: double
  ROTATIONAL_SYMMETRY_NUMBER:
    default: '1'
    description: Rotational symmetry number for thermodynamic analysis. Default is
      set from the full point group (e.g., Td for methane) as opposed to the computational
      point group (e.g., C2v for methane). Default takes into account symmetry reduction
      through asymmetric isotopic substitution and is unaffected by user-set symmetry
      on molecule, so this option is the sole way to influence the symmetry-dependent
      aspects of the thermodynamic analysis. Note that this factor is handled differently
      among quantum chemistry software.
    type: integer
  T:
    default: '298.15'
    description: Temperature in Kelvin for thermodynamic analysis. Note that 273.15
      is the value for IUPAC STP.
    type: double
