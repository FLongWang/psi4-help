A_RAS3_MAX (DETCI)
DETCI — maximum number of alpha electrons in RAS III

Type: integer

Default: -1

ABCD (CCENERGY)
CCENERGY — Type of ABCD algorithm will be used

Type: string

Possible Values: NEW, OLD

Default: NEW

ABCD (CCEOM)
CCEOM — Type of ABCD algorithm will be used

Type: string

Possible Values: NEW, OLD

Default: NEW

ABCD (CCLAMBDA)
CCLAMBDA — Type of ABCD algorithm will be used

Type: string

Default: NEW

ABCD (CCRESPONSE)
CCRESPONSE — Type of ABCD algorithm will be used

Type: string

Default: NEW

ACTIVE (GLOBALS)
GLOBALS — An array giving the number of active orbitals (occupied plus unoccupied) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords)

Type: array

Default: No Default

ACTIVE_NAT_ORBS (FNOCC)
FNOCC — An array containing the number of virtual natural orbitals per irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE.

Type: array

Default: No Default

ADD_AUXILIARY_BONDS (OPTKING)
OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?

Type: boolean

Default: true

AIO_CPHF (SAPT)
SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread.

Type: boolean

Default: false

AIO_DF_INTS (SAPT)
SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread.

Type: boolean

Default: false

ALGORITHM (DCT)
DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used.

Type: string

Possible Values: TWOSTEP, SIMULTANEOUS, QC

Default: SIMULTANEOUS

ANALYZE (CCENERGY)
CCENERGY — Do analyze T2 amplitudes

Type: boolean

Default: false

ANALYZE (CCRESPONSE)
CCRESPONSE — Do analyze X2 amplitudes

Type: boolean

Default: false

AO_BASIS (CCDENSITY)
CCDENSITY — The algorithm to use for the 
 terms

Type: string

Possible Values: NONE, DISK, DIRECT

Default: NONE

AO_BASIS (CCENERGY)
CCENERGY (Expert) — The algorithm to use for the 
 terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach.

Type: string

Possible Values: NONE, DISK, DIRECT

Default: NONE

AO_BASIS (CCLAMBDA)
CCLAMBDA — The algorithm to use for the 
 terms

Type: string

Possible Values: NONE, DISK, DIRECT

Default: NONE

AO_BASIS (CCTRANSORT)
CCTRANSORT — The algorithm to use for the 
 terms

Type: string

Possible Values: NONE, DISK, DIRECT

Default: NONE

AO_BASIS (DCT)
DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (
) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O.

Type: string

Possible Values: NONE, DISK

Default: DISK

AUXILIARY_BOND_FACTOR (OPTKING)
OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates.

Type: double

Default: 2.5

AVG_STATES (DETCI)
DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0.

Type: array

Default: No Default

AVG_WEIGHTS (DETCI)
DETCI — Array giving the weights for each state in a state-averaged procedure

Type: array

Default: No Default

B_RAS3_MAX (DETCI)
DETCI — maximum number of beta electrons in RAS III

Type: integer

Default: -1

BASIS (DFMP2)
DFMP2 — Primary basis set

Type: string

Possible Values: basis string

Default: NONE

BASIS (MINTS)
MINTS — Primary basis set. Available basis sets

Type: string

Possible Values: basis string

Default: No Default

BASIS (SAPT)
SAPT — Primary basis set, describes the monomer molecular orbitals

Type: string

Possible Values: basis string

Default: No Default

BASIS (SCF)
SCF — Primary basis set

Type: string

Possible Values: basis string

Default: No Default

BASIS_GUESS (SCF)
SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P).

Type: string

Default: FALSE

BASIS_RELATIVISTIC (GLOBALS)
GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis.

Type: string

Default: No Default

BCCD_MAXITER (CCENERGY)
CCENERGY — Maximum number of iterations for Brueckner CCD.

Type: integer

Default: 50

BENCH (GLOBALS)
GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files

Type: integer

Default: 0

BENDAZZOLI (DETCI)
DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general.

Type: boolean

Default: false

BORDER (PE)
PE — Activate border options for sites in proximity to the QM/MM border

Type: boolean

Default: false

BORDER_N_REDIST (PE)
PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region

Type: integer

Default: -1

BORDER_REDIST_ORDER (PE)
PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed

Type: integer

Default: 1

BORDER_REDIST_POL (PE)
PE — redistribute polarizabilities? If false, polarizabilities are removed (default)

Type: boolean

Default: false

BORDER_RMIN (PE)
PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution

Type: double

Default: 2.2

BORDER_RMIN_UNIT (PE)
PE — unit of BORDER_RMIN, default is atomic units (AU)

Type: string

Possible Values: AU, AA

Default: AU

BORDER_TYPE (PE)
PE — border type, either remove or redistribute moments/polarizabilities

Type: string

Possible Values: REMOVE, REDIST

Default: REMOVE

BRIANQC_ENABLE (GLOBALS)
GLOBALS — Whether to enable using the BrianQC GPU module

Type: boolean

Default: false

BRUECKNER_MAXITER (FNOCC)
FNOCC — Maximum number of iterations for Brueckner orbitals optimization

Type: integer

Default: 20

BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)
CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest 
 amplitude. Default adjusts depending on E_CONVERGENCE.

Type: conv double

Default: 1e-5

CACHELEVEL (CCDENSITY)
CCDENSITY — The amount of caching of data to perform

Type: integer

Default: 2

CACHELEVEL (CCENERGY)
CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., 
 integrals) may be held in the cache.

Type: integer

Default: 2

CACHELEVEL (CCEOM)
CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., 
 integrals) may be held in the cache.

Type: integer

Default: 2

CACHELEVEL (CCHBAR)
CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., 
 integrals) may be held in the cache.

Type: integer

Default: 2

CACHELEVEL (CCLAMBDA)
CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., 
 integrals) may be held in the cache.

Type: integer

Default: 2

CACHELEVEL (CCRESPONSE)
CCRESPONSE — Caching level for libdpd

Type: integer

Default: 2

CACHELEVEL (CCTRANSORT)
CCTRANSORT — Caching level for libdpd

Type: integer

Default: 2

CACHELEVEL (DCT)
DCT (Expert) — Controls how to cache quantities within the DPD library

Type: integer

Default: 2

CACHELEVEL (OCC)
OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., 
 integrals) may be held in the cache.

Type: integer

Default: 2

CACHETYPE (CCENERGY)
CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted.

Type: string

Possible Values: LOW, LRU

Default: LOW

CACHETYPE (CCEOM)
CCEOM — The criterion used to retain/release cached data

Type: string

Possible Values: LOW, LRU

Default: LRU

CALC_S_SQUARED (DETCI)
DETCI — Do calculate the value of 
 for each root? Only supported for ICORE = 1.

Type: boolean

Default: false

CANONICALIZE_ACTIVE_FAVG (MCSCF)
MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?

Type: boolean

Default: false

CANONICALIZE_INACTIVE_FAVG (MCSCF)
MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?

Type: boolean

Default: false

CART_HESS_READ (OPTKING)
OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead.

Type: boolean

Default: false

CARTESIAN_SYM_TOLERANCE (OPTKING)
OPTKING — Tolerance for symmetrizing cartesian geometry between steps

Type: conv double

Default: 1e-7

CC (DETCI)
DETCI — Do coupled-cluster computation?

Type: boolean

Default: false

CC3_FOLLOW_ROOT (CCEOM)
CCEOM — Do turn on root following for CC3

Type: boolean

Default: false

CC_A_RAS3_MAX (DETCI)
DETCI — maximum number of alpha electrons in RAS III, for CC

Type: integer

Default: -1

CC_B_RAS3_MAX (DETCI)
DETCI — maximum number of beta electrons in RAS III, for CC

Type: integer

Default: -1

CC_DIIS_MAX_VECS (DFOCC)
DFOCC — Maximum number of vectors used in amplitude DIIS

Type: integer

Default: 6

CC_DIIS_MIN_VECS (DFOCC)
DFOCC — Minimum number of vectors used in amplitude DIIS

Type: integer

Default: 2

CC_EX_LEVEL (DETCI)
DETCI — The CC excitation level

Type: integer

Default: 2

CC_FIX_EXTERNAL (DETCI)
DETCI (Expert) — Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC methods.

Type: boolean

Default: false

CC_FIX_EXTERNAL_MIN (DETCI)
DETCI (Expert) — Number of external indices before amplitude gets fixed by CC_FIX_EXTERNAL. Experimental.

Type: integer

Default: 1

CC_LAMBDA (DFOCC)
DFOCC — Do solve lambda amplitude equations?

Type: boolean

Default: false

CC_MACRO (DETCI)
DETCI (Expert) — CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], … ] Optional additional restrictions on allowed excitations in coupled-cluster computations, based on macroconfiguration selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], eliminate cluster amplitudes in which: [the excitation level (holes in I + II) is equal to ex_lvl] AND [there are more than max_holes_I holes in RAS I, there are more than max_parts_IV particles in RAS IV, OR there are more than max_I+IV quasiparticles in RAS I + RAS IV].

Type: array

Default: No Default

CC_MAXITER (DFOCC)
DFOCC — Maximum number of iterations to determine the amplitudes

Type: integer

Default: 50

CC_MAXITER (OCC)
OCC — Maximum number of iterations to determine the amplitudes

Type: integer

Default: 50

CC_MIXED (DETCI)
DETCI (Expert) — Do ignore block if num holes in RAS I and II is 
 cc_ex_lvl and if any indices correspond to RAS I or IV (i.e., include only all-active higher excitations)?

Type: boolean

Default: true

CC_NUM_THREADS (CCENERGY)
CCENERGY — Number of threads

Type: integer

Default: 1

CC_NUM_THREADS (CCEOM)
CCEOM — Number of threads

Type: integer

Default: 1

CC_NUM_THREADS (CCTRIPLES)
CCTRIPLES — Number of threads

Type: integer

Default: 1

CC_NUM_THREADS (PSIMRCC)
PSIMRCC — Number of threads

Type: integer

Default: 1

CC_OS_SCALE (CCENERGY)
CCENERGY — Coupled-cluster opposite-spin scaling value

Type: double

Default: 1.27

CC_RAS34_MAX (DETCI)
DETCI — maximum number of electrons in RAS III + IV, for CC

Type: integer

Default: -1

CC_RAS3_MAX (DETCI)
DETCI — maximum number of electrons in RAS III, for CC

Type: integer

Default: -1

CC_RAS4_MAX (DETCI)
DETCI — maximum number of electrons in RAS IV, for CC

Type: integer

Default: -1

CC_SCALE_OS (FNOCC)
FNOCC — Oppposite-spin scaling factor for SCS-CCSD

Type: double

Default: 1.27

CC_SCALE_SS (FNOCC)
FNOCC — Same-spin scaling factor for SCS-CCSD

Type: double

Default: 1.13

CC_SS_SCALE (CCENERGY)
CCENERGY — Coupled-cluster same-spin scaling value

Type: double

Default: 1.13

CC_TIMINGS (FNOCC)
FNOCC — Do time each cc diagram?

Type: boolean

Default: false

CC_TYPE (GLOBALS)
GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF, REMP). See Cross-module Redundancies for details.

Type: string

Possible Values: DF, CONV, CD

Default: CONV

CC_UPDATE_EPS (DETCI)
DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental.

Type: boolean

Default: true

CC_VAL_EX_LEVEL (DETCI)
DETCI — The CC valence excitation level

Type: integer

Default: 0

CC_VARIATIONAL (DETCI)
DETCI (Expert) — Do use variational energy expression in CC computation? Experimental.

Type: boolean

Default: false

CC_VECS_READ (DETCI)
DETCI — Do import a CC vector from disk?

Type: boolean

Default: false

CC_VECS_WRITE (DETCI)
DETCI — Do export a CC vector to disk?

Type: boolean

Default: false

CCD_E_CONVERGENCE (SAPT)
SAPT — E converge value for CCD

Type: conv double

Default: 1e-8

CCD_MAXITER (SAPT)
SAPT — Max CCD iterations

Type: integer

Default: 50

CCD_T_CONVERGENCE (SAPT)
SAPT — Convergence tolerance for CCD amplitudes

Type: conv double

Default: 1e-8

CCL_ENERGY (OCC)
OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option.

Type: boolean

Default: false

CEPA_LEVEL (FNOCC)
FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure.

Type: string

Default: CEPA(0)

CEPA_NO_SINGLES (FNOCC)
FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation.

Type: boolean

Default: false

CEPA_OS_SCALE (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 1.27

CEPA_SOS_SCALE (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 1.3

CEPA_SS_SCALE (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 1.13

CEPA_TYPE (OCC)
OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0.

Type: string

Possible Values: CEPA0

Default: CEPA0

CFOUR_ABCDTYPE (CFOUR)
CFOUR — Specifies the way the 
 molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all 
 integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the 
 integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations.

Type: string

Possible Values: STANDARD, AOBASIS

Default: STANDARD

CFOUR_ACTIVE_ORBI (CFOUR)
CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION .

Type: array

Default: No Default

CFOUR_ANH_ALGORITHM (CFOUR)
CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode.

Type: string

Possible Values: STANDARD, PARALLEL

Default: STANDARD

CFOUR_ANH_DERIVATIVES (CFOUR)
CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND).

Type: string

Possible Values: FIRST, SECOND

Default: SECOND

CFOUR_ANH_STEPSIZE (CFOUR)
CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is 
 the integer value specified.

Type: integer

Default: 50000

CFOUR_ANH_SYMMETRY (CFOUR)
CFOUR — Specifies whether non-abelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules.

Type: string

Possible Values: ABELIAN, NONABELIAN

Default: ABELIAN

CFOUR_ANHARMONIC (CFOUR)
CFOUR — Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form 
, where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form 
, which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs.

Type: string

Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF

Default: OFF

CFOUR_AO_LADDERS (CFOUR)
CFOUR — Can be used to control the algorithm used by CFOUR when terms involving 
 molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used.

Type: string

Possible Values: MULTIPASS, SINGLEPASS

Default: SINGLEPASS

CFOUR_AV_SCF (CFOUR)
CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT.

Type: boolean

Default: false

CFOUR_BASIS (CFOUR)
CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately.

Type: string

Default: SPECIAL

CFOUR_BRUCK_CONV (CFOUR)
CFOUR — experimental use

Type: integer

Default: 4

CFOUR_BRUECKNER (CFOUR)
CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined.

Type: boolean

Default: false

CFOUR_CACHE_RECS (CFOUR)
CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100.

Type: integer

Default: 10

CFOUR_CALC_LEVEL (CFOUR)
CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available.

Type: string

Default: SCF

CFOUR_CC_CONV (CFOUR)
CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than 
, where 
 is the value associated with the keyword.

Type: integer

Default: 7

CFOUR_CC_EXPORDER (CFOUR)
CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations.

Type: integer

Default: 5

CFOUR_CC_EXTRAPOLATION (CFOUR)
CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended.

Type: string

Possible Values: RLE, DIIS, NOJACOBI, OFF

Default: DIIS

CFOUR_CC_MAXCYC (CFOUR)
CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations.

Type: integer

Default: 50

CFOUR_CC_PROGRAM (CFOUR)
CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly.

Type: string

Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL

Default: VCC

CFOUR_CHARGE (CFOUR)
CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule.

Type: integer

Default: 0

CFOUR_CIS_CONV (CFOUR)
CFOUR — Specifies the convergence threshold as 
 for CIS calculations.

Type: integer

Default: 5

CFOUR_CONTINUUM (CFOUR)
CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied.

Type: string

Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED

Default: NONE

CFOUR_CONTRACTION (CFOUR)
CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode.

Type: string

Possible Values: SEGMENTED, GENERAL, UNCONTRACTED

Default: GENERAL

CFOUR_CONVERGENCE (CFOUR)
CFOUR — Identical to CFOUR_GEO_CONV.

Type: integer

Default: 4

CFOUR_COORDINATES (CFOUR)
CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply.

Type: string

Possible Values: INTERNAL, CARTESIAN, XYZINT

Default: INTERNAL

CFOUR_CORE_ORBITALS (CFOUR)
CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION.

Type: array

Default: No Default

CFOUR_CPHF_CONVER (CFOUR)
CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below 
.

Type: integer

Default: 12

CFOUR_CPHF_MAXCYC (CFOUR)
CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations.

Type: integer

Default: 64

CFOUR_CURVILINEAR (CFOUR)
CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise).

Type: boolean

Default: true

CFOUR_DBOC (CFOUR)
CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions.

Type: boolean

Default: false

CFOUR_DCT (CFOUR)
CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0).

Type: boolean

Default: false

CFOUR_DERIV_LEVEL (CFOUR)
CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc.

Type: string

Possible Values: ZERO, FIRST, SECOND

Default: ZERO

CFOUR_DIFF_TYPE (CFOUR)
CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation.

Type: string

Possible Values: RELAXED, UNRELAXED

Default: RELAXED

CFOUR_DROPMO (CFOUR)
CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64].

Type: array

Default: No Default

CFOUR_ECP (CFOUR)
CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0).

Type: boolean

Default: false

CFOUR_EIGENVECTOR (CFOUR)
CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking for a specific transition state which you know corresponds to motion along a different mode. In the future, relatively sophisticated generation of a guessed eigenvector will be implemented, but this is the way things are for now. Of course, this keyword has no meaning if CFOUR_METHOD is not set to TS.

Type: integer

Default: 1

CFOUR_EL_ANHARM (CFOUR)
CFOUR — Experimental use, ON = 1 requests the evaluation of electrical anharmonicities

Type: boolean

Default: false

CFOUR_EOM_NONIT (CFOUR)
CFOUR — Controls whether non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks.

Type: boolean

Default: false

CFOUR_ESTATE_CONV (CFOUR)
CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below 
 with 
 as the value specified with this keyword.

Type: integer

Default: 5

CFOUR_ESTATE_MAXCYC (CFOUR)
CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations)

Type: integer

Default: 20

CFOUR_ESTATE_PROP (CFOUR)
CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF.

Type: string

Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE

Default: No Default

CFOUR_ESTATE_SYM (CFOUR)
CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2].

Type: array

Default: No Default

CFOUR_ESTATE_TRANS (CFOUR)
CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR.

Type: string

Possible Values: OFF, EXPECTATION

Default: OFF

CFOUR_EVAL_HESS (CFOUR)
CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY.

Type: integer

Default: 0

CFOUR_EXCITATION (CFOUR)
CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n).

Type: integer

Default: 0

CFOUR_EXCITE (CFOUR)
CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states).

Type: string

Possible Values: NONE, EOMEE, EOMIP, EOMEA

Default: NONE

CFOUR_FC_FIELD (CFOUR)
CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword 
. The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0)

Type: integer

Default: 0

CFOUR_FD_CALCTYPE (CFOUR)
CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available.

Type: string

Possible Values: GRADONLY, ENERONLY, MIXED

Default: GRADONLY

CFOUR_FD_IRREPS (CFOUR)
CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations

Type: array

Default: No Default

CFOUR_FD_PROJECT (CFOUR)
CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points.

Type: string

Possible Values: ON, OFF

Default: ON

CFOUR_FD_STEPSIZE (CFOUR)
CFOUR — Specifies the step length in mass-weighted coordinates (in 
 ) used in generating the force constant matrix by finite difference of Cartesian gradients.

Type: integer

Default: 5

CFOUR_FD_USEGROUP (CFOUR)
CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation.

Type: string

Possible Values: FULL, COMP

Default: FULL

CFOUR_FILE_RECSIZ (CFOUR)
CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands.

Type: integer

Default: 2048

CFOUR_FILE_STRIPE (CFOUR)
CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively.

Type: string

Default: 0/0/0/0/0

CFOUR_FINITE_PERTURBATION (CFOUR)
CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword 
.

Type: integer

Default: 0

CFOUR_FOCK (CFOUR)
CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while AO (=1) constructs the matrix directly from the basis function integrals. In general, PK is somewhat faster, but results in considerable use of disk space when out-of-core algorithms are required. (Default: FOCK).

Type: string

Possible Values: PK, AO

Default: No Default

CFOUR_FREQ_ALGORITHM (CFOUR)
CFOUR — FREQ_ALGORIT experimental use

Type: string

Possible Values: STANDARD, PARALLEL

Default: STANDARD

CFOUR_FROZEN_CORE (CFOUR)
CFOUR — Specifies whether in the correlation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals.

Type: boolean

Default: false

CFOUR_FROZEN_VIRT (CFOUR)
CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section.

Type: boolean

Default: false

CFOUR_GAMMA_ABCD (CFOUR)
CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices 
. DISK (=0) directs the program to calculate and store all elements of 
, while DIRECT (=1) tells the program to use alternative algorithms in which 
 is calculated and used “on the fly”. Note that this option might be not available for all type of calculations.

Type: string

Possible Values: DISK, DIRECT

Default: DISK

CFOUR_GENBAS_1 (CFOUR)
CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry.

Type: string

Default: No Default

CFOUR_GENBAS_2 (CFOUR)
CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms.

Type: string

Default: No Default

CFOUR_GENBAS_3 (CFOUR)
CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms.

Type: string

Default: No Default

CFOUR_GENBAS_4 (CFOUR)
CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms.

Type: string

Default: No Default

CFOUR_GEO_CONV (CFOUR)
CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below 
 Hartree/bohr, where 
 is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions.

Type: integer

Default: 5

CFOUR_GEO_MAXCYC (CFOUR)
CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER.

Type: integer

Default: 50

CFOUR_GEO_MAXSTEP (CFOUR)
CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT.

Type: integer

Default: 300

CFOUR_GEO_METHOD (CFOUR)
CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized).

Type: string

Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY

Default: SINGLE_POINT

CFOUR_GIAO (CFOUR)
CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF

Type: string

Possible Values: ON, OFF

Default: No Default

CFOUR_GRID (CFOUR)
CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF)

Type: string

Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE

Default: OFF

CFOUR_GUESS (CFOUR)
CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD)

Type: string

Possible Values: MOREAD, CORE

Default: MOREAD

CFOUR_HBAR (CFOUR)
CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved.

Type: boolean

Default: false

CFOUR_HFSTABILITY (CFOUR)
CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun.

Type: string

Possible Values: OFF, ON, FOLLOW

Default: OFF

CFOUR_INCORE (CFOUR)
CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the 
 molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the 
 and 
 integrals are held in core; (=5) 
 and 
 and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0)

Type: string

Possible Values: OFF, ALL, PARTIAL

Default: OFF

CFOUR_INPUT_MRCC (CFOUR)
CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified.

Type: boolean

Default: true

CFOUR_INTEGRALS (CFOUR)
CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL).

Type: string

Possible Values: VMOL, ARGOS

Default: VMOL

CFOUR_JODA_PRINT (CFOUR)
CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk.

Type: integer

Default: 0

CFOUR_LINEQ_CONV (CFOUR)
CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below 
, where 
 is the value associated with this keyword.

Type: integer

Default: 7

CFOUR_LINEQ_MAXCY (CFOUR)
CFOUR — The maximum number of iterations in all linear CC equations.

Type: integer

Default: 50

CFOUR_LINEQ_TYPE (CFOUR)
CFOUR — Determines the algorithm used to solve linear equations ( 
 and derivative 
 and 
 ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS)

Type: string

Possible Values: POPLE, DIIS

Default: DIIS

CFOUR_LOCK_ORBOCC (CFOUR)
CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.)

Type: boolean

Default: false

CFOUR_MAXSTEP (CFOUR)
CFOUR — Identical to CFOUR_GEO_MAXSTEP.

Type: integer

Default: 300

CFOUR_MEM_UNIT (CFOUR)
CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB.

Type: string

Possible Values: INTEGERWORDS, KB, MB, GB, TB

Default: INTEGERWORDS

CFOUR_MEMORY_SIZE (CFOUR)
CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given.

Type: integer

Default: 100000000

CFOUR_METHOD (CFOUR)
CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE.

Type: string

Possible Values: NR, RFA, TS, MANR, SINGLE_POINT

Default: SINGLE_POINT

CFOUR_MRCC (CFOUR)
CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz.

Type: boolean

Default: false

CFOUR_MULTIPLICITY (CFOUR)
CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule.

Type: integer

Default: 1

CFOUR_NACOUPLING (CFOUR)
CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT.

Type: string

Possible Values: ON, NACV, LVC

Default: OFF

CFOUR_NEGEVAL (CFOUR)
CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead.

Type: string

Possible Values: ABORT, SWITCH, RFA

Default: ABORT

CFOUR_NEWNORM (CFOUR)
CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations.

Type: boolean

Default: false

CFOUR_NONHF (CFOUR)
CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically.

Type: boolean

Default: false

CFOUR_NTOP_TAMP (CFOUR)
CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed.

Type: integer

Default: 15

CFOUR_OCCUPATION (CFOUR)
CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the 
 and 
 sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the 
 water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]].

Type: array

Default: No Default

CFOUR_OMP_NUM_THREADS (CFOUR)
CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR.

Type: integer

Default: 1

CFOUR_OPEN-SHELL (CFOUR)
CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8).

Type: string

Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC

Default: SPIN-ORBITAL

CFOUR_OPT_MAXCYC (CFOUR)
CFOUR — Identical to CFOUR_GEO_MAXCYC.

Type: integer

Default: 50

CFOUR_ORBITALS (CFOUR)
CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the 
 and the 
 spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blocks of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default.

Type: string

Possible Values: STANDARD, SEMICANONICAL

Default: STANDARD

CFOUR_PERT_ORB (CFOUR)
CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives.

Type: string

Possible Values: STANDARD, CANONICAL, IJ_CANONICAL

Default: No Default

CFOUR_POINTS (CFOUR)
CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work.

Type: string

Possible Values: SINGLE, DOUBLE

Default: DOUBLE

CFOUR_PRINT (CFOUR)
CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc.

Type: integer

Default: 0

CFOUR_PROP_INTEGRAL (CFOUR)
CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1).

Type: string

Possible Values: INTERNAL, EXTERNAL

Default: INTERNAL

CFOUR_PROPS (CFOUR)
CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants.

Type: string

Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET

Default: OFF

CFOUR_QRHF_GENERAL (CFOUR)
CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed.

Type: array

Default: No Default

CFOUR_QRHF_ORBITAL (CFOUR)
CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1)

Type: array

Default: No Default

CFOUR_QRHFGUES (CFOUR)
CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals.

Type: boolean

Default: false

CFOUR_RAMAN_INT (CFOUR)
CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor.

Type: string

Possible Values: ON, DYN, OFF

Default: OFF

CFOUR_RAMAN_ORB (CFOUR)
CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0).

Type: string

Possible Values: RELAXED, UNRELAXED

Default: UNRELAXED

CFOUR_RDO (CFOUR)
CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute.

Type: boolean

Default: true

CFOUR_REFERENCE (CFOUR)
CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly.

Type: string

Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF

Default: RHF

CFOUR_RELATIVISTIC (CFOUR)
CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2).

Type: string

Possible Values: OFF, MVD1, MVd2, DPT2, SF-DPT4, DPT4, SF-DPT6, SFREE, X2C1E, DPT

Default: OFF

CFOUR_RELAX_DENS (CFOUR)
CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed.

Type: boolean

Default: false

CFOUR_RES_RAMAN (CFOUR)
CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable.

Type: boolean

Default: false

CFOUR_RESTART_CC (CFOUR)
CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD.

Type: boolean

Default: false

CFOUR_ROT_EVEC (CFOUR)
CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue.

Type: integer

Default: 0

CFOUR_SAVE_INTS (CFOUR)
CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved.

Type: boolean

Default: false

CFOUR_SCALE_ON (CFOUR)
CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)).

Type: string

Possible Values: MAG(S), MAX(S)

Default: MAG(S)

CFOUR_SCF_CONV (CFOUR)
CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix elements is less than 
. Psi4 Interface: Keyword subject to translation from value of D_CONVERGENCE unless set explicitly.

Type: integer

Default: 7

CFOUR_SCF_DAMPING (CFOUR)
CFOUR — Controls the damping (in the first iterations (specified by CFOUR_SCF_EXPSTART via 
 with 
 as the value specified by the keyword. The default value is currently 1000 (no damping), but a value of 500 is recommended in particular for transition metal compounds where the SCF convergence is often troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly.

Type: integer

Default: 1000

CFOUR_SCF_EXPORDER (CFOUR)
CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure.

Type: integer

Default: 6

CFOUR_SCF_EXPSTART (CFOUR)
CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied.

Type: integer

Default: 8

CFOUR_SCF_EXTRAPOLATION (CFOUR)
CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS.

Type: boolean

Default: true

CFOUR_SCF_MAXCYC (CFOUR)
CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly.

Type: integer

Default: 150

CFOUR_SD_FIELD (CFOUR)
CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword 
. (Default : 0, currently not implemented)

Type: integer

Default: 0

CFOUR_SPHERICAL (CFOUR)
CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly.

Type: boolean

Default: true

CFOUR_SPIN_FLIP (CFOUR)
CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the 
 quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON.

Type: boolean

Default: false

CFOUR_SPIN_ORBIT (CFOUR)
CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)).

Type: string

Possible Values: ON, MEANSO, OFF

Default: OFF

CFOUR_SPIN_SCAL (CFOUR)
CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF.

Type: boolean

Default: false

CFOUR_SPINROTATION (CFOUR)
CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculation (ON, =1) or not (OFF, =9). In the case of electronic g-tensor calculations for open-shell molecules this keyword controls the calculation of the electronic spin-rotation tensor.

Type: boolean

Default: false

CFOUR_SUBGROUP (CFOUR)
CFOUR — Specifies an Abelian subgroup to be used in a calculation. Acceptable arguments are DEFAULT (=0); C1 (= 1); C2 (= 2); CS (= 3); CI (= 4); C2V (= 5); C2H (= 6); D2 (= 7) and D2H (= 8). Use of C1 is of course equivalent to setting CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup.

Type: string

Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF

Default: DEFAULT

CFOUR_SYM_CHECK (CFOUR)
CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default.

Type: boolean

Default: true

CFOUR_SYMMETRY (CFOUR)
CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in 
 ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( 
 and its subgroups).

Type: boolean

Default: true

CFOUR_T3_EXTRAPOL (CFOUR)
CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc.

Type: boolean

Default: false

CFOUR_TAMP_SUM (CFOUR)
CFOUR — Specifies how often the largest 
 amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc.

Type: integer

Default: 5

CFOUR_THERMOCHEMISTRY (CFOUR)
CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version)

Type: string

Possible Values: OFF, ON, VERBOSE

Default: ON

CFOUR_TRANS_INV (CFOUR)
CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off.

Type: string

Possible Values: USE, IGNORE

Default: USE

CFOUR_TREAT_PERT (CFOUR)
CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space.

Type: string

Possible Values: SIMULTANEOUS, SEQUENTIAL

Default: SIMULTANEOUS

CFOUR_UIJ_THRESHOLD (CFOUR)
CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version)

Type: integer

Default: 25

CFOUR_UNITS (CFOUR)
CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM.

Type: string

Possible Values: ANGSTROM, BOHR

Default: ANGSTROM

CFOUR_UPDATE_HESSIAN (CFOUR)
CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version).

Type: boolean

Default: true

CFOUR_VIBRATION (CFOUR)
CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated.

Type: string

Possible Values: NO, ANALYTIC, FINDIF, EXACT

Default: NO

CFOUR_VTRAN (CFOUR)
CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the 
 integrals are not formed.

Type: string

Possible Values: FULL/PARTIAL, FULL, PARTIAL

Default: FULL/PARTIAL

CFOUR_XFIELD (CFOUR)
CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword 
. This allows field strengths 
 to be used.

Type: integer

Default: 0

CFOUR_XFORM_TOL (CFOUR)
CFOUR — The tolerance for storing transformed integrals. Integrals less than 
 are neglected and not stored on disk.

Type: integer

Default: 11

CFOUR_YFIELD (CFOUR)
CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword 
. This allows field strengths 
 to be used.

Type: integer

Default: 0

CFOUR_ZFIELD (CFOUR)
CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword 
. This allows field strengths 
 to be used.

Type: integer

Default: 0

CHOLESKY (DFOCC)
DFOCC — Do Cholesky decomposition of the ERI tensor

Type: boolean

Default: false

CHOLESKY_TOLERANCE (DFOCC)
DFOCC — tolerance for Cholesky decomposition of the ERI tensor

Type: conv double

Default: 1.0e-4

CHOLESKY_TOLERANCE (FNOCC)
FNOCC — tolerance for Cholesky decomposition of the ERI tensor

Type: conv double

Default: 1.0e-4

CHOLESKY_TOLERANCE (SCF)
SCF — Tolerance for Cholesky decomposition of the ERI tensor

Type: conv double

Default: 1e-4

CI_DIIS (MCSCF)
MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?

Type: boolean

Default: false

CI_FILE_START (DETCI)
DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 350 for normal CI calculations and 354 if we are going to do a second monomer.

Type: integer

Default: 350

CI_MAXITER (DETCI)
DETCI — Maximum number of iterations to diagonalize the Hamiltonian

Type: integer

Default: 24

CI_NUM_THREADS (DETCI)
DETCI (Expert) — Number of threads for DETCI.

Type: integer

Default: 1

CI_TYPE (GLOBALS)
GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details.

Type: string

Possible Values: CONV

Default: CONV

CIBLKS_PRINT (DETCI)
DETCI — Do print a summary of the CI blocks?

Type: boolean

Default: false

COLLAPSE_SIZE (DETCI)
DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1.

Type: integer

Default: 1

COLLAPSE_WITH_LAST (CCEOM)
CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence.

Type: boolean

Default: true

COLLAPSE_WITH_LAST_CC3 (CCEOM)
CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots.

Type: boolean

Default: false

COMPLEX_TOLERANCE (CCEOM)
CCEOM — Complex tolerance applied in CCEOM computations

Type: conv double

Default: 1e-12

COMPUT_S2 (DFOCC)
DFOCC — Do compute 
 for DF-OMP2/DF-MP2?

Type: boolean

Default: false

COMPUTE_MP4_TRIPLES (FNOCC)
FNOCC (Expert) — Do compute MP4 triples contribution?

Type: boolean

Default: false

COMPUTE_TRIPLES (FNOCC)
FNOCC (Expert) — Do compute triples contribution?

Type: boolean

Default: true

CONSECUTIVE_BACKSTEPS (OPTKING)
OPTKING — Set number of consecutive backward steps allowed in optimization

Type: integer

Default: 0

CORR_ANSATZ (PSIMRCC)
PSIMRCC — The ansatz to use for MRCC computations

Type: string

Possible Values: SR, MK, BW, APBW

Default: MK

CORR_CCSD_T (PSIMRCC)
PSIMRCC — The type of CCSD(T) computation to perform

Type: string

Possible Values: STANDARD, PITTNER

Default: STANDARD

CORR_CHARGE (PSIMRCC)
PSIMRCC — The molecular charge of the target state

Type: integer

Default: 0

CORR_MULTP (PSIMRCC)
PSIMRCC — The multiplicity, 
, of the target state. Must be specified if different from the reference 
.

Type: integer

Default: 1

CORR_WFN (PSIMRCC)
PSIMRCC — The type of correlated wavefunction

Type: string

Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T

Default: CCSD

COSX_BASIS_TOLERANCE (SCF)
SCF (Expert) — Screening criteria for basis function values on COSX grids

Type: conv double

Default: 1.0e-10

COSX_DENSITY_TOLERANCE (SCF)
SCF (Expert) — Screening criteria for shell-pair densities in COSX

Type: conv double

Default: 1.0e-10

COSX_INTS_TOLERANCE (SCF)
SCF — Screening criteria for integrals and intermediates in COSX

Type: conv double

Default: 1.0e-11

COSX_MAXITER_FINAL (SCF)
SCF — Controls SCF iteration behavior for the larger (i.e., final) COSX grid. -1 fully converges the SCF on the final grid if possible, ending early if MAXITER total SCF iterations are reached (failure). 0 disables the final COSX grid entirely. n runs up to n iterations on the final COSX grid, ending early if SCF convergence is reached (success) or if MAXITER total SCF iterations are reached (failure).

Type: integer

Default: 1

COSX_OVERLAP_FITTING (SCF)
SCF (Expert) — Do reduce numerical COSX errors with overlap fitting?

Type: boolean

Default: true

COSX_PRUNING_SCHEME (SCF)
SCF (Expert) — Pruning scheme for COSX grids

Type: string

Default: ROBUST

COSX_RADIAL_POINTS_FINAL (SCF)
SCF — Number of radial points in final COSX grid.

Type: integer

Default: 35

COSX_RADIAL_POINTS_INITIAL (SCF)
SCF — Number of radial points in initial COSX grid.

Type: integer

Default: 25

COSX_SPHERICAL_POINTS_FINAL (SCF)
SCF — Number of spherical points in final COSX grid.

Type: integer

Default: 110

COSX_SPHERICAL_POINTS_INITIAL (SCF)
SCF — Number of spherical points in initial COSX grid.

Type: integer

Default: 50

COUPLED_INDUCTION (SAPT)
SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used.

Type: boolean

Default: true

COUPLING (PSIMRCC)
PSIMRCC — The order of coupling terms to include in MRCCSDT computations

Type: string

Possible Values: NONE, LINEAR, QUADRATIC, CUBIC

Default: CUBIC

COUPLING_TERMS (PSIMRCC)
PSIMRCC — Do include the terms that couple the reference determinants?

Type: boolean

Default: true

COVALENT_CONNECT (OPTKING)
OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii.

Type: double

Default: 1.3

CPHF_MEM_SAFETY_FACTOR (CPHF)
CPHF — Memory safety factor for allocating JK

Type: double

Default: 0.75

CPHF_R_CONVERGENCE (FISAPT)
FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT 
 term.

Type: conv double

Default: 1e-8

CPHF_R_CONVERGENCE (SAPT)
SAPT — Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT 
 term. This applies to wavefunction-based SAPT or SAPT(DFT). See CPHF_R_CONVERGENCE for fragment-partitioned or intramolecular SAPT.

Type: conv double

Default: 1e-8

CPHF_TASKS (CPHF)
CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *

Type: array

Default: No Default

CUBEPROP_BASIS_FUNCTIONS (GLOBALS)
GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty.

Type: array

Default: No Default

CUBEPROP_FILEPATH (GLOBALS)
GLOBALS — Directory to which to write cube files. Default is the input file directory.

Type: string

Default: No Default

CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)
GLOBALS — Fraction of density captured by adaptive isocontour values

Type: double

Default: 0.85

CUBEPROP_ORBITALS (GLOBALS)
GLOBALS — List of orbital indices for which cube files are generated (1-based, 
 for alpha, 
 for beta). All orbitals computed if empty.

Type: array

Default: No Default

CUBEPROP_TASKS (GLOBALS)
GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO.

Type: array

Default: No Default

CUBIC_BASIS_TOLERANCE (FISAPT)
FISAPT (Expert) — CubicScalarGrid basis cutoff.

Type: conv double

Default: 1.0e-12

CUBIC_BASIS_TOLERANCE (GLOBALS)
GLOBALS (Expert) — CubicScalarGrid basis cutoff.

Type: conv double

Default: 1.0e-12

CUBIC_BLOCK_MAX_POINTS (FISAPT)
FISAPT (Expert) — CubicScalarGrid maximum number of grid points per evaluation block.

Type: integer

Default: 1000

CUBIC_BLOCK_MAX_POINTS (GLOBALS)
GLOBALS (Expert) — CubicScalarGrid maximum number of grid points per evaluation block.

Type: integer

Default: 1000

CUBIC_GRID_OVERAGE (FISAPT)
FISAPT — CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each.

Type: array

Default: No Default

CUBIC_GRID_OVERAGE (GLOBALS)
GLOBALS — CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each.

Type: array

Default: No Default

CUBIC_GRID_SPACING (FISAPT)
FISAPT — CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each.

Type: array

Default: No Default

CUBIC_GRID_SPACING (GLOBALS)
GLOBALS — CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each.

Type: array

Default: No Default

CUSTOM_COORDS (OPTKING)
OPTKING — A string formatted as a dicitonary containing a set of coordinates. Coordinates can be appended to Optking’s coordinate set or used on their own - expected optking 0.3.1.

Type: string

Default: No Default

CUTOFF (DFOCC)
DFOCC — Cutoff value for numerical procedures

Type: integer

Default: 8

CUTOFF (OCC)
OCC — Cutoff value for numerical procedures

Type: integer

Default: 14

CUTOFF_AMPS_PRINT (ADC)
ADC — Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend.

Type: double

Default: 0.01

D_CONVERGENCE (MCSCF)
MCSCF — Convergence criterion for density, as measured by the orbital gradient.

Type: conv double

Default: 1e-6

D_CONVERGENCE (SCF)
SCF — Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV.

Type: conv double

Default: 1e-6

DAMP_INDUCED (PE)
PE — Enable Thole damping for induced moments

Type: boolean

Default: false

DAMP_MULTIPOLE (PE)
PE — Enable Thole damping for multipole fields

Type: boolean

Default: false

DAMPING_CONVERGENCE (SCF)
SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING.

Type: conv double

Default: 1.0e-18

DAMPING_FACTOR_INDUCED (PE)
PE — Thole damping factor for induced moments

Type: double

Default: 2.1304

DAMPING_FACTOR_MULTIPOLE (PE)
PE — Thole damping factor for multipole fields

Type: double

Default: 2.1304

DAMPING_PERCENTAGE (DCT)
DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed.

Type: double

Default: 0.0

DAMPING_PERCENTAGE (PSIMRCC)
PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed.

Type: double

Default: 0.0

DAMPING_PERCENTAGE (SCF)
SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence.

Type: double

Default: 0.0

DCT_FUNCTIONAL (DCT)
DCT — Chooses appropriate DCT method

Type: string

Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0

Default: ODC-12

DCT_GUESS (DCT)
DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess.

Type: string

Possible Values: CC, BCC, MP2, DCT

Default: MP2

DCT_TYPE (DCT)
DCT — What algorithm to use for the DCT computation

Type: string

Possible Values: CONV, DF

Default: CONV

DDX (GLOBALS)
GLOBALS — DDX boolean for ddx module

Type: boolean

Default: false

DDX_DIIS_MAX_VECS (DDX)
DDX — Number of previous iterates to use in DIIS acceleration inside DDX

Type: integer

Default: 20

DDX_ETA (DDX)
DDX (Expert) — Regularization parameter for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [0, 1].

Type: double

Default: 0.1

DDX_FMM (DDX)
DDX — Use the fast multipole method to accelerate the solver

Type: boolean

Default: true

DDX_FMM_LOCAL_LMAX (DDX)
DDX — Maximal degree of local spherical harmonics (near-field FMM interations).

Type: integer

Default: 6

DDX_FMM_MULTIPOLE_LMAX (DDX)
DDX — Maximal degree of multipole spherical harmonics (far-field FMM interactions). Using the same value as DDX_LMAX is recommended and done by default.

Type: integer

Default: 9

DDX_INCORE (DDX)
DDX — Use an in-core version, which uses more memory, but is generally faster

Type: boolean

Default: false

DDX_LMAX (DDX)
DDX — Maximal degree of modelling spherical harmonics

Type: integer

Default: 9

DDX_LOGFILE (DDX)
DDX (Expert) — Logfile to dump a full trace of the DDX solver history for debugging.

Type: string

Default: No Default

DDX_MAXITER (DDX)
DDX — Maximal number of iterations used inside DDX

Type: integer

Default: 100

DDX_MODEL (DDX)
DDX — Switch available solvation models

Type: string

Possible Values: PCM, COSMO, LPB

Default: PCM

DDX_N_LEBEDEV (DDX)
DDX — Number of Lebedev grid points to use. (A Lebedev Points number)

Type: integer

Default: 302

DDX_RADII (DDX)
DDX — Custom cavity radii. One per atom, uses the unit of the molecule.

Type: array

Default: No Default

DDX_RADII_SCALING (DDX)
DDX — Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen.

Type: double

Default: 1.1

DDX_RADII_SET (DDX)
DDX — Radius set for cavity spheres. Ignored if RADII is set.

Type: string

Possible Values: UFF, BONDI

Default: UFF

DDX_SHIFT (DDX)
DDX (Expert) — Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift.

Type: double

Default: -100.0

DDX_SOLUTE_RADIAL_POINTS (DDX)
DDX — Number of radial points used to compute the integrals for DDX calculations

Type: integer

Default: 35

DDX_SOLUTE_SPHERICAL_POINTS (DDX)
DDX — Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number)

Type: integer

Default: 110

DDX_SOLVATION_CONVERGENCE (DDX)
DDX — Tolerance to which DDX linear systems are solved

Type: conv double

Default: 1e-8

DDX_SOLVENT (DDX)
DDX — Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set.

Type: string

Default: No Default

DDX_SOLVENT_EPSILON (DDX)
DDX — Dielectric constant of the solvent to use

Type: double

Default: 0

DDX_SOLVENT_EPSILON_OPTICAL (DDX)
DDX — Optical dielectric constant of the solvent to use for non-equilibrium solvation

Type: double

Default: 0

DDX_SOLVENT_KAPPA (DDX)
DDX — Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}).

Type: double

Default: 0

DEBUG (CCDENSITY)
CCDENSITY — Reproducing energies from densities ?

Type: integer

Default: 0

DEBUG (CPHF)
CPHF — The amount of debug information printed to the output file

Type: integer

Default: 0

DEBUG (GLOBALS)
GLOBALS (Expert) — The amount of information to print to the output file

Type: integer

Default: 0

DELETE_TEI (CCTRANSORT)
CCTRANSORT — Delete the SO two-electron integrals after the transformation?

Type: boolean

Default: true

DENOMINATOR_ALGORITHM (SAPT)
SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient.

Type: string

Possible Values: LAPLACE, CHOLESKY

Default: LAPLACE

DENOMINATOR_DELTA (SAPT)
SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the 
 and 
 evaluation.

Type: double

Default: 1.0e-6

DERTYPE (EFP)
EFP (Expert) — Do EFP gradient?

Type: string

Possible Values: NONE, FIRST

Default: NONE

DERTYPE (GLOBALS)
GLOBALS (Expert) — Derivative level

Type: string

Possible Values: NONE, FIRST, SECOND, RESPONSE

Default: NONE

DETCI_FREEZE_CORE (DETCI)
DETCI — Do freeze core orbitals?

Type: boolean

Default: true

DF_BASIS_CC (FNOCC)
FNOCC — Auxilliary basis for df-ccsd(t).

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_CC (GLOBALS)
GLOBALS — The density fitting basis to use in coupled cluster computations.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_DCT (DCT)
DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_ELST (SAPT)
SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to a JKFIT basis. Previous to v1.6, defaulted to DF_BASIS_SAPT. See fitting notes .

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_EP2 (DFEP2)
DFEP2 — Auxiliary basis set for EP2 density fitting computations. Defaults to a RI basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_GUESS (SCF)
SCF — When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the default basis, otherwise the specified basis is used.

Type: string

Possible Values: basis string

Default: FALSE

DF_BASIS_MCSCF (DETCI)
DETCI — Auxiliary basis set for MCSCF density fitted ERI computations. This only effects the “Q” matrix in Helgaker’s language. Defaults to a JKFIT basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_MP2 (DFMP2)
DFMP2 — Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_MP2 (DLPNO)
DLPNO — Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_SAD (SCF)
SCF (Expert) — Density fitting basis used in SAD

Type: string

Possible Values: basis string

Default: SAD-FIT

DF_BASIS_SAPT (SAPT)
SAPT — Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_SCF (CPHF)
CPHF — Auxiliary basis for SCF

Type: string

Possible Values: basis string

Default: No Default

DF_BASIS_SCF (SCF)
SCF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis.

Type: string

Possible Values: basis string

Default: No Default

DF_BUMP_R0 (SCF)
SCF — Bump function min radius

Type: double

Default: 0.0

DF_BUMP_R1 (SCF)
SCF — Bump function max radius

Type: double

Default: 0.0

DF_DOMAINS (SCF)
SCF — FastDF geometric fitting domain selection algorithm

Type: string

Possible Values: DIATOMIC, SPHERES

Default: DIATOMIC

DF_FITTING_CONDITION (SCF)
SCF (Expert) — Fitting Condition, i.e. eigenvalue threshold for RI basis. Analogous to S_TOLERANCE

Type: double

Default: 1.0e-10

DF_INTS_IO (DFMP2)
DFMP2 (Expert) — IO caching for CP corrections, etc

Type: string

Possible Values: NONE, SAVE, LOAD

Default: NONE

DF_INTS_IO (SCF)
SCF (Expert) — IO caching for CP corrections, etc. Changing this selects Disk_DF over Mem_DF. Note that setting this forces DiskDFJK when SCF_TYPE=DF.

Type: string

Possible Values: NONE, SAVE, LOAD

Default: NONE

DF_INTS_NUM_THREADS (DFMP2)
DFMP2 — Number of threads to compute integrals with. 0 is wild card

Type: integer

Default: 0

DF_INTS_NUM_THREADS (SCF)
SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank

Type: integer

Default: 0

DF_METRIC (SCF)
SCF — FastDF Fitting Metric

Type: string

Possible Values: COULOMB, EWALD, OVERLAP

Default: COULOMB

DF_SCF_GUESS (SCF)
SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation

Type: boolean

Default: true

DF_THETA (SCF)
SCF — FastDF SR Ewald metric range separation parameter

Type: double

Default: 1.0

DFCC (FNOCC)
FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation.

Type: boolean

Default: false

DFMP2_MEM_FACTOR (DFMP2)
DFMP2 — % of memory for DF-MP2 three-index buffers

Type: double

Default: 0.9

DFMP2_P2_TOLERANCE (DFMP2)
DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P.

Type: conv double

Default: 0.0

DFMP2_P_TOLERANCE (DFMP2)
DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives.

Type: conv double

Default: 0.0

DFT_ALPHA (SCF)
SCF — The DFT Exact-exchange parameter

Type: double

Default: 0.0

DFT_ALPHA_C (SCF)
SCF — The DFT Correlation hybrid parameter

Type: double

Default: 0.0

DFT_BASIS_TOLERANCE (SCF)
SCF — DFT basis cutoff.

Type: conv double

Default: 1.0e-12

DFT_BLOCK_MAX_POINTS (SCF)
SCF (Expert) — The maximum number of grid points per evaluation block.

Type: integer

Default: 256

DFT_BLOCK_MAX_RADIUS (SCF)
SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au].

Type: double

Default: 3.0

DFT_BLOCK_MIN_POINTS (SCF)
SCF (Expert) — The minimum number of grid points per evaluation block.

Type: integer

Default: 100

DFT_BLOCK_SCHEME (SCF)
SCF (Expert) — The blocking scheme for DFT.

Type: string

Possible Values: NAIVE, OCTREE, ATOMIC

Default: OCTREE

DFT_BS_RADIUS_ALPHA (SCF)
SCF — Factor for effective BS radius in radial grid.

Type: double

Default: 1.0

DFT_DENSITY_TOLERANCE (SCF)
SCF (Expert) — density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used.

Type: conv double

Default: -1.0

DFT_DISPERSION_PARAMETERS (SCF)
SCF — Parameters defining the dispersion correction. See Table -D Functionals for default values and Table Dispersion Corrections for the order in which parameters are to be specified in this array option. Unused for functionals constructed by user.

Type: array

Default: No Default

DFT_GRAC_ALPHA (SCF)
SCF — The gradient regularized asymptotic correction alpha value

Type: double

Default: 0.5

DFT_GRAC_BETA (SCF)
SCF — The gradient regularized asymptotic correction beta value

Type: double

Default: 40.0

DFT_GRAC_C_FUNC (SCF)
SCF (Expert) — The gradient regularized asymptotic correction functional corr form.

Type: string

Default: XC_LDA_C_VWN

DFT_GRAC_SHIFT (SCF)
SCF — The gradient regularized asymptotic correction shift value

Type: double

Default: 0.0

DFT_GRAC_X_FUNC (SCF)
SCF (Expert) — The gradient regularized asymptotic correction functional exch form.

Type: string

Default: XC_GGA_X_LB

DFT_GRID_NAME (SCF)
SCF (Expert) — The DFT grid specification, such as SG1.

Type: string

Possible Values: SG0, SG1

Default: No Default

DFT_NUCLEAR_SCHEME (SCF)
SCF — Nuclear Scheme.

Type: string

Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE

Default: TREUTLER

DFT_OMEGA (SCF)
SCF — The DFT Range-separation parameter

Type: double

Default: 0.0

DFT_OMEGA_C (SCF)
SCF — The DFT Correlation Range-separation parameter

Type: double

Default: 0.0

DFT_PRUNING_ALPHA (SCF)
SCF (Expert) — Spread alpha for logarithmic pruning.

Type: double

Default: 1.0

DFT_PRUNING_SCHEME (SCF)
SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST.

Type: string

Default: NONE

DFT_RADIAL_POINTS (SCF)
SCF — Number of radial points.

Type: integer

Default: 75

DFT_RADIAL_SCHEME (SCF)
SCF — Radial Scheme.

Type: string

Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA

Default: TREUTLER

DFT_REMOVE_DISTANT_POINTS (SCF)
SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions.

Type: boolean

Default: true

DFT_SPHERICAL_POINTS (SCF)
SCF — Number of spherical points (A Lebedev Points number).

Type: integer

Default: 302

DFT_SPHERICAL_SCHEME (SCF)
SCF — Spherical Scheme.

Type: string

Possible Values: LEBEDEV

Default: LEBEDEV

DFT_V2_RHO_CUTOFF (SCF)
SCF — Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance.

Type: double

Default: -1.0

DFT_VV10_B (SCF)
SCF — Define VV10 parameter b

Type: double

Default: 0.0

DFT_VV10_C (SCF)
SCF — Define VV10 parameter C

Type: double

Default: 0.0

DFT_VV10_POSTSCF (SCF)
SCF — post-scf VV10 correction

Type: boolean

Default: false

DFT_VV10_RADIAL_POINTS (SCF)
SCF — Number of radial points for VV10 NL integration.

Type: integer

Default: 50

DFT_VV10_RHO_CUTOFF (SCF)
SCF (Expert) — Rho cutoff for VV10 NL integration.

Type: double

Default: 1.e-8

DFT_VV10_SPHERICAL_POINTS (SCF)
SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration.

Type: integer

Default: 146

DFT_WEIGHTS_TOLERANCE (SCF)
SCF (Expert) — grid weight cutoff. Disable with -1.0.

Type: conv double

Default: 1.0e-15

DIAG_METHOD (DETCI)
DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires 
 CI vectors on disk, where 
 is the maximum number of iterations and 
 is the number of roots.

Type: string

Possible Values: RSP, DAVIDSON, SEM

Default: SEM

DIAGONAL_CCSD_T (PSIMRCC)
PSIMRCC — Do include the diagonal corrections in (T) computations?

Type: boolean

Default: true

DIAGONALIZE_HEFF (PSIMRCC)
PSIMRCC — Do diagonalize the effective Hamiltonian?

Type: boolean

Default: false

DIE_IF_NOT_CONVERGED (GLOBALS)
GLOBALS (Expert) — Psi4 dies if energy does not converge.

Type: boolean

Default: true

DIIS (CCENERGY)
CCENERGY — Do use DIIS extrapolation to accelerate convergence?

Type: boolean

Default: true

DIIS (CCLAMBDA)
CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?

Type: boolean

Default: true

DIIS (CCRESPONSE)
CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?

Type: boolean

Default: true

DIIS (DETCI)
DETCI — Do use DIIS extrapolation to accelerate CC convergence?

Type: boolean

Default: true

DIIS (MCSCF)
MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?

Type: boolean

Default: true

DIIS (SCF)
SCF — Do use DIIS extrapolation to accelerate convergence?

Type: boolean

Default: true

DIIS_FREQ (DETCI)
DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc.

Type: integer

Default: 1

DIIS_MAX_VECS (DCT)
DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 6

DIIS_MAX_VECS (DETCI)
DETCI — Maximum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 5

DIIS_MAX_VECS (FNOCC)
FNOCC — Desired number of DIIS vectors

Type: integer

Default: 8

DIIS_MAX_VECS (MCSCF)
MCSCF — Maximum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 7

DIIS_MAX_VECS (OCC)
OCC — Maximum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 6

DIIS_MAX_VECS (PSIMRCC)
PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 7

DIIS_MAX_VECS (SCF)
SCF — Maximum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 10

DIIS_MIN_VECS (DCT)
DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 3

DIIS_MIN_VECS (DETCI)
DETCI — Minimum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 2

DIIS_MIN_VECS (OCC)
OCC — Minimum number of error vectors stored for DIIS extrapolation

Type: integer

Default: 2

DIIS_MIN_VECS (SCF)
SCF — Minimum number of error vectors stored for DIIS extrapolation. Will be removed in v1.7.

Type: integer

Default: 2

DIIS_RMS_ERROR (SCF)
SCF — Use RMS error instead of the more robust absolute error?

Type: boolean

Default: true

DIIS_START (PSIMRCC)
PSIMRCC — The number of DIIS vectors needed before extrapolation is performed

Type: integer

Default: 2

DIIS_START (SCF)
SCF — The minimum iteration to start storing DIIS vectors and performing ADIIS/EDIIS.

Type: integer

Default: 1

DIIS_START_CONVERGENCE (DCT)
DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations.

Type: conv double

Default: 1e-3

DIIS_START_ITER (DETCI)
DETCI — Iteration at which to start using DIIS

Type: integer

Default: 1

DIPMOM (DETCI)
DETCI — Do compute the dipole moment?

Type: boolean

Default: false

DIPMOM (FNOCC)
FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods.

Type: boolean

Default: false

DISP_SIZE (FINDIF)
FINDIF — Displacement size in au for finite-differences.

Type: double

Default: 0.005

DISTRIBUTED_MATRIX (SCF)
SCF (Expert) — The dimension sizes of the distributed matrix

Type: array

Default: No Default

DKH_ORDER (GLOBALS)
GLOBALS (Expert) — Order of Douglas-Kroll-Hess

Type: integer

Default: 2

DLPNO_ALGORITHM (DLPNO)
DLPNO (Expert) — Which DLPNO Algorithm to run (not set by user)

Type: string

Possible Values: MP2

Default: MP2

DLPNO_LOCAL_ORBITALS (DLPNO)
DLPNO — Orbital localizer

Type: string

Possible Values: BOYS, PIPEK_MEZEY

Default: BOYS

DLPNO_MAXITER (DLPNO)
DLPNO — Maximum number of iterations to determine the MP2 amplitudes.

Type: integer

Default: 50

DMRG_CASPT2_CALC (DMRG)
DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?

Type: boolean

Default: false

DMRG_CASPT2_IMAG (DMRG)
DMRG — CASPT2 Imaginary shift

Type: double

Default: 0.0

DMRG_CASPT2_IPEA (DMRG)
DMRG — CASPT2 IPEA shift

Type: double

Default: 0.0

DMRG_CASPT2_ORBS (DMRG)
DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done.

Type: string

Possible Values: PSEUDOCANONICAL, ACTIVE

Default: PSEUDOCANONICAL

DMRG_DIIS (DMRG)
DMRG — Whether or not to use DIIS for DMRG.

Type: boolean

Default: false

DMRG_DIIS_WRITE (DMRG)
DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting).

Type: boolean

Default: true

DMRG_EXCITATION (DMRG)
DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc.

Type: integer

Default: 0

DMRG_IRREP (DMRG)
DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u

Type: integer

Default: -1

DMRG_LOCAL_INIT (DMRG)
DMRG — Whether to start the active space localization process from a random unitary matrix instead of a unit matrix.

Type: boolean

Default: true

DMRG_MOLDEN_WRITE (DMRG)
DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format

Type: boolean

Default: false

DMRG_MPS_WRITE (DMRG)
DMRG — Whether or not to create intermediary MPS checkpoints

Type: boolean

Default: false

DMRG_MULTIPLICITY (DMRG)
DMRG — The DMRG wavefunction multiplicity in the form (2S+1)

Type: integer

Default: -1

DMRG_OPDM_AO_PRINT (DMRG)
DMRG — Print out the density matrix in the AO basis

Type: boolean

Default: false

DMRG_PRINT_CORR (DMRG)
DMRG — Whether or not to print the correlation functions after the DMRG calculation

Type: boolean

Default: false

DMRG_SCF_ACTIVE_SPACE (DMRG)
DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC)

Type: string

Possible Values: INPUT, NO, LOC

Default: INPUT

DMRG_SCF_DIIS_THR (DMRG)
DMRG — When the update norm is smaller than this value DIIS starts.

Type: double

Default: 1e-2

DMRG_SCF_GRAD_THR (DMRG)
DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions

Type: double

Default: 1.e-6

DMRG_SCF_MAX_ITER (DMRG)
DMRG — Maximum number of DMRG iterations

Type: integer

Default: 100

DMRG_SCF_STATE_AVG (DMRG)
DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF.

Type: boolean

Default: true

DMRG_SWEEP_DVDSON_RTOL (DMRG)
DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions

Type: array

Default: No Default

DMRG_SWEEP_ENERGY_CONV (DMRG)
DMRG — The energy convergence to stop an instruction during successive DMRG instructions

Type: array

Default: No Default

DMRG_SWEEP_MAX_SWEEPS (DMRG)
DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions

Type: array

Default: No Default

DMRG_SWEEP_NOISE_PREFAC (DMRG)
DMRG — The noise prefactors for successive DMRG instructions

Type: array

Default: No Default

DMRG_SWEEP_STATES (DMRG)
DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions

Type: array

Default: No Default

DMRG_UNITARY_WRITE (DMRG)
DMRG — Whether or not to store the unitary on disk (convenient for restarting).

Type: boolean

Default: true

DO_CCD_DISP (SAPT)
SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?

Type: boolean

Default: false

DO_DIIS (DFOCC)
DFOCC — Do apply DIIS extrapolation?

Type: boolean

Default: true

DO_DIIS (OCC)
OCC — Do apply DIIS extrapolation?

Type: boolean

Default: true

DO_DISP_EXCH_SINF (SAPT)
SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term.

Type: boolean

Default: false

DO_IND30_EXCH_SINF (SAPT)
SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term.

Type: boolean

Default: false

DO_IND_EXCH_SINF (SAPT)
SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term.

Type: boolean

Default: false

DO_LEVEL_SHIFT (DFOCC)
DFOCC — Do apply level shifting?

Type: boolean

Default: true

DO_LEVEL_SHIFT (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: boolean

Default: true

DO_MBPT_DISP (SAPT)
SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?

Type: boolean

Default: true

DO_SCS (DFOCC)
DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true

Type: boolean

Default: false

DO_SCS (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead.

Type: boolean

Default: false

DO_SOS (DFOCC)
DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true

Type: boolean

Default: false

DO_SOS (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead.

Type: boolean

Default: false

DO_THIRD_ORDER (SAPT)
SAPT (Expert) — Do compute third-order corrections?

Type: boolean

Default: false

DOCC (GLOBALS)
GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order)

Type: array

Default: No Default

DOCC (MCSCF)
MCSCF — The number of doubly occupied orbitals, per irrep

Type: array

Default: No Default

DOI_BASIS_TOLERANCE (DLPNO)
DLPNO (Expert) — Screening criteria for basis function values on DOI grids

Type: conv double

Default: 1.0e-10

DOI_PRUNING_SCHEME (DLPNO)
DLPNO (Expert) — Pruning scheme for DOI grids

Type: string

Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE

Default: ROBUST

DOI_RADIAL_POINTS (DLPNO)
DLPNO (Expert) — Number of radial points in DOI grid

Type: integer

Default: 25

DOI_SPHERICAL_POINTS (DLPNO)
DLPNO (Expert) — Number of spherical points in DOI grid

Type: integer

Default: 50

DYNAMIC_LEVEL (OPTKING)
OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative)

Type: integer

Default: 0

E3_SCALE (DFOCC)
DFOCC — CEPA opposite-spin scaling value from SCS-CCSD

Type: double

Default: 0.25

E3_SCALE (OCC)
OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.)

Type: double

Default: 0.25

E_CONVERGENCE (CCENERGY)
CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

E_CONVERGENCE (CCEOM)
CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

E_CONVERGENCE (DCT)
DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-10

E_CONVERGENCE (DETCI)
DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

E_CONVERGENCE (DFOCC)
DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

E_CONVERGENCE (DLPNO)
DLPNO — Energy convergence criteria for local MP2 iterations

Type: conv double

Default: 1e-6

E_CONVERGENCE (FNOCC)
FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied.

Type: conv double

Default: 1.0e-6

E_CONVERGENCE (MCSCF)
MCSCF — Convergence criterion for energy.

Type: conv double

Default: 1e-6

E_CONVERGENCE (MRCC)
MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56.

Type: conv double

Default: 1e-6

E_CONVERGENCE (OCC)
OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

E_CONVERGENCE (PSIMRCC)
PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

E_CONVERGENCE (SCF)
SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-6

EA_POLES (OCC)
OCC — Do compute OCC poles for electron affinities? Only valid for OMP2.

Type: boolean

Default: false

EFP_DISP (EFP)
EFP — Do include dispersion energy term in EFP computation?

Type: boolean

Default: true

EFP_DISP_DAMPING (EFP)
EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping.

Type: string

Possible Values: TT, OVERLAP, OFF

Default: OVERLAP

EFP_ELST (EFP)
EFP — Do include electrostatics energy term in EFP computation?

Type: boolean

Default: true

EFP_ELST_DAMPING (EFP)
EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy.

Type: string

Possible Values: SCREEN, OVERLAP, OFF

Default: SCREEN

EFP_EXCH (EFP)
EFP — Do include exchange repulsion energy term in EFP computation?

Type: boolean

Default: true

EFP_IND (EFP)
EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1)

Type: boolean

Default: true

EFP_IND_DAMPING (EFP)
EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1)

Type: string

Possible Values: TT, OFF

Default: TT

EFP_QM_ELST (EFP)
EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1)

Type: boolean

Default: true

EFP_QM_IND (EFP)
EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1)

Type: boolean

Default: true

EKT_EA (OCC)
OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?

Type: boolean

Default: false

EKT_IP (DFOCC)
DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?

Type: boolean

Default: false

EKT_IP (OCC)
OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?

Type: boolean

Default: false

ENERGY_LEVEL_SHIFT (DCT)
DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy.

Type: double

Default: 0.0

ENSURE_BT_CONVERGENCE (OPTKING)
OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates.

Type: boolean

Default: false

EOM_GUESS (CCEOM)
CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available.

Type: string

Possible Values: SINGLES, DISK, INPUT

Default: SINGLES

EOM_REFERENCE (CCEOM)
CCEOM — Reference wavefunction type for EOM computations

Type: string

Possible Values: RHF, ROHF, UHF

Default: RHF

EOM_REFERENCE (CCHBAR)
CCHBAR — Reference wavefunction type for EOM computations

Type: string

Default: RHF

EP2_CONVERGENCE (DFEP2)
DFEP2 — What is the maximum number of iterations?

Type: conv double

Default: 5.e-5

EP2_MAXITER (DFEP2)
DFEP2 — What is the maximum number of iterations?

Type: integer

Default: 20

EP2_NUM_EA (DFEP2)
DFEP2 — Number of Electron Affinities to compute, starting with the LUMO.

Type: integer

Default: 0

EP2_NUM_IP (DFEP2)
DFEP2 — Number of Ionization Potentials to compute, starting with the HOMO.

Type: integer

Default: 3

EP2_ORBITALS (DFEP2)
DFEP2 — Explicitly pick orbitals to use in the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep.

Type: array

Default: No Default

EP_EA_POLES (OCC)
OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2.

Type: boolean

Default: false

EP_IP_POLES (OCC)
OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2.

Type: boolean

Default: false

EP_MAXITER (OCC)
OCC — Maximum number of electron propagator iterations.

Type: integer

Default: 30

EX_ALLOW (DETCI)
DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST.

Type: array

Default: No Default

EX_LEVEL (DETCI)
DETCI — The CI excitation level

Type: integer

Default: 2

EXCH_SCALE_ALPHA (SAPT)
SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with 
. If set to a value 
, performs scaling with 
.

Type: string

Default: FALSE

EXCITATION_RANGE (CCEOM)
CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation

Type: integer

Default: 2

EXPLICIT_HAMILTONIAN (CPHF)
CPHF — Do explicit hamiltonian only?

Type: boolean

Default: false

EXT_FORCE_BEND (OPTKING)
OPTKING — Specify formula for external forces for angles between atoms

Type: string

Default: No Default

EXT_FORCE_CARTESIAN (OPTKING)
OPTKING — Symmetry formula for external forces for cartesian coordinates on atoms .

Type: string

Default: No Default

EXT_FORCE_DIHEDRAL (OPTKING)
OPTKING — Specify formula for external forces for dihedral angles between atoms

Type: string

Default: No Default

EXT_FORCE_DISTANCE (OPTKING)
OPTKING — Specify formula for external forces for the distance between atoms

Type: string

Default: No Default

EXT_FORCE_OOFP (OPTKING)
OPTKING — Specify formula for external forces for out-of-plane angles between atoms

Type: string

Default: No Default

EXTERN (SCF)
SCF — An ExternalPotential (built by Python or nullptr/None)

Type: boolean

Default: false

EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)
GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!

Type: boolean

Default: false

F_CUT (DLPNO)
DLPNO (Expert) — Fock matrix threshold for treating ampltudes as coupled during local MP2 iterations

Type: double

Default: 1e-5

FAIL_ON_MAXITER (SCF)
SCF — Fail if we reach maxiter without converging?

Type: boolean

Default: true

FAVG (MCSCF)
MCSCF — Do use the average Fock matrix during the SCF optimization?

Type: boolean

Default: false

FAVG_CCSD_T (PSIMRCC)
PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?

Type: boolean

Default: false

FAVG_START (MCSCF)
MCSCF — Iteration at which to begin using the averaged Fock matrix

Type: integer

Default: 5

FCI (DETCI)
DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL.

Type: boolean

Default: false

FCI_STRINGS (DETCI)
DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.)

Type: boolean

Default: false

FD_PROJECT (FINDIF)
FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations.

Type: boolean

Default: true

FILTER_GUESS (DETCI)
DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN.

Type: boolean

Default: false

FILTER_GUESS_DET1 (DETCI)
DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS).

Type: array

Default: No Default

FILTER_GUESS_DET2 (DETCI)
DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS).

Type: array

Default: No Default

FILTER_GUESS_SIGN (DETCI)
DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2.

Type: integer

Default: 1

FILTER_ZERO_DET (DETCI)
DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective.

Type: array

Default: No Default

FISAPT_CHARGE_COMPLETENESS (FISAPT)
FISAPT — Amount of fragment charge completeness to distinguish link bonds

Type: double

Default: 0.8

FISAPT_CUBE_DENSMAT (FISAPT)
FISAPT — Generate cube files for fragment density matrices?

Type: boolean

Default: false

FISAPT_CUBE_LINKIBOS (FISAPT)
FISAPT — Generate cube files for unsplit link orbitals (IBOs)?

Type: boolean

Default: false

FISAPT_CUBE_LINKIHOS (FISAPT)
FISAPT — Generate cube files for split link orbitals (IHOs)?

Type: boolean

Default: false

FISAPT_DO_FSAPT (FISAPT)
FISAPT — Do an F-SAPT analysis?

Type: boolean

Default: true

FISAPT_DO_FSAPT_DISP (FISAPT)
FISAPT — Do F-SAPT Dispersion?

Type: boolean

Default: true

FISAPT_DO_PLOT (FISAPT)
FISAPT — Plot a scalar-field analysis

Type: boolean

Default: false

FISAPT_EXCH_PARPERP (FISAPT)
FISAPT — Calculate separate exchange corrections for parallel and perpendicular spin coupling of link orbitals? When false, only the averaged out exchange corrections are computed.

Type: boolean

Default: false

FISAPT_FSAPT_EXCH_SCALE (FISAPT)
FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2)

Type: boolean

Default: true

FISAPT_FSAPT_FILEPATH (FISAPT)
FISAPT — Filepath to drop F-SAPT data within input file directory

Type: string

Default: fsapt/

FISAPT_FSAPT_IND_RESPONSE (FISAPT)
FISAPT — Do F-SAPT coupled response? (not recommended)

Type: boolean

Default: false

FISAPT_FSAPT_IND_SCALE (FISAPT)
FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction)

Type: boolean

Default: true

FISAPT_FSSAPT_FILEPATH (FISAPT)
FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directory

Type: string

Default: s-fsapt/

FISAPT_LINK_ASSIGNMENT (FISAPT)
FISAPT — Where do sigma links go (to C, AB, or split into IHOs)?

Type: string

Possible Values: C, AB, SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2

Default: C

FISAPT_LINK_ORTHO (FISAPT)
FISAPT — Orthogonalization of link orbitals for FISAPT_LINK_ASSIGNMENT=SAOx/SIAOx Link A orthogonalized to A in whole (interacting) molecule or in the (noninteracting) fragment?

Type: string

Possible Values: FRAGMENT, WHOLE, NONE

Default: FRAGMENT

FISAPT_LINK_SELECTION (FISAPT)
FISAPT — Specification algorithm for link bonds in ISAPT

Type: string

Possible Values: AUTOMATIC, MANUAL

Default: AUTOMATIC

FISAPT_MANUAL_LINKS (FISAPT)
FISAPT — Manual link bond specification [[Atom1, Atom2], …]

Type: array

Default: No Default

FISAPT_MEM_SAFETY_FACTOR (FISAPT)
FISAPT (Expert) — Memory safety factor for heavy FISAPT operations

Type: double

Default: 0.9

FISAPT_PLOT_FILEPATH (FISAPT)
FISAPT — Filepath to drop scalar data within input file directory

Type: string

Default: plot/

FLEXIBLE_G_CONVERGENCE (OPTKING)
OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria

Type: boolean

Default: false

FOLLOW_ROOT (DETCI)
DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state.

Type: integer

Default: 0

FOLLOW_ROOT (MCSCF)
MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state

Type: integer

Default: 1

FOLLOW_ROOT (PSIMRCC)
PSIMRCC — Which root of the effective hamiltonian is the target state?

Type: integer

Default: 1

FOLLOW_STEP_INCREMENT (SCF)
SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution.

Type: double

Default: 0.2

FOLLOW_STEP_SCALE (SCF)
SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of 
 corresponds to a value of 1.0.

Type: double

Default: 0.5

FOLLOW_VECTOR (DETCI)
DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …].

Type: array

Default: No Default

FORCE_RESTART (CCENERGY)
CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?

Type: boolean

Default: false

FORCE_TWOCON (MCSCF)
MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of 
 
 ?

Type: boolean

Default: false

FRAC_DIIS (SCF)
SCF — Do use DIIS extrapolation to accelerate convergence in frac?

Type: boolean

Default: true

FRAC_LOAD (SCF)
SCF — Do recompute guess from stored orbitals?

Type: boolean

Default: false

FRAC_OCC (SCF)
SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta)

Type: array

Default: No Default

FRAC_RENORMALIZE (SCF)
SCF — Do renormalize C matrices prior to writing to checkpoint?

Type: boolean

Default: true

FRAC_START (SCF)
SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation)

Type: integer

Default: 0

FRAC_VAL (SCF)
SCF — The occupations of the orbital indices specified above (
)

Type: array

Default: No Default

FRAG_MODE (OPTKING)
OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant.

Type: string

Possible Values: SINGLE, MULTI

Default: SINGLE

FRAG_REF_ATOMS (OPTKING)
OPTKING — Specify atoms to use for reference points in interfragment coordinates

Type: array

Default: No Default

FREEZE_ALL_DIHEDRALS (OPTKING)
OPTKING — Freeze ALL dihedral angles

Type: boolean

Default: false

FREEZE_CORE (GLOBALS)
GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation) or by the option POLICY in combination with appropriate inputs to FREEZE_CORE_POLICY. At present, POLICY is an experimental option and is subject to change.

Type: string

Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3, POLICY

Default: FALSE

FREEZE_CORE (SAPT)
SAPT — The scope of core orbitals to freeze in evaluation of SAPT 
 and 
 terms. Recommended true for all SAPT computations

Type: string

Possible Values: FALSE, TRUE

Default: FALSE

FREEZE_CORE_POLICY (GLOBALS)
GLOBALS — NOTE: This is an experimental feature and subject to change! Specifies a custom frozen-core policy on a per-element basis. Input should be a list of integers representing the number of orbitals to freeze for each atomic number MINUS one (so H is 0, He is 1, etc). For example, to specify that elements H-Be should have 0 frozen orbitals, B-Mg should have 1, and Al should have 2, you would provide the input [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]. Please make sure to fill in the list up to the highest atomic number included in any calculations. This option is only used if FREEZE_CORE is set to POLICY.

Type: array

Default: No Default

FREEZE_INTERFRAG (OPTKING)
OPTKING — Do freeze all interfragment modes?

Type: boolean

Default: false

FREEZE_INTRAFRAG (OPTKING)
OPTKING — Do freeze all fragments rigid?

Type: boolean

Default: false

FROZEN_BEND (OPTKING)
OPTKING — Specify angles between atoms to be frozen (unchanged)

Type: string

Default: No Default

FROZEN_CARTESIAN (OPTKING)
OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged)

Type: string

Default: No Default

FROZEN_DIHEDRAL (OPTKING)
OPTKING — Specify dihedral angles between atoms to be frozen (unchanged)

Type: string

Default: No Default

FROZEN_DISTANCE (OPTKING)
OPTKING — Specify distances between atoms to be frozen (unchanged)

Type: string

Default: No Default

FROZEN_DOCC (GLOBALS)
GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE.

Type: array

Default: No Default

FROZEN_OOFP (OPTKING)
OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged)

Type: string

Default: No Default

FROZEN_UOCC (GLOBALS)
GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC.

Type: array

Default: No Default

FULL_HESS_EVERY (OPTKING)
OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian.

Type: integer

Default: -1

FULL_MATRIX (CCEOM)
CCEOM — Do use full effective Hamiltonian matrix?

Type: boolean

Default: false

G_CONVERGENCE (OPTKING)
OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details.

Type: string

Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE

Default: QCHEM

GAUGE (ADC)
ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY.

Type: string

Possible Values: LENGTH, VELOCITY

Default: LENGTH

GAUGE (CCDENSITY)
CCDENSITY — The type of gauge to use for properties

Type: string

Default: LENGTH

GAUGE (CCRESPONSE)
CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results.

Type: string

Possible Values: LENGTH, VELOCITY, BOTH

Default: VELOCITY

GDMA_LIMIT (GDMA)
GDMA — The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided.

Type: integer

Default: 2

GDMA_MULTIPOLE_UNITS (GDMA)
GDMA — Whether to print DMA results in atomic units or SI.

Type: string

Possible Values: AU

Default: AU SI

GDMA_ORIGIN (GDMA)
GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point.

Type: array

Default: No Default

GDMA_RADIUS (GDMA)
GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom.

Type: array

Default: No Default

GDMA_SWITCH (GDMA)
GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA.

Type: double

Default: 4.0

GEOM_MAXITER (OPTKING)
OPTKING — Maximum number of geometry optimization steps

Type: integer

Default: 50

GRADIENT_WRITE (FINDIF)
FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule.

Type: boolean

Default: false

GUESS (SCF)
SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are.

Type: string

Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ

Default: AUTO

GUESS_MIX (SCF)
SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry.

Type: boolean

Default: false

GUESS_PERSIST (SCF)
SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization.

Type: boolean

Default: false

GUESS_R_CONVERGENCE (DCT)
DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS.

Type: conv double

Default: 1e-3

GUESS_VECTOR (DETCI)
DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;

Type: string

Possible Values: UNIT, H0_BLOCK, DFILE

Default: H0_BLOCK

H0_BLOCK_COUPLING (DETCI)
DETCI (Expert) — Do use coupling block in preconditioner?

Type: boolean

Default: false

H0_BLOCK_COUPLING_SIZE (DETCI)
DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner.

Type: integer

Default: 0

H0_BLOCKSIZE (DETCI)
DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs.

Type: integer

Default: 1000

H0_GUESS_SIZE (DETCI)
DETCI (Expert) — size of H0 block for initial guess

Type: integer

Default: 1000

H_BOND_CONNECT (OPTKING)
OPTKING — For now, this is a general maximum distance for the definition of H-bonds

Type: double

Default: 4.3

H_GUESS_EVERY (OPTKING)
OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian.

Type: boolean

Default: false

H_UPDATE_DEN_TOL (OPTKING)
OPTKING — Denominator check for hessian update.

Type: conv double

Default: 1e-7

HD_AVG (DETCI)
DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI.

Type: string

Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE

Default: EVANGELISTI

HD_OTF (DETCI)
DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk.

Type: boolean

Default: true

HEFF4 (PSIMRCC)
PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?

Type: boolean

Default: true

HEFF_PRINT (PSIMRCC)
PSIMRCC — Do print the effective Hamiltonian?

Type: boolean

Default: false

HESS_TYPE (DFOCC)
DFOCC — Type of the MO Hessian matrix

Type: string

Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF

Default: HF

HESS_UPDATE (OPTKING)
OPTKING — Hessian update scheme

Type: string

Possible Values: NONE, BFGS, MS, POWELL, BOFILL

Default: BFGS

HESS_UPDATE_LIMIT (OPTKING)
OPTKING — Do limit the magnitude of changes caused by the Hessian update?

Type: boolean

Default: true

HESS_UPDATE_LIMIT_MAX (OPTKING)
OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au].

Type: double

Default: 1.00

HESS_UPDATE_LIMIT_SCALE (OPTKING)
OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au].

Type: double

Default: 0.50

HESS_UPDATE_USE_LAST (OPTKING)
OPTKING — Number of previous steps to use in Hessian update, 0 uses all

Type: integer

Default: 4

HESSIAN_WRITE (FINDIF)
FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule.

Type: boolean

Default: false

ICORE (DETCI)
DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory.

Type: integer

Default: 1

INCFOCK (SCF)
SCF — Do perform incremental Fock build?

Type: boolean

Default: false

INCFOCK_CONVERGENCE (SCF)
SCF — The density threshold at which to stop building the Fock matrix incrementally

Type: conv double

Default: 1.0e-5

INCFOCK_FULL_FOCK_EVERY (SCF)
SCF — Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure.

Type: integer

Default: 5

INDUCED_CONVERGENCE (PE)
PE — Threshold for induced moments convergence

Type: conv double

Default: 1e-8

INTCOS_GENERATE_EXIT (OPTKING)
OPTKING — Do only generate the internal coordinates and then stop?

Type: boolean

Default: false

INTEGRAL_CUTOFF (DFOCC)
DFOCC — Cutoff value for DF integrals

Type: integer

Default: 9

INTEGRAL_PACKAGE (GLOBALS)
GLOBALS — Integral package to use. If compiled with Simint support, change this option to use them; LibInt2 is used otherwise.

Type: string

Possible Values: LIBINT2, SIMINT

Default: LIBINT2

INTERFRAG_COLLINEAR_TOL (OPTKING)
OPTKING — Tolerance for whether to reject a set of generated reference atoms due to collinearity

Type: conv double

Default: 0.01

INTERFRAG_COORDS (OPTKING)
OPTKING — Dictionary to define a dimer. Contains “Natoms per frag”, “A Frag”, “A Ref Atoms”, “B Frag”, and “B Ref Atoms”

Type: string

Default: No Default

INTERFRAG_DIST_INV (OPTKING)
OPTKING — Use 1/R for the interfragment stretching coordinate instead of R

Type: boolean

Default: false

INTERFRAG_HESS (OPTKING)
OPTKING — Model Hessian to guess interfragment force constants

Type: string

Possible Values: DEFAULT, FISCHER_LIKE

Default: DEFAULT

INTERFRAG_MODE (OPTKING)
OPTKING — When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms.

Type: string

Possible Values: FIXED, PRINCIPAL_AXES

Default: FIXED

INTERFRAG_STEP_LIMIT (OPTKING)
OPTKING — Maximum step size in bohr or radian along an interfragment coordinate

Type: double

Default: 0.5

INTERFRAGMENT_CONNECT (OPTKING)
OPTKING — When connecting disparate fragments when frag_mode = SIMPLE, a “bond” is assigned if interatomic distance is less than (this number) * sum of covalent radii. The value is then increased until all the fragments are connected (directly or indirectly).

Type: double

Default: 1.8

INTERNAL_ROTATIONS (MCSCF)
MCSCF — Do consider internal rotations?

Type: boolean

Default: true

INTRAFRAG_HESS (OPTKING)
OPTKING — Model Hessian to guess intrafragment force constants

Type: string

Possible Values: FISCHER, SCHLEGEL, SIMPLE, LINDH, LINDH_SIMPLE

Default: SCHLEGEL

INTRAFRAG_STEP_LIMIT (OPTKING)
OPTKING — Initial maximum step size in bohr or radian along an internal coordinate

Type: double

Default: 0.5

INTRAFRAG_STEP_LIMIT_MAX (OPTKING)
OPTKING — Upper bound for dynamic trust radius [au]

Type: double

Default: 1.0

INTRAFRAG_STEP_LIMIT_MIN (OPTKING)
OPTKING — Lower bound for dynamic trust radius [au]

Type: double

Default: 0.001

INTS_TOLERANCE (CCDENSITY)
CCDENSITY — Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

Type: conv double

Default: 1e-14

INTS_TOLERANCE (DCT)
DCT (Expert) — Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

Type: conv double

Default: 1e-14

INTS_TOLERANCE (DFMP2)
DFMP2 — Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

Type: conv double

Default: 0.0

INTS_TOLERANCE (FISAPT)
FISAPT — Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

Type: conv double

Default: 0.0

INTS_TOLERANCE (MRCC)
MRCC — Schwarz screening threshold. Mininum absolute value below which TEI are neglected.

Type: conv double

Default: 1.0e-12

INTS_TOLERANCE (SAPT)
SAPT — Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT.

Type: conv double

Default: 1.0e-12

INTS_TOLERANCE (SCF)
SCF — Screening threshold for the chosen screening method (SCHWARZ, CSAM, DENSITY) Absolute value below which TEI are neglected.

Type: conv double

Default: 1e-12

IP_POLES (OCC)
OCC — Do compute OCC poles for ionization potentials? Only valid OMP2.

Type: boolean

Default: false

IRC_DIRECTION (OPTKING)
OPTKING — IRC mapping direction

Type: string

Possible Values: FORWARD, BACKWARD

Default: FORWARD

IRC_POINTS (OPTKING)
OPTKING — Maximum number of IRC points to collect before stopping.

Type: integer

Default: 20

IRC_STEP_SIZE (OPTKING)
OPTKING — IRC step size in bohr(amu)
.

Type: double

Default: 0.2

ISOTROPIC_POL (PE)
PE — Make polarizabilities isotropic

Type: boolean

Default: false

ISTOP (DETCI)
DETCI — Do stop DETCI after string information is formed and before integrals are read?

Type: boolean

Default: false

JOBTYPE (CCLAMBDA)
CCLAMBDA (Expert) — Type of job being performed

Type: string

Default: No Default

KIND (ADC)
ADC — The kind of states to compute.

Type: string

Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY

Default: SINGLET

LEVEL_SHIFT (DFOCC)
DFOCC — Level shift to aid convergence

Type: double

Default: 0.02

LEVEL_SHIFT (MCSCF)
MCSCF — Level shift to aid convergence

Type: double

Default: 0.0

LEVEL_SHIFT (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 0.02

LEVEL_SHIFT (SCF)
SCF — Do use a level shift?

Type: double

Default: 0.0

LEVEL_SHIFT_CUTOFF (SCF)
SCF — DIIS error at which to stop applying the level shift

Type: double

Default: 1e-2

LINEAR (CCRESPONSE)
CCRESPONSE — Do Bartlett size-extensive linear model?

Type: boolean

Default: false

LINEQ_SOLVER (DFOCC)
DFOCC — The solver will be used for simultaneous linear equations.

Type: string

Possible Values: CDGESV, FLIN, POPLE

Default: CDGESV

LINK_INTS_TOLERANCE (SCF)
SCF — The screening tolerance used for ERI/Density sparsity in the LinK algorithm

Type: conv double

Default: 1.0e-12

LITERAL_CFOUR (GLOBALS)
GLOBALS — Text to be passed directly into CFOUR input files. May contain molecule, options, percent blocks, etc. Access through cfour {...} block.

Type: string

Default: No Default

LOCAL (CCENERGY)
CCENERGY — Do simulate the effects of local correlation techniques?

Type: boolean

Default: false

LOCAL (CCEOM)
CCEOM — Do simulate the effects of local correlation techniques?

Type: boolean

Default: false

LOCAL (CCLAMBDA)
CCLAMBDA — Do simulate the effects of local correlation techniques?

Type: boolean

Default: false

LOCAL (CCRESPONSE)
CCRESPONSE — Do simulate local correlation?

Type: boolean

Default: false

LOCAL_CONVERGENCE (DLPNO)
DLPNO — Convergence criteria for the Foster-Boys orbital localization

Type: conv double

Default: 1.0e-12

LOCAL_CONVERGENCE (FISAPT)
FISAPT — Relative convergence in orbital localization

Type: conv double

Default: 1.0e-12

LOCAL_CONVERGENCE (SCF)
SCF — The convergence on the orbital localization procedure

Type: conv double

Default: 1e-12

LOCAL_CPHF_CUTOFF (CCENERGY)
CCENERGY — Cutoff value for local-coupled-perturbed-Hartree-Fock

Type: double

Default: 0.10

LOCAL_CPHF_CUTOFF (CCLAMBDA)
CCLAMBDA — Cutoff value for local-coupled-perturbed-Hartree-Fock

Type: double

Default: 0.10

LOCAL_CPHF_CUTOFF (CCRESPONSE)
CCRESPONSE — Cutoff value for local-coupled-perturbed-Hartree-Fock

Type: double

Default: 0.10

LOCAL_CUTOFF (CCENERGY)
CCENERGY — Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

Type: double

Default: 0.02

LOCAL_CUTOFF (CCEOM)
CCEOM — Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

Type: double

Default: 0.02

LOCAL_CUTOFF (CCLAMBDA)
CCLAMBDA — Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

Type: double

Default: 0.02

LOCAL_CUTOFF (CCRESPONSE)
CCRESPONSE — Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996).

Type: double

Default: 0.01

LOCAL_DO_SINGLES (CCEOM)
CCEOM —

Type: boolean

Default: true

LOCAL_FILTER_SINGLES (CCEOM)
CCEOM — Do apply local filtering to singles amplitudes?

Type: boolean

Default: true

LOCAL_FILTER_SINGLES (CCLAMBDA)
CCLAMBDA — Do apply local filtering to single de-excitation (
 amplitudes?

Type: boolean

Default: true

LOCAL_FILTER_SINGLES (CCRESPONSE)
CCRESPONSE — Do apply local filtering to single excitation amplitudes?

Type: boolean

Default: false

LOCAL_IBO_CONDITION (FISAPT)
FISAPT (Expert) — Condition number to use in IBO metric inversions

Type: double

Default: 1.0e-7

LOCAL_IBO_POWER (FISAPT)
FISAPT — IBO localization metric power

Type: integer

Default: 4

LOCAL_IBO_STARS (FISAPT)
FISAPT — IBO Centers for Pi Degeneracy

Type: array

Default: No Default

LOCAL_IBO_STARS_COMPLETENESS (FISAPT)
FISAPT — IBO Charge metric for classification as Pi

Type: double

Default: 0.90

LOCAL_IBO_USE_STARS (FISAPT)
FISAPT — IBO Stars procedure

Type: boolean

Default: false

LOCAL_MAXITER (DLPNO)
DLPNO — Maximum iterations in Foster-Boys localization

Type: integer

Default: 1000

LOCAL_MAXITER (FISAPT)
FISAPT — Maximum iterations in localization

Type: integer

Default: 1000

LOCAL_MAXITER (SCF)
SCF — The maxiter on the orbital localization procedure

Type: integer

Default: 200

LOCAL_METHOD (CCENERGY)
CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative).

Type: string

Possible Values: WERNER, AOBASIS

Default: WERNER

LOCAL_METHOD (CCEOM)
CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative).

Type: string

Possible Values: WERNER, AOBASIS

Default: WERNER

LOCAL_METHOD (CCLAMBDA)
CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers.

Type: string

Default: WERNER

LOCAL_METHOD (CCRESPONSE)
CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers.

Type: string

Default: WERNER

LOCAL_PAIRDEF (CCENERGY)
CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay.

Type: string

Possible Values: BP, RESPONSE

Default: BP

LOCAL_PAIRDEF (CCLAMBDA)
CCLAMBDA — Definition of local pair domains

Type: string

Default: No Default

LOCAL_PAIRDEF (CCRESPONSE)
CCRESPONSE — Definition of local pair domains

Type: string

Default: NONE

LOCAL_PRECONDITIONER (CCEOM)
CCEOM — Preconditioner will be used in local CC computations

Type: string

Possible Values: HBAR, FOCK

Default: HBAR

LOCAL_USE_GHOSTS (FISAPT)
FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric

Type: boolean

Default: false

LOCAL_WEAKP (CCENERGY)
CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored.

Type: string

Possible Values: NONE, NEGLECT, MP2

Default: NONE

LOCAL_WEAKP (CCEOM)
CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored.

Type: string

Possible Values: NONE, MP2, NEGLECT

Default: NONE

LOCAL_WEAKP (CCLAMBDA)
CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs.

Type: string

Default: NONE

LOCAL_WEAKP (CCRESPONSE)
CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs.

Type: string

Default: NONE

LOCK_SINGLET (PSIMRCC)
PSIMRCC — Do lock onto a singlet root?

Type: boolean

Default: false

LS_THC_BASIS_TOLERANCE (GLOBALS)
GLOBALS (Expert) — Screening criteria for basis function values on LS-THC grids

Type: conv double

Default: 1.0e-10

LS_THC_DF (GLOBALS)
GLOBALS — Use DF approximation when computing LS-THC factorization?

Type: boolean

Default: true

LS_THC_PRUNING_SCHEME (GLOBALS)
GLOBALS (Expert) — Pruning scheme for LS-THC grids

Type: string

Default: ROBUST

LS_THC_RADIAL_POINTS (GLOBALS)
GLOBALS — Number of radial points in LS-THC grid

Type: integer

Default: 10

LS_THC_S_EPSILON (GLOBALS)
GLOBALS (Expert) — Tolerance for pseudoinversion of grid point overlap matrix (Parrish 2012 eq. 30)

Type: double

Default: 1.0e-10

LS_THC_SPHERICAL_POINTS (GLOBALS)
GLOBALS — Number of spherical points in LS-THC grid

Type: integer

Default: 50

LS_THC_WEIGHTS_TOLERANCE (GLOBALS)
GLOBALS (Expert) — Grid weights cutoff for LS-THC grids

Type: conv double

Default: 1.0e-12

LSE (DETCI)
DETCI — Do use least-squares extrapolation in iterative solution of CI vector?

Type: boolean

Default: false

LSE_COLLAPSE (DETCI)
DETCI — Number of iterations between least-squares extrapolations

Type: integer

Default: 3

LSE_TOLERANCE (DETCI)
DETCI — Minimum converged energy for least-squares extrapolation to be performed

Type: conv double

Default: 3

MADMP2_SLEEP (DFMP2)
DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version

Type: integer

Default: 0

MAT_NUM_COLUMN_PRINT (GLOBALS)
GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat.

Type: integer

Default: 5

MAX_ATTEMPTS (SCF)
SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable.

Type: integer

Default: 1

MAX_CCD_DIISVECS (SAPT)
SAPT — Maximum number of vectors used in CCD-DIIS

Type: integer

Default: 10

MAX_DISP_G_CONVERGENCE (OPTKING)
OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units).

Type: conv double

Default: 1.2e-3

MAX_ENERGY_G_CONVERGENCE (OPTKING)
OPTKING — Convergence criterion for geometry optmization: maximum energy change.

Type: conv double

Default: 1.0e-6

MAX_FORCE_G_CONVERGENCE (OPTKING)
OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units).

Type: conv double

Default: 3.0e-4

MAX_MEM_BUF (SCF)
SCF — Max memory per buf for PK algo REORDER, for debug and tuning

Type: integer

Default: 0

MAX_MOGRAD_CONVERGENCE (DFOCC)
DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE.

Type: conv double

Default: 1e-4

MAX_MOGRAD_CONVERGENCE (OCC)
OCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE.

Type: conv double

Default: 1e-4

MAX_NUM_VECS (ADC)
ADC — Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend.

Type: integer

Default: -1

MAX_NUM_VECS (DETCI)
DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS.

Type: integer

Default: 0

MAX_RADIAL_MOMENT (GLOBALS)
GLOBALS — Maximum Radial Moment to Calculate

Type: integer

Default: 4

MAXITER (ADC)
ADC — Maximum number of iterations

Type: integer

Default: 50

MAXITER (CCENERGY)
CCENERGY — Maximum number of iterations to solve the CC equations

Type: integer

Default: 50

MAXITER (CCEOM)
CCEOM — Maximum number of iterations

Type: integer

Default: 80

MAXITER (CCLAMBDA)
CCLAMBDA — Maximum number of iterations

Type: integer

Default: 50

MAXITER (CCRESPONSE)
CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations

Type: integer

Default: 50

MAXITER (DCT)
DCT — Maximum number of macro- or micro-iterations for both energy and response equations

Type: integer

Default: 40

MAXITER (FISAPT)
FISAPT — Maximum number of iterations for CPHF

Type: integer

Default: 50

MAXITER (FNOCC)
FNOCC — Maximum number of CC iterations

Type: integer

Default: 100

MAXITER (MCSCF)
MCSCF — Maximum number of iterations

Type: integer

Default: 100

MAXITER (PE)
PE — Maximum number of iterations for induced moments

Type: integer

Default: 50

MAXITER (PSIMRCC)
PSIMRCC — Maximum number of iterations to determine the amplitudes

Type: integer

Default: 100

MAXITER (SAPT)
SAPT — Maximum number of CPHF iterations

Type: integer

Default: 50

MAXITER (SCF)
SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC.

Type: integer

Default: 100

MBIS_D_CONVERGENCE (GLOBALS)
GLOBALS — MBIS Convergence Criteria

Type: conv double

Default: 1.0e-8

MBIS_MAXITER (GLOBALS)
GLOBALS — Maximum Number of MBIS Iterations

Type: integer

Default: 500

MBIS_PRUNING_SCHEME (GLOBALS)
GLOBALS — Pruning scheme for MBIS Grid

Type: string

Default: ROBUST

MBIS_RADIAL_POINTS (GLOBALS)
GLOBALS — MBIS Number of Radial Points

Type: integer

Default: 75

MBIS_SPHERICAL_POINTS (GLOBALS)
GLOBALS — MBIS Number of Spherical Points

Type: integer

Default: 302

MCSCF_ALGORITHM (DETCI)
DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian. Defaults to TS for RASSCF.

Type: string

Possible Values: TS, AH

Default: TS

MCSCF_CI_CLEANUP (DETCI)
DETCI — Cleanup the CI info at the end of a run?

Type: boolean

Default: true

MCSCF_DIIS_ERROR_TYPE (DETCI)
DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix

Type: string

Possible Values: GRAD, UPDATE

Default: GRAD

MCSCF_DIIS_FREQ (DETCI)
DETCI — How often to do a DIIS extrapolation for TS convergence

Type: integer

Default: 1

MCSCF_DIIS_MAX_VECS (DETCI)
DETCI — Maximum number of DIIS vectors for TS convergence

Type: integer

Default: 8

MCSCF_DIIS_START (DETCI)
DETCI — Iteration to turn on DIIS for TS convergence

Type: integer

Default: 3

MCSCF_DPD_CLEANUP (DETCI)
DETCI — Cleanup the DPD MCSCF object at the end of a run?

Type: boolean

Default: true

MCSCF_E_CONVERGENCE (DETCI)
DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.

Type: conv double

Default: 1e-7

MCSCF_GUESS (DETCI)
DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference

Type: string

Possible Values: MP2, SCF

Default: SCF

MCSCF_MAX_ROT (DETCI)
DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled.

Type: double

Default: 0.5

MCSCF_MAXITER (DETCI)
DETCI — Maximum number MCSCF of iterations

Type: integer

Default: 30

MCSCF_R_CONVERGENCE (DETCI)
DETCI — Convergence criterion for the RMS of the orbital gradient

Type: conv double

Default: 1e-5

MCSCF_ROTATE (DETCI)
DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals.

Type: array

Default: No Default

MCSCF_SO_START_E (DETCI)
DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence

Type: double

Default: 1e-4

MCSCF_SO_START_GRAD (DETCI)
DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient

Type: double

Default: 1e-4

MCSCF_TYPE (DETCI)
DETCI — Method to handle the two-electron integrals

Type: string

Possible Values: DF, CONV, AO

Default: CONV

MIN_CCD_DIISVECS (SAPT)
SAPT — Minimum number of vectors used in CCD-DIIS

Type: integer

Default: 4

MINAO_BASIS (FISAPT)
FISAPT (Expert) — MinAO Basis for IBO

Type: string

Default: CC-PVTZ-MINAO

MIXED (DETCI)
DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL.

Type: boolean

Default: true

MIXED4 (DETCI)
DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL.

Type: boolean

Default: true

MO_DIIS_NUM_VECS (DFOCC)
DFOCC — Number of vectors used in orbital DIIS

Type: integer

Default: 6

MO_MAXITER (DFOCC)
DFOCC — Maximum number of iterations to determine the orbitals

Type: integer

Default: 100

MO_MAXITER (OCC)
OCC — Maximum number of iterations to determine the orbitals

Type: integer

Default: 50

MO_READ (MCSCF)
MCSCF — Do read in from file the MOs from a previous computation?

Type: boolean

Default: true

MO_READ (OCC)
OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?

Type: boolean

Default: false

MO_STEP_MAX (DFOCC)
DFOCC — Maximum step size in orbital-optimization procedure

Type: double

Default: 0.5

MO_STEP_MAX (OCC)
OCC — Maximum step size in orbital-optimization procedure

Type: double

Default: 0.5

MO_WRITE (OCC)
OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?

Type: boolean

Default: false

MODULE (CPHF)
CPHF — What app to test?

Type: string

Possible Values: RCPHF

Default: RCPHF

MOGRAD_DAMPING (OCC)
OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987)

Type: double

Default: 1.0

MOLDEN_WITH_VIRTUAL (GLOBALS)
GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false).

Type: boolean

Default: true

MOLDEN_WRITE (DFOCC)
DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule.

Type: boolean

Default: false

MOLDEN_WRITE (SCF)
SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule.

Type: boolean

Default: false

MOM_OCC (SCF)
SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta)

Type: array

Default: No Default

MOM_START (SCF)
SCF — The iteration to start MOM on (or 0 for no MOM)

Type: integer

Default: 0

MOM_VIR (SCF)
SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta)

Type: array

Default: No Default

MP2_AMP_TYPE (DFOCC)
DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary.

Type: string

Possible Values: DIRECT, CONV

Default: DIRECT

MP2_AMPS_PRINT (CCENERGY)
CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?

Type: boolean

Default: false

MP2_CCSD_METHOD (PSIMRCC)
PSIMRCC — How to perform MP2_CCSD computations

Type: string

Possible Values: I, IA, II

Default: II

MP2_GUESS (PSIMRCC)
PSIMRCC — Do start from a MP2 guess?

Type: boolean

Default: true

MP2_OS_SCALE (CCENERGY)
CCENERGY — MP2 opposite-spin scaling value

Type: double

Default: 1.20

MP2_OS_SCALE (DFMP2)
DFMP2 — OS Scale

Type: double

Default: 6.0

MP2_OS_SCALE (DFOCC)
DFOCC — MP2 opposite-spin scaling value

Type: double

Default: 6.0

MP2_OS_SCALE (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 6.0

MP2_SCALE_OS (FNOCC)
FNOCC — Opposite-spin scaling factor for SCS-MP2

Type: double

Default: 1.20

MP2_SCALE_SS (FNOCC)
FNOCC — Same-spin scaling factor for SCS-MP2

Type: double

Default: 1.0

MP2_SOS_SCALE (DFOCC)
DFOCC — MP2 Spin-opposite scaling (SOS) value

Type: double

Default: 1.3

MP2_SOS_SCALE (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 1.3

MP2_SOS_SCALE2 (DFOCC)
DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals

Type: double

Default: 1.2

MP2_SOS_SCALE2 (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 1.2

MP2_SS_SCALE (CCENERGY)
CCENERGY — MP2 same-spin scaling value

Type: double

Default: 1.0

MP2_SS_SCALE (DFMP2)
DFMP2 — SS Scale

Type: double

Default: 1.0

MP2_SS_SCALE (DFOCC)
DFOCC — MP2 same-spin scaling value

Type: double

Default: 1.0

MP2_SS_SCALE (OCC)
OCC — Removed in 1.4. Will raise an error in 1.5.

Type: double

Default: 1.0

MP2_TYPE (GLOBALS)
GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details.

Type: string

Possible Values: DF, CONV, CD

Default: DF

MP_TYPE (GLOBALS)
GLOBALS — Algorithm to use for MPn ( 
 ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF.

Type: string

Possible Values: DF, CONV, CD

Default: CONV

MPN (DETCI)
DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE.

Type: boolean

Default: false

MPN_ORDER_SAVE (DETCI)
DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true).

Type: integer

Default: 0

MPN_SCHMIDT (DETCI)
DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?

Type: boolean

Default: false

MPN_WIGNER (DETCI)
DETCI (Expert) — Do use Wigner formulas in the 
 series?

Type: boolean

Default: true

MRCC_LEVEL (MRCC)
MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56.

Type: integer

Default: 2

MRCC_METHOD (MRCC)
MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details.

Type: integer

Default: 1

MRCC_NUM_DOUBLET_ROOTS (MRCC)
MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56.

Type: integer

Default: 0

MRCC_NUM_SINGLET_ROOTS (MRCC)
MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56.

Type: integer

Default: 1

MRCC_NUM_TRIPLET_ROOTS (MRCC)
MRCC — Number of triplet roots. (Strictly speaking number of of roots with 
 and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56.

Type: integer

Default: 0

MRCC_OMP_NUM_THREADS (MRCC)
MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC.

Type: integer

Default: 1

MRCC_RESTART (MRCC)
MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56.

Type: integer

Default: 0

MS0 (DETCI)
DETCI — Do use the 
 component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option.

Type: boolean

Default: false

NAT_ORBS (DETCI)
DETCI — Do compute natural orbitals?

Type: boolean

Default: false

NAT_ORBS (DFOCC)
DFOCC — Do compute natural orbitals?

Type: boolean

Default: false

NAT_ORBS (FNOCC)
FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?

Type: boolean

Default: false

NAT_ORBS (OCC)
OCC — Do compute natural orbitals?

Type: boolean

Default: false

NAT_ORBS_T2 (SAPT)
SAPT — Do use MP2 natural orbital approximations for the 
 block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations.

Type: boolean

Default: true

NAT_ORBS_T3 (SAPT)
SAPT — Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations.

Type: boolean

Default: true

NAT_ORBS_V4 (SAPT)
SAPT — Do use MP2 natural orbital approximations for the 
 block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations.

Type: boolean

Default: true

NEW_TRIPLES (CCENERGY)
CCENERGY — Do use new triples?

Type: boolean

Default: true

NEW_TRIPLES (CCEOM)
CCEOM — Do use new triples?

Type: boolean

Default: true

NL_DISPERSION_PARAMETERS (SCF)
SCF — Parameters defining the -NL/-V dispersion correction. First b, then C

Type: array

Default: No Default

NO_DFILE (DETCI)
DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.)

Type: boolean

Default: false

NO_SINGLES (PSIMRCC)
PSIMRCC — Do disregard updating single excitation amplitudes?

Type: boolean

Default: false

NORMAL_MODES_WRITE (FINDIF)
FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule.

Type: boolean

Default: false

NUM_AMPS_PRINT (CCENERGY)
CCENERGY — Number of important  and  amplitudes to print

Type: integer

Default: 10

NUM_AMPS_PRINT (CCEOM)
CCEOM — Number of important CC amplitudes to print

Type: integer

Default: 5

NUM_AMPS_PRINT (CCLAMBDA)
CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT.

Type: integer

Default: 10

NUM_AMPS_PRINT (CCRESPONSE)
CCRESPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT.

Type: integer

Default: 5

NUM_AMPS_PRINT (DETCI)
DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT.

Type: integer

Default: 10

NUM_CORE_ORBITALS (ADC)
ADC — Number of orbitals to place in the core. This option is only available for the adcc backend.

Type: integer

Default: 0

NUM_DETS_PRINT (DETCI)
DETCI — Number of important determinants to print

Type: integer

Default: 20

NUM_FROZEN_DOCC (GLOBALS)
GLOBALS — The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE.

Type: integer

Default: 0

NUM_FROZEN_UOCC (GLOBALS)
GLOBALS — The number of virtual orbitals to freeze in later correlated computations.

Type: integer

Default: 0

NUM_GUESSES (ADC)
ADC — Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend.

Type: integer

Default: -1

NUM_INIT_VECS (DETCI)
DETCI (Expert) — The number of initial vectors to use in the CI iterative procedure. Defaults to the number of roots.

Type: integer

Default: 0

NUM_ROOTS (DETCI)
DETCI — number of CI roots to find

Type: integer

Default: 1

OCC_ORBS_PRINT (DFOCC)
DFOCC — Do print OCC orbital energies?

Type: boolean

Default: false

OCC_ORBS_PRINT (OCC)
OCC — Do print OCC orbital energies?

Type: boolean

Default: false

OCC_PERCENTAGE (FNOCC)
FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE.

Type: double

Default: 99.0

OCC_TOLERANCE (FNOCC)
FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true.

Type: conv double

Default: 1.0e-6

OCC_TOLERANCE (SAPT)
SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations

Type: conv double

Default: 1.0e-6

ODC_GUESS (DCT)
DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS.

Type: boolean

Default: false

OEPROP (DFOCC)
DFOCC — Do compute one electron properties?

Type: boolean

Default: false

OEPROP (OCC)
OCC — Do compute one electron properties?

Type: boolean

Default: false

OFFDIAGONAL_CCSD_T (PSIMRCC)
PSIMRCC — Do include the off-diagonal corrections in (T) computations?

Type: boolean

Default: true

OMEGA (CCRESPONSE)
CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU.

Type: array

Default: No Default

OMEGA_ERF (MINTS)
MINTS — Omega scaling for Erf and Erfc.

Type: double

Default: 0.20

ONEPDM (DFMP2)
DFMP2 — Do compute one-particle density matrix?

Type: boolean

Default: false

ONEPOT_GRID_READ (SCF)
SCF — Read an external potential from the .dx file?

Type: boolean

Default: false

OO_SCALE (DFOCC)
DFOCC — OO scaling factor used in MSD

Type: double

Default: 0.01

OPDM (DCT)
DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations.

Type: boolean

Default: false

OPDM (DETCI)
DETCI — Do compute one-particle density matrix if not otherwise required?

Type: boolean

Default: false

OPDM_ONLY (CCDENSITY)
CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix.

Type: boolean

Default: false

OPDM_RELAX (CCDENSITY)
CCDENSITY — Do relax the one-particle density matrix?

Type: boolean

Default: false

OPDM_RELAX (DFMP2)
DFMP2 — Do relax the one-particle density matrix?

Type: boolean

Default: true

OPT_COORDINATES (OPTKING)
OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1

Type: string

Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM

Default: INTERNAL

OPT_METHOD (DFOCC)
DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options.

Type: string

Possible Values: QNR

Default: QNR

OPT_METHOD (OCC)
OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option.

Type: string

Possible Values: MSD, ORB_RESP

Default: MSD

OPT_RESTART (OPTKING)
OPTKING — Restart the optimization from optking’s written history

Type: double

Default: 0

OPT_TYPE (OPTKING)
OPTKING — Specifies minimum search, transition-state search, or IRC following

Type: string

Possible Values: MIN, TS, IRC

Default: MIN

ORB_OPT (DFOCC)
DFOCC — Do optimize the orbitals?

Type: boolean

Default: true

ORB_OPT (OCC)
OCC — Do optimize the orbitals?

Type: boolean

Default: true

ORB_RESP_SOLVER (DFOCC)
DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method.

Type: string

Possible Values: PCG, LINEQ

Default: PCG

ORB_RESP_SOLVER (OCC)
OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method.

Type: string

Possible Values: PCG, LINEQ

Default: PCG

ORBITAL_LEVEL_SHIFT (DCT)
DCT (Expert) — The shift applied to the denominator in the orbital update iterations

Type: double

Default: 0.0

ORBITALS_WRITE (SCF)
SCF — File name (case sensitive) to which to serialize Wavefunction orbital data.

Type: string

Default: No Default

ORTH_TYPE (DFOCC)
DFOCC — The algorithm for orthogonalization of MOs

Type: string

Possible Values: GS, MGS

Default: MGS

ORTH_TYPE (OCC)
OCC — The algorithm for orthogonalization of MOs

Type: string

Possible Values: GS, MGS

Default: MGS

OS_SCALE (OCC)
OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent.

Type: double

Default: 1

OVERLAP_CHECK (CCEOM)
CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use.

Type: boolean

Default: false

P (THERMO)
THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP.

Type: double

Default: 101325

PAIR_ENERGIES_PRINT (CCENERGY)
CCENERGY — Do print MP2 and CCSD pair energies for RHF references?

Type: boolean

Default: false

PARALLEL (SCF)
SCF (Expert) — Do run in parallel?

Type: boolean

Default: false

PARENT_SYMMETRY (GLOBALS)
GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference.

Type: string

Default: No Default

PCG_BETA_TYPE (DFOCC)
DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0.

Type: string

Possible Values: FLETCHER_REEVES, POLAK_RIBIERE

Default: FLETCHER_REEVES

PCG_BETA_TYPE (OCC)
OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere).

Type: string

Possible Values: FLETCHER_REEVES, POLAK_RIBIERE

Default: FLETCHER_REEVES

PCG_CONVERGENCE (DFOCC)
DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve R_CONVERGENCE residual convergence. The listed default will be used for the default value of R_CONVERGENCE.

Type: conv double

Default: 1e-7

PCG_CONVERGENCE (OCC)
OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method.

Type: conv double

Default: 1e-6

PCG_MAXITER (DFOCC)
DFOCC — Maximum number of preconditioned conjugate gradient iterations.

Type: integer

Default: 50

PCG_MAXITER (OCC)
OCC — Maximum number of preconditioned conjugate gradient iterations.

Type: integer

Default: 30

PCM (GLOBALS)
GLOBALS — PCM boolean for pcmsolver module

Type: boolean

Default: false

PCM_CC_TYPE (PCM)
PCM — PCM-CCSD algorithm type.

Type: string

Possible Values: PTE

Default: PTE

PCM_SCF_TYPE (PCM)
PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step.

Type: string

Possible Values: TOTAL, SEPARATE

Default: TOTAL

PCMSOLVER_PARSED_FNAME (PCM)
PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py

Type: string

Default: No Default

PE (GLOBALS)
GLOBALS — PE boolean for polarizable embedding module

Type: boolean

Default: false

PE_ECP (PE)
PE — use PE(ECP) repulsive potentials

Type: boolean

Default: false

PERTURB_CBS (PSIMRCC)
PSIMRCC — Removed in 1.4. Will raise an error in 1.5.

Type: boolean

Default: false

PERTURB_CBS_COUPLING (PSIMRCC)
PSIMRCC — Removed in 1.4. Will raise an error in 1.5.

Type: boolean

Default: true

PERTURB_DIPOLE (SCF)
SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions

Type: array

Default: No Default

PERTURB_H (SCF)
SCF — Do perturb the Hamiltonian?

Type: boolean

Default: false

PERTURB_MAGNITUDE (DETCI)
DETCI (Expert) — The magnitude of perturbation 
 in 

Type: double

Default: 1.0

PERTURB_MAGNITUDE (SCF)
SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead

Type: double

Default: 0.0

PERTURB_WITH (SCF)
SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future

Type: string

Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX

Default: DIPOLE

PHI_POINTS (SCF)
SCF — Number of azimuthal grid points for spherical potential integration

Type: integer

Default: 360

PK_ALL_NONSYM (SCF)
SCF (Expert) — All densities are considered non symmetric, debug only.

Type: boolean

Default: false

PK_MAX_BUCKETS (SCF)
SCF (Expert) — Maximum numbers of batches to read PK supermatrix.

Type: integer

Default: 500

PNO_CONVERGENCE (DLPNO)
DLPNO — General convergence criteria for DLPNO methods

Type: string

Possible Values: LOOSE, NORMAL, TIGHT

Default: NORMAL

POINTS (FINDIF)
FINDIF — Number of points for finite-differences (3 or 5)

Type: integer

Default: 3

POTFILE (PE)
PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly.

Type: string

Default: potfile.pot

PPL_TYPE (DFOCC)
DFOCC — Type of the CCSD PPL term.

Type: string

Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO

Default: AUTO

PRECONDITIONER (DETCI)
DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, and ITER_INV approaches are all formally equivalent but the ITER_INV is less computationally expensive. Default is DAVIDSON.

Type: string

Possible Values: LANCZOS, DAVIDSON, GEN_DAVIDSON, H0BLOCK, ITER_INV, EVANGELISTI

Default: DAVIDSON

PRINT (CPHF)
CPHF — The amount of information printed to the output file

Type: integer

Default: 1

PRINT (EFP)
EFP — The amount of information printed to the output file.

Type: integer

Default: 1

PRINT (GLOBALS)
GLOBALS — The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information.

Type: integer

Default: 1

PRINT (SAPT)
SAPT — The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed.

Type: integer

Default: 1

PRINT_BASIS (SCF)
SCF — Do print the basis set?

Type: boolean

Default: false

PRINT_MOS (SCF)
SCF — Do print the molecular orbitals?

Type: boolean

Default: false

PRINT_NOONS (GLOBALS)
GLOBALS — How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc

Type: string

Default: 3

PRINT_OPT_PARAMS (OPTKING)
OPTKING — Print all optking parameters.

Type: boolean

Default: false

PRINT_TRAJECTORY_XYZ_FILE (OPTKING)
OPTKING — Should an xyz trajectory file be kept (useful for visualization)?

Type: boolean

Default: false

PROCESS_GRID (SCF)
SCF (Expert) — The dimension sizes of the processor grid

Type: array

Default: No Default

PROP_ALL (CCDENSITY)
CCDENSITY — Compute non-relaxed properties for all excited states.

Type: boolean

Default: true

PROP_ALL (CCLAMBDA)
CCLAMBDA — Compute unrelaxed properties for all excited states.

Type: boolean

Default: true

PROP_ROOT (CCDENSITY)
CCDENSITY — Root number (within its irrep) for computing properties

Type: integer

Default: 1

PROP_ROOT (CCEOM)
CCEOM — Root number (within its irrep) for computing properties. Defaults to highest root requested.

Type: integer

Default: 0

PROP_ROOT (CCLAMBDA)
CCLAMBDA — Root number (within its irrep) for computing properties

Type: integer

Default: 1

PROP_SYM (CCDENSITY)
CCDENSITY — The symmetry of states

Type: integer

Default: 1

PROP_SYM (CCEOM)
CCEOM — Symmetry of the state to compute properties. Defaults to last irrep for which states are requested.

Type: integer

Default: 1

PROP_SYM (CCLAMBDA)
CCLAMBDA — The symmetry of states

Type: integer

Default: 1

PROPERTIES (GLOBALS)
GLOBALS — List of properties to compute

Type: array

Default: No Default

PROPERTIES_ORIGIN (GLOBALS)
GLOBALS — Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed.

Type: array

Default: No Default

PROPERTY (CCENERGY)
CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above.

Type: string

Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL

Default: POLARIZABILITY

PROPERTY (CCRESPONSE)
CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above.

Type: string

Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL

Default: POLARIZABILITY

PT_ENERGY (PSIMRCC)
PSIMRCC — The type of perturbation theory computation to perform

Type: string

Default: SECOND_ORDER

PUREAM (GLOBALS)
GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL.

Type: boolean

Default: true

QC_COUPLING (DCT)
DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only)

Type: boolean

Default: false

QC_MODULE (GLOBALS)
GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC.

Type: string

Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC

Default: No Default

QC_TYPE (DCT)
DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step.

Type: string

Possible Values: TWOSTEP, SIMULTANEOUS

Default: SIMULTANEOUS

QCHF (DFOCC)
DFOCC — Do perform a QCHF computation?

Type: boolean

Default: false

QCHF (SCF)
SCF — Do perform a QCHF computation?

Type: boolean

Default: false

QMEFP (EFP)
EFP (Expert) — Do turn on QM/EFP terms?

Type: boolean

Default: false

R4S (DETCI)
DETCI (Expert) — Do restrict strings with 
 in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded.

Type: boolean

Default: false

R_CONVERGENCE (ADC)
ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6)

Type: conv double

Default: -1

R_CONVERGENCE (CCENERGY)
CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations.

Type: conv double

Default: 1e-7

R_CONVERGENCE (CCEOM)
CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM.

Type: conv double

Default: 1e-6

R_CONVERGENCE (CCLAMBDA)
CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations.

Type: conv double

Default: 1e-7

R_CONVERGENCE (CCRESPONSE)
CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations.

Type: conv double

Default: 1e-7

R_CONVERGENCE (DCT)
DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector

Type: conv double

Default: 1e-10

R_CONVERGENCE (DETCI)
DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients.

Type: conv double

Default: 1e-4

R_CONVERGENCE (DFOCC)
DFOCC — Convergence criterion for amplitudes (residuals).

Type: conv double

Default: 1e-5

R_CONVERGENCE (DLPNO)
DLPNO — Residual convergence criteria for local MP2 iterations

Type: conv double

Default: 1e-6

R_CONVERGENCE (FNOCC)
FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied.

Type: conv double

Default: 1.0e-7

R_CONVERGENCE (OCC)
OCC — Convergence criterion for amplitudes (residuals).

Type: conv double

Default: 1e-5

R_CONVERGENCE (PSIMRCC)
PSIMRCC — Convergence criterion for amplitudes (residuals).

Type: conv double

Default: 1e-9

R_POINTS (SCF)
SCF — Number of radial grid points for spherical potential integration

Type: integer

Default: 100

RADIUS (SCF)
SCF — Radius (bohr) of a hard-sphere external potential

Type: double

Default: 10.0

RANGED_BEND (OPTKING)
OPTKING — Specify range for angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_BEND

Type: string

Default: No Default

RANGED_DIHEDRAL (OPTKING)
OPTKING — Specify range for the dihedral angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DIHEDRAL

Type: string

Default: No Default

RANGED_DISTANCE (OPTKING)
OPTKING — Specify range for distances between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DISTANCE

Type: string

Default: No Default

RANGED_OOFP (OPTKING)
OPTKING — Specify range for the out-of-plane angles between atoms to be constrained to (eq. value specified) analogous to the old FIXED_<COORD> keyword

Type: string

Default: No Default

RAS1 (GLOBALS)
GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1

Type: array

Default: No Default

RAS2 (GLOBALS)
GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2

Type: array

Default: No Default

RAS3 (GLOBALS)
GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3

Type: array

Default: No Default

RAS34_MAX (DETCI)
DETCI — maximum number of electrons in RAS III + IV

Type: integer

Default: -1

RAS3_MAX (DETCI)
DETCI — maximum number of electrons in RAS III

Type: integer

Default: -1

RAS4 (GLOBALS)
GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4

Type: array

Default: No Default

RAS4_MAX (DETCI)
DETCI — maximum number of electrons in RAS IV

Type: integer

Default: -1

READ_SCF_3INDEX (DFOCC)
DFOCC — Do read 3-index integrals from SCF files?

Type: boolean

Default: true

REFERENCE (ADC)
ADC — Reference wavefunction type

Type: string

Possible Values: RHF, UHF

Default: RHF

REFERENCE (CCDENSITY)
CCDENSITY — Reference wavefunction type

Type: string

Default: RHF

REFERENCE (CCENERGY)
CCENERGY — Reference wavefunction type

Type: string

Possible Values: RHF, ROHF, UHF

Default: RHF

REFERENCE (CCEOM)
CCEOM — Reference wavefunction type

Type: string

Possible Values: RHF, ROHF, UHF

Default: RHF

REFERENCE (CCRESPONSE)
CCRESPONSE — Reference wavefunction type

Type: string

Default: RHF

REFERENCE (CCTRANSORT)
CCTRANSORT — Reference wavefunction type

Type: string

Default: RHF

REFERENCE (CCTRIPLES)
CCTRIPLES — Reference wavefunction type

Type: string

Default: RHF

REFERENCE (DCT)
DCT — Reference wavefunction type

Type: string

Possible Values: UHF, RHF, ROHF

Default: RHF

REFERENCE (DETCI)
DETCI — Reference wavefunction type

Type: string

Possible Values: RHF, ROHF

Default: RHF

REFERENCE (MCSCF)
MCSCF — Reference wavefunction type

Type: string

Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL

Default: RHF

REFERENCE (SCF)
SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE.

Type: string

Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS

Default: RHF

REFERENCE_SYM (DETCI)
DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep.

Type: integer

Default: -1

REG_PARAM (DFOCC)
DFOCC — Regularization parameter

Type: double

Default: 0.4

REGULARIZATION (DFOCC)
DFOCC — Do use regularized denominators?

Type: boolean

Default: false

RELATIVISTIC (GLOBALS)
GLOBALS (Expert) — Relativistic Hamiltonian type

Type: string

Possible Values: NO, X2C

Default: NO

RELAX_GUESS_ORBITALS (DCT)
DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only)

Type: boolean

Default: false

RELAXED (OCC)
OCC — Do consider orbital response contributions for PDMs and GFM?

Type: boolean

Default: true

REMP_A (DFOCC)
DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction

Type: double

Default: 0.15e0

REMP_A (OCC)
OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction

Type: double

Default: 0.15e0

REPL_OTF (DETCI)
DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on.

Type: boolean

Default: false

RESPONSE_ALGORITHM (DCT)
DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties

Type: string

Possible Values: TWOSTEP, SIMULTANEOUS

Default: TWOSTEP

RESTART (CCENERGY)
CCENERGY — Do restart the coupled-cluster iterations from old 
 and 
 amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false.

Type: boolean

Default: true

RESTART (CCLAMBDA)
CCLAMBDA — Do restart the coupled-cluster iterations from old 
 and 
 amplitudes?

Type: boolean

Default: false

RESTART (CCRESPONSE)
CCRESPONSE — Do restart from on-disk amplitudes?

Type: boolean

Default: true

RESTART (DETCI)
DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk.

Type: boolean

Default: false

RESTART_EOM_CC3 (CCEOM)
CCEOM — Do restart from on-disk?

Type: boolean

Default: false

RESTRICTED_DOCC (GLOBALS)
GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF)

Type: array

Default: No Default

RESTRICTED_UOCC (GLOBALS)
GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF)

Type: array

Default: No Default

RFO_FOLLOW_ROOT (OPTKING)
OPTKING — Do follow the initial RFO vector after the first step?

Type: boolean

Default: false

RFO_NORMALIZATION_MAX (OPTKING)
OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored.

Type: double

Default: 100

RFO_ROOT (OPTKING)
OPTKING — Root for RFO to follow, 0 being lowest (for a minimum)

Type: integer

Default: 0

RHF_TRIPLETS (CCEOM)
CCEOM — Do form a triplet state from RHF reference?

Type: boolean

Default: false

RMS_DISP_G_CONVERGENCE (OPTKING)
OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units).

Type: conv double

Default: 1.2e-3

RMS_FORCE_G_CONVERGENCE (OPTKING)
OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units).

Type: conv double

Default: 3.0e-4

RMS_MOGRAD_CONVERGENCE (DFOCC)
DFOCC — Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE.

Type: conv double

Default: 1e-4

RMS_MOGRAD_CONVERGENCE (OCC)
OCC — Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE.

Type: conv double

Default: 1e-4

ROOTS_PER_IRREP (ADC)
ADC — The number of poles / excited states to obtain per irrep vector

Type: array

Default: No Default

ROOTS_PER_IRREP (CCDENSITY)
CCDENSITY — The number of electronic states to computed, per irreducible representation

Type: array

Default: No Default

ROOTS_PER_IRREP (CCEOM)
CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition.

Type: array

Default: No Default

ROOTS_PER_IRREP (CCLAMBDA)
CCLAMBDA — The number of electronic states to computed, per irreducible representation

Type: array

Default: No Default

ROTATE_MO_ANGLE (MCSCF)
MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate.

Type: double

Default: 0.0

ROTATE_MO_IRREP (MCSCF)
MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate.

Type: integer

Default: 1

ROTATE_MO_P (MCSCF)
MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate.

Type: integer

Default: 1

ROTATE_MO_Q (MCSCF)
MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate.

Type: integer

Default: 2

ROTATIONAL_SYMMETRY_NUMBER (THERMO)
THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software.

Type: integer

Default: 1

RSRFO_ALPHA_MAX (OPTKING)
OPTKING — Absolute maximum value of RS-RFO.

Type: double

Default: 1e8

RUN_CCSD (FNOCC)
FNOCC (Expert) — do ccsd rather than qcisd?

Type: boolean

Default: false

RUN_CCTRANSORT (CCTRANSORT)
CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture

Type: boolean

Default: true

RUN_CEPA (FNOCC)
FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure.

Type: boolean

Default: false

RUN_MP2 (FNOCC)
FNOCC (Expert) — do only evaluate mp2 energy?

Type: boolean

Default: false

RUN_MP3 (FNOCC)
FNOCC (Expert) — do only evaluate mp3 energy?

Type: boolean

Default: false

RUN_MP4 (FNOCC)
FNOCC (Expert) — do only evaluate mp4 energy?

Type: boolean

Default: false

S (DETCI)
DETCI — The value of the spin quantum number 
 is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the 
 component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of 
 (if CALC_S_SQUARED is TRUE and ICORE = 1).

Type: double

Default: 0.0

S_CHOLESKY_TOLERANCE (SCF)
SCF — Tolerance for partial Cholesky decomposition of overlap matrix.

Type: conv double

Default: 1e-8

S_CUT (DLPNO)
DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies

Type: double

Default: 1e-8

S_ORTHOGONALIZATION (SCF)
SCF — SO orthogonalization: automatic, symmetric, or canonical?

Type: string

Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY

Default: AUTO

S_TOLERANCE (SCF)
SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed.

Type: conv double

Default: 1e-7

SAD_CHOL_TOLERANCE (SCF)
SCF (Expert) — SAD guess density decomposition threshold

Type: conv double

Default: 1e-7

SAD_D_CONVERGENCE (SCF)
SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE.

Type: conv double

Default: 1e-5

SAD_E_CONVERGENCE (SCF)
SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE.

Type: conv double

Default: 1e-5

SAD_FRAC_OCC (SCF)
SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?

Type: boolean

Default: true

SAD_MAXITER (SCF)
SCF (Expert) — Maximum number of atomic SCF iterations within SAD

Type: integer

Default: 50

SAD_PRINT (SCF)
SCF (Expert) — The amount of SAD information to print to the output

Type: integer

Default: 0

SAD_SCF_TYPE (SCF)
SCF (Expert) — SCF type used for atomic calculations in SAD guess

Type: string

Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK

Default: DF

SAD_SPIN_AVERAGE (SCF)
SCF (Expert) — Do use spin-averaged occupations instead of atomic ground spin state in fractional SAD?

Type: boolean

Default: true

SAPGAU_BASIS (SCF)
SCF — The potential basis set used for the SAPGAU guess

Type: string

Default: sap_helfem_large

SAPT (SCF)
SCF (Expert) — Are going to do SAPT? If so, what part?

Type: string

Default: FALSE

SAPT0_E10 (SAPT)
SAPT (Expert) — For SAPT0 only, compute only first-order electrostatics and exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term

Type: boolean

Default: false

SAPT0_E20DISP (SAPT)
SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term

Type: boolean

Default: false

SAPT0_E20IND (SAPT)
SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term

Type: boolean

Default: false

SAPT_DFT_DO_DHF (SAPT)
SAPT — Compute the Delta-HF correction?

Type: boolean

Default: true

SAPT_DFT_DO_HYBRID (SAPT)
SAPT (Expert) — Enables the hybrid xc kernel in dispersion?

Type: boolean

Default: true

SAPT_DFT_EXCH_DISP_FIXED_SCALE (SAPT)
SAPT (Expert) — Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME. Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014).

Type: double

Default: 0.770

SAPT_DFT_EXCH_DISP_SCALE_SCHEME (SAPT)
SAPT — Scheme for approximating exchange-dispersion for SAPT-DFT. Previous to Nov 2022, default was FIXED with Hesselmann value. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u .

Type: string

Possible Values: NONE, FIXED, DISP

Default: FIXED

SAPT_DFT_FUNCTIONAL (SAPT)
SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT)

Type: string

Default: PBE0

SAPT_DFT_GRAC_DETERMINATION (SAPT)
SAPT (Expert) — How is the GRAC correction determined?

Type: string

Possible Values: INPUT

Default: INPUT

SAPT_DFT_GRAC_SHIFT_A (SAPT)
SAPT — Monomer A GRAC shift in Hartree

Type: double

Default: 0.0

SAPT_DFT_GRAC_SHIFT_B (SAPT)
SAPT — Monomer B GRAC shift in Hartree

Type: double

Default: 0.0

SAPT_DFT_MP2_DISP_ALG (SAPT)
SAPT (Expert) — Which MP2 Exch-Disp module to use?

Type: string

Possible Values: FISAPT, SAPT

Default: SAPT

SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)
SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration

Type: double

Default: 0.3

SAPT_FDDS_DISP_NUM_POINTS (SAPT)
SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration

Type: integer

Default: 10

SAPT_FDDS_V2_RHO_CUTOFF (SAPT)
SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS

Type: double

Default: 1.e-6

SAPT_LEVEL (SAPT)
SAPT — The level of theory for SAPT

Type: string

Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3

Default: SAPT0

SAPT_MEM_CHECK (SAPT)
SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised.

Type: boolean

Default: true

SAPT_MEM_FACTOR (SAPT)
SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion.

Type: double

Default: 0.9

SAPT_MEM_SAFETY (SAPT)
SAPT — Memory safety

Type: double

Default: 0.9

SAPT_QUIET (SAPT)
SAPT (Expert) — Interior option to clean up printing

Type: boolean

Default: false

SAVE_JK (SCF)
SCF — Keep JK object for later use?

Type: boolean

Default: false

SAVE_OPTIMIZATION (OPTKING)
OPTKING — Save OptKing’s internal classes for possible restart upon error

Type: boolean

Default: false

SAVE_UHF_NOS (SCF)
SCF — Save the UHF NOs

Type: boolean

Default: false

SCF_INITIAL_ACCELERATOR (SCF)
SCF — Use a method to accelerate initial SCF convergence? Use NONE for DIIS alone (if enabled) and EDIIS or ADIIS to have both the chosen accelerator and DIIS (if enabled). For restricted-open references, EDIIS and ADIIS have no effect.

Type: string

Possible Values: NONE, EDIIS, ADIIS

Default: ADIIS

SCF_INITIAL_FINISH_DIIS_TRANSITION (SCF)
SCF — SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249

Type: double

Default: 1.0e-4

SCF_INITIAL_START_DIIS_TRANSITION (SCF)
SCF — SCF error at which to start the linear interpolation between DIIS steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249

Type: double

Default: 1.0e-1

SCF_MEM_SAFETY_FACTOR (SCF)
SCF — Memory safety factor for allocating JK

Type: double

Default: 0.75

SCF_PROPERTIES (SCF)
SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations.

Type: array

Default: No Default

SCF_SUBTYPE (SCF)
SCF (Expert) — For certain SCF_TYPE algorithms that have internal sub-algorithms depending on available memory or other hardware constraints, allow the best sub-algorithm for the molecule and conditions (AUTO ; usual mode) or forcibly select a sub-algorithm (usually only for debugging or profiling). Presently, SCF_SUBTYPE=DF, SCF_SUBTYPE=MEM_DF, and SCF_SUBTYPE=DISK_DF can have INCORE and OUT_OF_CORE selected; and SCF_TYPE=PK can have INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, and REORDER_OUT_OF_CORE selected.

Type: string

Possible Values: AUTO, INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, REORDER_OUT_OF_CORE

Default: AUTO

SCF_TYPE (CPHF)
CPHF — SCF Type

Type: string

Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK, DFDIRJ+SNLINK, DFDIRJ+LINK, DFDIRJ+COSX

Default: DIRECT

SCF_TYPE (GLOBALS)
GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types.

Type: string

Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, DFDIRJ, DFDIRJ+COSX, DFDIRJ+LINK, DFDIRJ+SNLINK

Default: PK

SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM)
CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure.

Type: conv double

Default: 1e-3

SCREENING (GLOBALS)
GLOBALS — The type of screening used when computing two-electron integrals.

Type: string

Possible Values: SCHWARZ, CSAM, DENSITY, NONE

Default: CSAM

SCS_CCSD (CCENERGY)
CCENERGY — Do spin-component-scaled CCSD

Type: boolean

Default: false

SCS_CCSD (FNOCC)
FNOCC — Do SCS-CCSD?

Type: boolean

Default: false

SCS_CEPA (FNOCC)
FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD.

Type: boolean

Default: false

SCS_MP2 (CCENERGY)
CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?

Type: boolean

Default: false

SCS_MP2 (FNOCC)
FNOCC — Do SCS-MP2?

Type: boolean

Default: false

SCS_TYPE (DFOCC)
DFOCC — Type of the SCS method

Type: string

Possible Values: SCS, SCSN, SCSVDW, SCSMI

Default: SCS

SCS_TYPE (OCC)
OCC — Type of the SCS method

Type: string

Possible Values: SCS, SCSN, SCSVDW, SCSMI

Default: SCS

SCSN_MP2 (CCENERGY)
CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?

Type: boolean

Default: false

SEKINO (CCLAMBDA)
CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?

Type: boolean

Default: false

SEKINO (CCRESPONSE)
CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?

Type: boolean

Default: false

SEMICANONICAL (CCENERGY)
CCENERGY — Convert ROHF MOs to semicanonical MOs

Type: boolean

Default: true

SEMICANONICAL (CCEOM)
CCEOM — Convert ROHF MOs to semicanonical MOs

Type: boolean

Default: true

SEMICANONICAL (CCTRANSORT)
CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies

Type: boolean

Default: false

SEMICANONICAL (CCTRIPLES)
CCTRIPLES — Convert ROHF MOs to semicanonical MOs

Type: boolean

Default: true

SF_RESTRICT (DETCI)
DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)]

Type: boolean

Default: false

SIGMA_OVERLAP (DETCI)
DETCI (Expert) — Do print the sigma overlap matrix? Not generally useful.

Type: boolean

Default: false

SINGLES_PRINT (CCEOM)
CCEOM — Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?

Type: boolean

Default: false

SMALL_CUTOFF (PSIMRCC)
PSIMRCC —

Type: integer

Default: 0

SNLINK_BASIS_TOLERANCE (SCF)
SCF (Expert) — Screening criteria for basis function values on snLinK grids

Type: conv double

Default: 1.0e-10

SNLINK_DENSITY_TOLERANCE (SCF)
SCF (Expert) — Screening criteria for shell-pair densities in snLinK

Type: conv double

Default: 1.0e-10

SNLINK_FORCE_CARTESIAN (SCF)
SCF (Expert) — Force snLinK to use cartesian coordinates

Type: boolean

Default: false

SNLINK_GPU_MEM (SCF)
SCF (Expert) — Proportion (in %) of available GPU memory to allocate to snLinK.

Type: boolean

Default: 90

SNLINK_GRID_BATCH_SIZE (SCF)
SCF (Expert) — Maximum number of grid points per grid block for GauXC

Type: integer

Default: 2048

SNLINK_INTEGRATOR_KERNEL (SCF)
SCF (Expert) — Integrator execution kernel for snLinK GauXC also has SHELLBATCHED, but it is incompatible with Psi4 due to not being yet implemented with sn-LinK.

Type: string

Possible Values: DEFAULT, INCORE

Default: DEFAULT

SNLINK_INTS_TOLERANCE (SCF)
SCF — Screening criteria for integrals and intermediates in snLinK

Type: conv double

Default: 1.0e-11

SNLINK_LOAD_BALANCER_KERNEL (SCF)
SCF (Expert) — Load Balancer kernel for snLinK

Type: string

Possible Values: DEFAULT, REPLICATED, REPLICATED-PETITE, REPLICATED-FILLIN

Default: DEFAULT

SNLINK_LWD_KERNEL (SCF)
SCF (Expert) — Integrator local work driver kernel for snLinK GauXC also has SCHEME1-CUTLASS, but it is disabled in Psi4 for now due to compile-time issues and requiring very modern CUDA CCs (>=80)

Type: string

Possible Values: DEFAULT, REFERENCE, SCHEME1, SCHEME1-MAGMA

Default: DEFAULT

SNLINK_MOL_WEIGHTS_KERNEL (SCF)
SCF (Expert) — Molecular Weights kernel for snLinK

Type: string

Possible Values: DEFAULT

Default: DEFAULT

SNLINK_PRUNING_SCHEME (SCF)
SCF (Expert) — Pruning scheme for snLinK grids

Type: string

Possible Values: ROBUST, TREUTLER, NONE

Default: ROBUST

SNLINK_RADIAL_POINTS (SCF)
SCF — Number of radial points in snLinK grid.

Type: integer

Default: 70

SNLINK_RADIAL_SCHEME (SCF)
SCF — Radial Scheme for snLinK grid. MURA is default here as it matches the GauXC default option

Type: string

Possible Values: MURA, TREUTLER, EM

Default: MURA

SNLINK_REDUCTION_KERNEL (SCF)
SCF (Expert) — Integrator reduction kernel for snLinK GauXC also has NCCL, but it is incompatible with Psi4 due to requiring MPI.

Type: string

Possible Values: DEFAULT, BASICMPI

Default: DEFAULT

SNLINK_SPHERICAL_POINTS (SCF)
SCF — Number of spherical points in snLinK grid.

Type: integer

Default: 302

SNLINK_USE_DEBUG_GRID (SCF)
SCF (Expert) — Overwrite sn-LinK grid options with debug grid matching GauXC’s Ultrafine grid spec

Type: integer

Default: false

SNLINK_USE_GPU (SCF)
SCF — Use GPU for GauXC?

Type: boolean

Default: false

SOCC (GLOBALS)
GLOBALS — An array containing the number of singly-occupied orbitals per irrep (in Cotton order). The value of DOCC should also be set.

Type: array

Default: No Default

SOCC (MCSCF)
MCSCF — The number of singly occupied orbitals, per irrep

Type: array

Default: No Default

SOLVER_CONVERGENCE (CPHF)
CPHF — Solver convergence threshold (max 2-norm).

Type: conv double

Default: 1.0e-6

SOLVER_CONVERGENCE (SCF)
SCF — Convergence threshold (max 2-norm) for numerical solvers (instability analysis and CPHF/CPKS).

Type: conv double

Default: 1.0e-6

SOLVER_MAXITER (CPHF)
CPHF — Solver maximum iterations

Type: integer

Default: 100

SOLVER_MAXITER (SCF)
SCF — Maximum iterations for numerical solvers (instability analysis and CPHF/CPKS).

Type: integer

Default: 100

SOLVER_N_GUESS (CPHF)
CPHF — DL Solver number of guesses

Type: integer

Default: 1

SOLVER_N_GUESS (SCF)
SCF — Number of guess vectors per root for instability analysis.

Type: integer

Default: 1

SOLVER_N_ROOT (SCF)
SCF — Number of roots to converge for all irreps during instability analysis. (Overridden by SOLVER_ROOTS_PER_IRREP.)

Type: integer

Default: 1

SOLVER_PRECONDITION (CPHF)
CPHF — Solver precondition type

Type: string

Possible Values: SUBSPACE, JACOBI, NONE

Default: JACOBI

SOLVER_ROOTS_PER_IRREP (SCF)
SCF — Number of roots to converge, per irrep, during instability analysis. (Overrides SOLVER_N_ROOT.)

Type: array

Default: No Default

SOS_TYPE (DFOCC)
DFOCC — Type of the SOS method

Type: string

Possible Values: SOS, SOSPI

Default: SOS

SOS_TYPE (OCC)
OCC — Type of the SOS method

Type: string

Possible Values: SOS, SOSPI

Default: SOS

SOSCF (SCF)
SCF — Do use second-order SCF convergence methods?

Type: boolean

Default: false

SOSCF_CONV (SCF)
SCF — Second order convergence threshold. Cease microiterating at this value.

Type: conv double

Default: 5.0e-3

SOSCF_MAX_ITER (SCF)
SCF — Maximum number of second-order microiterations to perform.

Type: integer

Default: 5

SOSCF_MIN_ITER (SCF)
SCF — Minimum number of second-order microiterations to perform.

Type: integer

Default: 1

SOSCF_PRINT (SCF)
SCF — Do we print the SOSCF microiterations?.

Type: boolean

Default: false

SOSCF_START_CONVERGENCE (SCF)
SCF — When to start second-order SCF iterations based on gradient RMS.

Type: conv double

Default: 1.0e-2

SPIN_SCALE_TYPE (OCC)
OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally.

Type: string

Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI

Default: NONE

SS_E_CONVERGENCE (CCEOM)
CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM.

Type: conv double

Default: 1e-6

SS_R_CONVERGENCE (CCEOM)
CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM.

Type: conv double

Default: 1e-6

SS_SCALE (OCC)
OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent.

Type: double

Default: 1

SS_SKIP_DIAG (CCEOM)
CCEOM — Do skip diagonalization of Hbar SS block?

Type: boolean

Default: false

SS_VECS_PER_ROOT (CCEOM)
CCEOM — SS vectors stored per root

Type: integer

Default: 5

SSAPT0_SCALE (FISAPT)
FISAPT — Do sSAPT0 exchange-scaling with F-SAPT

Type: boolean

Default: false

STABILITY_ADD_VECTORS (DCT)
DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check

Type: integer

Default: 20

STABILITY_ANALYSIS (SCF)
SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution.

Type: string

Possible Values: NONE, CHECK, FOLLOW

Default: NONE

STABILITY_AUGMENT_SPACE_TOL (DCT)
DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check

Type: conv double

Default: 0.1

STABILITY_CHECK (DCT)
DCT (Expert) — Performs stability analysis of the DCT energy

Type: boolean

Default: false

STABILITY_CONVERGENCE (DCT)
DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check

Type: conv double

Default: 1e-4

STABILITY_MAX_SPACE_SIZE (DCT)
DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied

Type: integer

Default: 200

STABILITY_N_EIGENVALUES (DCT)
DCT (Expert) — The number of Hessian eigenvalues computed during the stability check

Type: integer

Default: 3

STABILITY_N_GUESS_VECTORS (DCT)
DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check

Type: integer

Default: 20

STEP_TYPE (OPTKING)
OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization

Type: string

Possible Values: RFO, RS_I_RFO, P_RFO, NR, SD, LINESEARCH

Default: RFO

SUMMATION_FIELDS (PE)
PE — Summation scheme for field computations, can be direct or fmm

Type: string

Possible Values: DIRECT, FMM

Default: DIRECT

SYMMETRIZE (OCC)
OCC — Do symmetrize the GFM and OPDM in the EKT computations?

Type: boolean

Default: true

T (THERMO)
THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP.

Type: double

Default: 298.15

T2_COUPLED (CCENERGY)
CCENERGY —

Type: boolean

Default: false

T3_WS_INCORE (CCENERGY)
CCENERGY — Do build W intermediates required for cc3 in core memory?

Type: boolean

Default: false

T3_WS_INCORE (CCEOM)
CCEOM — Do build W intermediates required for eom_cc3 in core memory?

Type: boolean

Default: false

T_AMPS (CCHBAR)
CCHBAR — Do compute the T amplitude equation matrix elements?

Type: boolean

Default: false

T_CUT_CLMO (DLPNO)
DLPNO (Expert) — Basis set coefficient threshold for including basis function (m) in domain of LMO (i)

Type: double

Default: 1e-2

T_CUT_CPAO (DLPNO)
DLPNO (Expert) — Basis set coefficient threshold for including basis function (n) in domain of PAO (u)

Type: double

Default: 1e-3

T_CUT_DO (DLPNO)
DLPNO (Expert) — DOI threshold for including PAO (u) in domain of LMO (i)

Type: double

Default: 1e-2

T_CUT_DO_IJ (DLPNO)
DLPNO (Expert) — DOI threshold for treating LMOs (i,j) as interacting

Type: double

Default: 1e-5

T_CUT_DO_PRE (DLPNO)
DLPNO (Expert) — DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening

Type: double

Default: 3e-2

T_CUT_MKN (DLPNO)
DLPNO (Expert) — Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i)

Type: double

Default: 1e-3

T_CUT_PNO (DLPNO)
DLPNO (Expert) — Occupation number threshold for removing PNOs

Type: double

Default: 1e-8

T_CUT_PRE (DLPNO)
DLPNO (Expert) — Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting

Type: double

Default: 1e-6

TDM (DETCI)
DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation.

Type: boolean

Default: false

TDSCF_COEFF_CUTOFF (SCF)
SCF — Cutoff for printing excitations and de-excitations contributing to each excited state

Type: double

Default: 0.1

TDSCF_GUESS (SCF)
SCF — Guess type, only ‘denominators’ currently supported

Type: string

Default: DENOMINATORS

TDSCF_MAXITER (SCF)
SCF — Maximum number of TDSCF solver iterations

Type: integer

Default: 60

TDSCF_PRINT (SCF)
SCF — Verbosity level in TDSCF

Type: integer

Default: 1

TDSCF_R_CONVERGENCE (SCF)
SCF — Convergence threshold for the norm of the residual vector. If unset, default based on D_CONVERGENCE.

Type: conv double

Default: 1e-4

TDSCF_STATES (SCF)
SCF — Number of roots (excited states) we should seek to converge. This can be either an integer (total number of states to seek) or a list (number of states per irrep). The latter is only valid if the system has symmetry. Furthermore, the total number of states will be redistributed among irreps when symmetry is used.

Type: array

Default: No Default

TDSCF_TDA (SCF)
SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false

Type: boolean

Default: false

TDSCF_TDM_PRINT (SCF)
SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments

Type: array

Default: No Default

TDSCF_TRIPLETS (SCF)
SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed

Type: string

Possible Values: NONE, ALSO, ONLY

Default: NONE

TEST_B (OPTKING)
OPTKING — Do test B matrix?

Type: boolean

Default: false

TEST_DERIVATIVE_B (OPTKING)
OPTKING — Do test derivative B matrix?

Type: boolean

Default: false

THETA_POINTS (SCF)
SCF — Number of colatitude grid points for spherical potential integration

Type: integer

Default: 360

THICKNESS (SCF)
SCF — Thickness (bohr) of a hard-sphere external potential

Type: double

Default: 20.0

THREE_PARTICLE (DCT)
DCT — Whether to compute three-particle energy correction or not

Type: string

Possible Values: NONE, PERTURBATIVE

Default: NONE

TIKHONOW_MAX (PSIMRCC)
PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations

Type: integer

Default: 5

TIKHONOW_OMEGA (DCT)
DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations

Type: double

Default: 0.0

TIKHONOW_OMEGA (PSIMRCC)
PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009)

Type: double

Default: 0.0

TIKHONOW_TRIPLES (PSIMRCC)
PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?

Type: boolean

Default: false

TILE_SZ (SCF)
SCF (Expert) — The tile size for the distributed matrices

Type: integer

Default: 512

TPDM (DETCI)
DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory

Type: boolean

Default: false

TPDM_ABCD_TYPE (OCC)
OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix.

Type: string

Possible Values: DIRECT, COMPUTE

Default: DIRECT

TRANSLATE_PSI4 (CFOUR)
CFOUR — Do translate set Psi4 options to their cfour counterparts.

Type: boolean

Default: true

TREE_EXPANSION_ORDER (PE)
PE — Expansion order of the multipoles for FMM

Type: integer

Default: 5

TREE_THETA (PE)
PE — Opening angle theta

Type: double

Default: 0.5

TRIPLES_ALGORITHM (PSIMRCC)
PSIMRCC — The type of algorithm to use for (T) computations

Type: string

Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED

Default: RESTRICTED

TRIPLES_DIIS (PSIMRCC)
PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?

Type: boolean

Default: false

TRIPLES_IABC_TYPE (DFOCC)
DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction.

Type: string

Possible Values: INCORE, AUTO, DIRECT, DISK

Default: DISK

TRIPLES_LOW_MEMORY (FNOCC)
FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020.

Type: boolean

Default: true

TURN_ON_ACTV (MCSCF)
MCSCF —

Type: integer

Default: 0

UHF_NOONS (SCF)
SCF — The number of NOONs to print in a UHF calc

Type: string

Default: 3

UNFREEZE_DIHEDRALS (OPTKING)
OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals

Type: string

Default: No Default

UPDATE (DETCI)
DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN.

Type: string

Possible Values: DAVIDSON, OLSEN

Default: DAVIDSON

USE_DF_INTS (FNOCC)
FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation.

Type: boolean

Default: false

USE_SPIN_SYM (PSIMRCC)
PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?

Type: boolean

Default: true

USE_SPIN_SYMMETRY (PSIMRCC)
PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency

Type: boolean

Default: true

VAL_EX_LEVEL (DETCI)
DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL.

Type: integer

Default: 0

VECS_CC3 (CCEOM)
CCEOM — Vectors stored in CC3 computations

Type: integer

Default: 10

VECS_PER_ROOT (CCEOM)
CCEOM — Vectors stored per root

Type: integer

Default: 12

WABEI_LOWDISK (CCHBAR)
CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!

Type: boolean

Default: false

WCOMBINE (SCF)
SCF — combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Disabled until fixed.

Type: boolean

Default: false

WFN (CCDENSITY)
CCDENSITY (Expert) — Wavefunction type

Type: string

Default: SCF

WFN (CCENERGY)
CCENERGY (Expert) — Wavefunction type

Type: string

Default: NONE

WFN (CCEOM)
CCEOM (Expert) — Wavefunction type

Type: string

Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3

Default: EOM_CCSD

WFN (CCHBAR)
CCHBAR (Expert) — Wavefunction type

Type: string

Default: SCF

WFN (CCLAMBDA)
CCLAMBDA (Expert) — Wavefunction type

Type: string

Default: SCF

WFN (CCRESPONSE)
CCRESPONSE (Expert) — Wavefunction type

Type: string

Default: SCF

WFN (CCTRANSORT)
CCTRANSORT (Expert) — Wavefunction type

Type: string

Default: No Default

WFN (CCTRIPLES)
CCTRIPLES (Expert) — Wavefunction type

Type: string

Default: SCF

WFN (DETCI)
DETCI (Expert) — Wavefunction type. This should be set automatically from the calling Psithon function.

Type: string

Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF

Default: DETCI

WFN (GLOBALS)
GLOBALS (Expert) — Wavefunction type

Type: string

Default: SCF

WFN (SCF)
SCF (Expert) — Wavefunction type

Type: string

Possible Values: SCF

Default: SCF

WFN_SYM (MCSCF)
MCSCF — The symmetry of the SCF wavefunction.

Type: string

Default: 1

WFN_SYM (PSIMRCC)
PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering)

Type: string

Default: 1

WFN_TYPE (DFOCC)
DFOCC — Type of the wavefunction.

Type: string

Default: DF-OMP2

WFN_TYPE (OCC)
OCC — Type of the wavefunction.

Type: string

Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP

Default: OMP2

WRITE_NOS (CCDENSITY)
CCDENSITY — Do write natural orbitals (molden)

Type: boolean

Default: false

WRITE_OPT_HISTORY (OPTKING)
OPTKING — Write the full history to disk. Produces a non validated OptimizationResult.

Type: boolean

Default: false

WRITE_OPT_RESULT (OPTKING)
OPTKING — Write the optimization history / state to disc

Type: boolean

Default: false

WRITE_TRAJECTORY (OPTKING)
OPTKING — Write Optimization Trajectory

Type: boolean

Default: false

WRITER_FILE_LABEL (GLOBALS)
GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive.

Type: string

Default: No Default

XI (CCDENSITY)
CCDENSITY — Do compute Xi?

Type: boolean

Default: false

XI_CONNECT (CCDENSITY)
CCDENSITY (Expert) — Do require 
 and 
 to be connected?

Type: boolean

Default: false

ZERO_INTERNAL_AMPS (PSIMRCC)
PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?

Type: boolean

Default: true

ZETA (CCDENSITY)
CCDENSITY — Do use zeta?

Type: boolean

Default: false

ZETA (CCLAMBDA)
CCLAMBDA — Do use zeta?

Type: boolean

Default: false
